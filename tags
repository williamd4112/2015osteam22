!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	code/test/matmult.c	/^int A[Dim][Dim];$/;"	v
A	code/test/sort.c	/^int A[SIZE];	\/* size of physical memory; with code, we'll run out of space!*\/$/;"	v
ADDRSPACE_H	code/userprog/addrspace.h	14;"	d
ALARM_H	code/threads/alarm.h	18;"	d
AS	code/build.cygwin/Makefile	/^AS = as$/;"	m
AS	code/build.linux/Makefile	/^AS = as$/;"	m
AS	code/build.macosx/Makefile	/^AS = as$/;"	m
AS	code/test/Makefile	/^AS = $(GCCDIR)as$/;"	m
ASSERT	code/lib/debug.h	64;"	d
ASSERTNOTREACHED	code/lib/debug.h	80;"	d
Abort	code/lib/sysdep.cc	/^Abort()$/;"	f
Acquire	code/threads/synch.cc	/^void Lock::Acquire()$/;"	f	class:Lock
Add	code/filesys/directory.cc	/^Directory::Add(char *name, int newSector)$/;"	f	class:Directory
Add	code/test/start.S	/^Add:$/;"	l
AddrSpace	code/userprog/addrspace.cc	/^AddrSpace::AddrSpace()$/;"	f	class:AddrSpace
AddrSpace	code/userprog/addrspace.h	/^class AddrSpace {$/;"	c
AddressErrorException	code/machine/machine.h	/^		     AddressErrorException, \/\/ Unaligned reference or one that$/;"	e	enum:ExceptionType
Alarm	code/threads/alarm.cc	/^Alarm::Alarm(bool doRandom)$/;"	f	class:Alarm
Alarm	code/threads/alarm.h	/^class Alarm : public CallBackObj {$/;"	c
AllocBoundedArray	code/lib/sysdep.cc	/^AllocBoundedArray(int size)$/;"	f
Allocate	code/filesys/filehdr.cc	/^FileHeader::Allocate(PersistentBitmap *freeMap, int fileSize)$/;"	f	class:FileHeader
Append	code/lib/list.cc	/^List<T>::Append(T item)$/;"	f	class:List
Append	code/lib/list.h	/^    void Append(T item) { Insert(item); }   \/\/ neither does *ap*pend $/;"	f	class:SortedList
Append	code/threads/synchlist.cc	/^SynchList<T>::Append(T item)$/;"	f	class:SynchList
Apply	code/lib/hash.cc	/^HashTable<Key,T>::Apply(void (*func)(T)) const$/;"	f	class:HashTable
Apply	code/lib/list.cc	/^List<T>::Apply(void (*func)(T)) const$/;"	f	class:List
Apply	code/threads/synchlist.cc	/^SynchList<T>::Apply(void (*func)(T))$/;"	f	class:SynchList
AssignNameToSocket	code/lib/sysdep.cc	/^AssignNameToSocket(char *socketName, int sockID)$/;"	f
B	code/test/matmult.c	/^int B[Dim][Dim];$/;"	v
BCOND	code/machine/mipssim.h	106;"	d
BITMAP_H	code/lib/bitmap.h	16;"	d
BLOCKED	code/threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
BadVAddrReg	code/machine/machine.h	74;"	d
Begin	code/threads/thread.cc	/^Thread::Begin ()$/;"	f	class:Thread
Bitmap	code/lib/bitmap.cc	/^Bitmap::Bitmap(int numItems) $/;"	f	class:Bitmap
Bitmap	code/lib/bitmap.h	/^class Bitmap {$/;"	c
BitsInByte	code/lib/bitmap.h	/^const int BitsInByte =	8;$/;"	v
BitsInWord	code/lib/bitmap.h	/^const int BitsInWord = sizeof(unsigned int) * BitsInByte;$/;"	v
Broadcast	code/threads/synch.cc	/^void Condition::Broadcast(Lock* conditionLock) $/;"	f	class:Condition
Bucket	code/lib/hash.h	/^typedef List<T> *Bucket;$/;"	t	class:HashTable
BusErrorException	code/machine/machine.h	/^		     BusErrorException,     \/\/ Translation resulted in an $/;"	e	enum:ExceptionType
ByteToSector	code/filesys/filehdr.cc	/^FileHeader::ByteToSector(int offset)$/;"	f	class:FileHeader
C	code/test/matmult.c	/^int C[Dim][Dim];$/;"	v
CALLBACK_H	code/machine/callback.h	27;"	d
CC	code/build.cygwin/Makefile	/^CC = g++$/;"	m
CC	code/build.linux/Makefile	/^CC = g++$/;"	m
CC	code/build.macosx/Makefile	/^CC = g++$/;"	m
CC	code/test/Makefile	/^CC = $(GCCDIR)gcc$/;"	m
CFILES	code/build.cygwin/Makefile	/^CFILES = $(LIB_C) $(MACHINE_C) $(THREAD_C) $(USERPROG_C) $(FILESYS_C) $(NETWORK_C)$/;"	m
CFILES	code/build.linux/Makefile	/^CFILES = $(LIB_C) $(MACHINE_C) $(THREAD_C) $(USERPROG_C) $(FILESYS_C) $(NETWORK_C)$/;"	m
CFILES	code/build.macosx/Makefile	/^CFILES = $(LIB_C) $(MACHINE_C) $(THREAD_C) $(USERPROG_C) $(FILESYS_C) $(NETWORK_C)$/;"	m
CFLAGS	code/build.cygwin/Makefile	/^CFLAGS = -g -Wall -fwritable-strings $(INCPATH) $(DEFINES) $(HOSTCFLAGS) -DCHANGED$/;"	m
CFLAGS	code/build.linux/Makefile	/^CFLAGS = -g -Wall $(INCPATH) $(DEFINES) $(HOSTCFLAGS) -DCHANGED -m32$/;"	m
CFLAGS	code/build.macosx/Makefile	/^CFLAGS = -g -Wall -fwritable-strings $(INCPATH) $(DEFINES) $(HOSTCFLAGS) -DCHANGED$/;"	m
CFLAGS	code/test/Makefile	/^CFLAGS = -G 0 -c $(INCDIR) -B\/usr\/bin\/local\/nachos\/lib\/gcc-lib\/decstation-ultrix\/2.95.2\/ -B\/usr\/bin\/local\/nachos\/decstation-ultrix\/bin\/$/;"	m
CONSOLE_H	code/machine/console.h	28;"	d
CPP	code/build.cygwin/Makefile	/^CPP= cpp$/;"	m
CPP	code/build.linux/Makefile	/^CPP=\/lib\/cpp$/;"	m
CPP	code/build.macosx/Makefile	/^CPP=\/lib\/cpp$/;"	m
CPP_AS_FLAGS	code/build.linux/Makefile	/^CPP_AS_FLAGS= -m32$/;"	m
CR	code/threads/switch.h	203;"	d
C_OFILES	code/build.cygwin/Makefile	/^C_OFILES = $(LIB_O) $(MACHINE_O) $(THREAD_O) $(USERPROG_O) $(FILESYS_O) $(NETWORK_O)$/;"	m
C_OFILES	code/build.linux/Makefile	/^C_OFILES = $(LIB_O) $(MACHINE_O) $(THREAD_O) $(USERPROG_O) $(FILESYS_O) $(NETWORK_O)$/;"	m
C_OFILES	code/build.macosx/Makefile	/^C_OFILES = $(LIB_O) $(MACHINE_O) $(THREAD_O) $(USERPROG_O) $(FILESYS_O) $(NETWORK_O)$/;"	m
CallBack	code/filesys/synchdisk.cc	/^SynchDisk::CallBack()$/;"	f	class:SynchDisk
CallBack	code/machine/console.cc	/^ConsoleInput::CallBack()$/;"	f	class:ConsoleInput
CallBack	code/machine/console.cc	/^ConsoleOutput::CallBack()$/;"	f	class:ConsoleOutput
CallBack	code/machine/disk.cc	/^Disk::CallBack ()$/;"	f	class:Disk
CallBack	code/machine/network.cc	/^NetworkInput::CallBack()$/;"	f	class:NetworkInput
CallBack	code/machine/network.cc	/^NetworkOutput::CallBack()$/;"	f	class:NetworkOutput
CallBack	code/machine/timer.cc	/^Timer::CallBack() $/;"	f	class:Timer
CallBack	code/network/post.cc	/^PostOfficeInput::CallBack()$/;"	f	class:PostOfficeInput
CallBack	code/network/post.cc	/^PostOfficeOutput::CallBack()$/;"	f	class:PostOfficeOutput
CallBack	code/threads/alarm.cc	/^Alarm::CallBack() $/;"	f	class:Alarm
CallBack	code/userprog/synchconsole.cc	/^SynchConsoleInput::CallBack()$/;"	f	class:SynchConsoleInput
CallBack	code/userprog/synchconsole.cc	/^SynchConsoleOutput::CallBack()$/;"	f	class:SynchConsoleOutput
CallBackObj	code/machine/callback.h	/^     CallBackObj() {};	\/\/ to prevent anyone from creating$/;"	f	class:CallBackObj
CallBackObj	code/machine/callback.h	/^class CallBackObj {$/;"	c
CallOnUserAbort	code/lib/sysdep.cc	/^CallOnUserAbort(void (*func)(int))$/;"	f
ChangeLevel	code/machine/interrupt.cc	/^Interrupt::ChangeLevel(IntStatus old, IntStatus now)$/;"	f	class:Interrupt
CheckEndian	code/machine/machine.cc	/^void CheckEndian()$/;"	f	file:
CheckIfDue	code/machine/interrupt.cc	/^Interrupt::CheckIfDue(bool advanceClock)$/;"	f	class:Interrupt
CheckOverflow	code/threads/thread.cc	/^Thread::CheckOverflow()$/;"	f	class:Thread
CheckToBeDestroyed	code/threads/scheduler.cc	/^Scheduler::CheckToBeDestroyed()$/;"	f	class:Scheduler
Cleanup	code/threads/main.cc	/^Cleanup(int x) $/;"	f	file:
Clear	code/lib/bitmap.cc	/^Bitmap::Clear(int which) $/;"	f	class:Bitmap
Close	code/lib/sysdep.cc	/^Close(int fd)$/;"	f
Close	code/test/start.S	/^Close:$/;"	l
CloseSocket	code/lib/sysdep.cc	/^CloseSocket(int sockID)$/;"	f
ComputeLatency	code/machine/disk.cc	/^Disk::ComputeLatency(int newSector, bool writing)$/;"	f	class:Disk
Condition	code/threads/synch.cc	/^Condition::Condition(char* debugName)$/;"	f	class:Condition
Condition	code/threads/synch.h	/^class Condition {$/;"	c
ConsoleInput	code/machine/console.cc	/^ConsoleInput::ConsoleInput(char *readFile, CallBackObj *toCall)$/;"	f	class:ConsoleInput
ConsoleInput	code/machine/console.h	/^class ConsoleInput : public CallBackObj {$/;"	c
ConsoleOutput	code/machine/console.cc	/^ConsoleOutput::ConsoleOutput(char *writeFile, CallBackObj *toCall)$/;"	f	class:ConsoleOutput
ConsoleOutput	code/machine/console.h	/^class ConsoleOutput : public CallBackObj {$/;"	c
ConsoleReadInt	code/machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
ConsoleTest	code/threads/kernel.cc	/^Kernel::ConsoleTest() {$/;"	f	class:Kernel
ConsoleTime	code/machine/stats.h	/^const int ConsoleTime =	 100;	\/\/ time to read or write one character$/;"	v
ConsoleWriteInt	code/machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
Copy	code/threads/main.cc	/^Copy(char *from, char *to)$/;"	f	file:
Create	code/filesys/filesys.cc	/^FileSystem::Create(char *name, int initialSize)$/;"	f	class:FileSystem
Create	code/filesys/filesys.h	/^    bool Create(char *name) {$/;"	f	class:FileSystem
Create	code/test/start.S	/^Create:$/;"	l
CreateFile	code/machine/interrupt.cc	/^Interrupt::CreateFile(char *filename)$/;"	f	class:Interrupt
CreateFile	code/threads/kernel.cc	/^int Kernel::CreateFile(char *filename)$/;"	f	class:Kernel
DEBUG	code/lib/debug.h	50;"	d
DEBUG_H	code/lib/debug.h	14;"	d
DEFINES	code/build.cygwin/Makefile	/^DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX$/;"	m
DEFINES	code/build.linux/Makefile	/^DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX$/;"	m
DEFINES	code/build.macosx/Makefile	/^DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX$/;"	m
DIRECTORY_H	code/filesys/directory.h	18;"	d
DISK_H	code/machine/disk.h	18;"	d
DeAssignNameToSocket	code/lib/sysdep.cc	/^DeAssignNameToSocket(char *socketName)$/;"	f
DeallocBoundedArray	code/lib/sysdep.cc	/^DeallocBoundedArray(char *ptr, int \/* size *\/)$/;"	f
DeallocBoundedArray	code/lib/sysdep.cc	/^DeallocBoundedArray(char *ptr, int size)$/;"	f
Deallocate	code/filesys/filehdr.cc	/^FileHeader::Deallocate(PersistentBitmap *freeMap)$/;"	f	class:FileHeader
Debug	code/lib/debug.cc	/^Debug::Debug(char *flagList)$/;"	f	class:Debug
Debug	code/lib/debug.h	/^class Debug {$/;"	c
Debugger	code/machine/machine.cc	/^void Machine::Debugger()$/;"	f	class:Machine
Decode	code/machine/mipssim.cc	/^Instruction::Decode()$/;"	f	class:Instruction
Delay	code/lib/sysdep.cc	/^Delay(int seconds)$/;"	f
DelayedLoad	code/machine/mipssim.cc	/^Machine::DelayedLoad(int nextReg, int nextValue)$/;"	f	class:Machine
DeleteBuckets	code/lib/hash.cc	/^HashTable<Key,T>::DeleteBuckets(List<T> **table, int sz)$/;"	f	class:HashTable
Dim	code/test/matmult.c	12;"	d	file:
Directory	code/filesys/directory.cc	/^Directory::Directory(int size)$/;"	f	class:Directory
Directory	code/filesys/directory.h	/^class Directory {$/;"	c
DirectoryEntry	code/filesys/directory.h	/^class DirectoryEntry {$/;"	c
DirectoryFileSize	code/filesys/filesys.cc	66;"	d	file:
DirectorySector	code/filesys/filesys.cc	59;"	d	file:
Disable	code/machine/timer.h	/^    void Disable() { disable = TRUE; }$/;"	f	class:Timer
Disk	code/machine/disk.cc	/^Disk::Disk(CallBackObj *toCall)$/;"	f	class:Disk
Disk	code/machine/disk.h	/^class Disk : public CallBackObj {$/;"	c
DiskInt	code/machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
DiskSize	code/machine/disk.cc	/^const int DiskSize = (MagicSize + (NumSectors * SectorSize));$/;"	v
DumpState	code/machine/interrupt.cc	/^Interrupt::DumpState()$/;"	f	class:Interrupt
DumpState	code/machine/machine.cc	/^Machine::DumpState()$/;"	f	class:Machine
E2BIG	code/userprog/errno.h	32;"	d
EACCES	code/userprog/errno.h	38;"	d
EAGAIN	code/userprog/errno.h	36;"	d
EBADE	code/userprog/errno.h	77;"	d
EBADF	code/userprog/errno.h	34;"	d
EBADR	code/userprog/errno.h	78;"	d
EBADRQC	code/userprog/errno.h	81;"	d
EBADSLT	code/userprog/errno.h	82;"	d
EBUSY	code/userprog/errno.h	41;"	d
ECHILD	code/userprog/errno.h	35;"	d
ECHRNG	code/userprog/errno.h	69;"	d
EDEADLK	code/userprog/errno.h	60;"	d
EDOM	code/userprog/errno.h	58;"	d
EEXIST	code/userprog/errno.h	42;"	d
EFAULT	code/userprog/errno.h	39;"	d
EFBIG	code/userprog/errno.h	52;"	d
EIDRM	code/userprog/errno.h	68;"	d
EINTR	code/userprog/errno.h	29;"	d
EINVAL	code/userprog/errno.h	47;"	d
EIO	code/userprog/errno.h	30;"	d
EISDIR	code/userprog/errno.h	46;"	d
EL2HLT	code/userprog/errno.h	76;"	d
EL2NSYNC	code/userprog/errno.h	70;"	d
EL3HLT	code/userprog/errno.h	71;"	d
EL3RST	code/userprog/errno.h	72;"	d
ELNRNG	code/userprog/errno.h	73;"	d
ELOOP	code/userprog/errno.h	65;"	d
EMFILE	code/userprog/errno.h	49;"	d
EMLINK	code/userprog/errno.h	56;"	d
ENAMETOOLONG	code/userprog/errno.h	61;"	d
ENFILE	code/userprog/errno.h	48;"	d
ENOANO	code/userprog/errno.h	80;"	d
ENOCSI	code/userprog/errno.h	75;"	d
ENODEV	code/userprog/errno.h	44;"	d
ENOENT	code/userprog/errno.h	27;"	d
ENOEXEC	code/userprog/errno.h	33;"	d
ENOLCK	code/userprog/errno.h	62;"	d
ENOMEM	code/userprog/errno.h	37;"	d
ENOMSG	code/userprog/errno.h	67;"	d
ENOSPC	code/userprog/errno.h	53;"	d
ENOSYS	code/userprog/errno.h	63;"	d
ENOTBLK	code/userprog/errno.h	40;"	d
ENOTDIR	code/userprog/errno.h	45;"	d
ENOTEMPTY	code/userprog/errno.h	64;"	d
ENOTTY	code/userprog/errno.h	50;"	d
ENXIO	code/userprog/errno.h	31;"	d
EPERM	code/userprog/errno.h	26;"	d
EPIPE	code/userprog/errno.h	57;"	d
ERANGE	code/userprog/errno.h	59;"	d
EROFS	code/userprog/errno.h	55;"	d
ERRNO_H	code/userprog/errno.h	22;"	d
ESPIPE	code/userprog/errno.h	54;"	d
ESRCH	code/userprog/errno.h	28;"	d
ETXTBSY	code/userprog/errno.h	51;"	d
EUNATCH	code/userprog/errno.h	74;"	d
EWOULDBLOCK	code/userprog/errno.h	66;"	d
EXDEV	code/userprog/errno.h	43;"	d
EXFULL	code/userprog/errno.h	79;"	d
EXTRA	code/machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
Enable	code/machine/interrupt.h	/^    void Enable() { (void) SetLevel(IntOn); }$/;"	f	class:Interrupt
ExceptionHandler	code/userprog/exception.cc	/^ExceptionHandler(ExceptionType which)$/;"	f
ExceptionType	code/machine/machine.h	/^enum ExceptionType { NoException,           \/\/ Everything ok!$/;"	g
Exec	code/test/start.S	/^Exec:$/;"	l
Exec	code/threads/kernel.cc	/^int Kernel::Exec(char* name)$/;"	f	class:Kernel
ExecAll	code/threads/kernel.cc	/^void Kernel::ExecAll()$/;"	f	class:Kernel
ExecV	code/test/start.S	/^ExecV:$/;"	l
Execute	code/userprog/addrspace.cc	/^AddrSpace::Execute(char* fileName) $/;"	f	class:AddrSpace
Exit	code/lib/sysdep.cc	/^Exit(int exitCode)$/;"	f
Exit	code/test/sort.c	18;"	d	file:
Exit	code/test/start.S	/^Exit:$/;"	l
FALSE	code/lib/utility.h	17;"	d
FILEHDR_H	code/filesys/filehdr.h	15;"	d
FILESYS_C	code/build.cygwin/Makefile	/^FILESYS_C =..\/filesys\/directory.cc\\$/;"	m
FILESYS_C	code/build.linux/Makefile	/^FILESYS_C =..\/filesys\/directory.cc\\$/;"	m
FILESYS_C	code/build.macosx/Makefile	/^FILESYS_C =..\/filesys\/directory.cc\\$/;"	m
FILESYS_H	code/build.cygwin/Makefile	/^FILESYS_H =..\/filesys\/directory.h \\$/;"	m
FILESYS_H	code/build.linux/Makefile	/^FILESYS_H =..\/filesys\/directory.h \\$/;"	m
FILESYS_H	code/build.macosx/Makefile	/^FILESYS_H =..\/filesys\/directory.h \\$/;"	m
FILESYS_O	code/build.cygwin/Makefile	/^FILESYS_O =directory.o filehdr.o filesys.o pbitmap.o openfile.o synchdisk.o$/;"	m
FILESYS_O	code/build.linux/Makefile	/^FILESYS_O =directory.o filehdr.o filesys.o pbitmap.o openfile.o synchdisk.o$/;"	m
FILESYS_O	code/build.macosx/Makefile	/^FILESYS_O =directory.o filehdr.o filesys.o pbitmap.o openfile.o synchdisk.o$/;"	m
FP	code/threads/switch.h	38;"	d
FP	code/threads/switch.h	78;"	d
FP13	code/threads/switch.h	185;"	d
FP15	code/threads/switch.h	186;"	d
FP16	code/threads/switch.h	187;"	d
FP17	code/threads/switch.h	188;"	d
FP18	code/threads/switch.h	189;"	d
FP19	code/threads/switch.h	190;"	d
FP20	code/threads/switch.h	191;"	d
FP21	code/threads/switch.h	192;"	d
FP22	code/threads/switch.h	193;"	d
FP23	code/threads/switch.h	194;"	d
FP24	code/threads/switch.h	195;"	d
FP25	code/threads/switch.h	196;"	d
FP26	code/threads/switch.h	197;"	d
FP27	code/threads/switch.h	198;"	d
FP28	code/threads/switch.h	199;"	d
FP29	code/threads/switch.h	200;"	d
FP30	code/threads/switch.h	201;"	d
FP31	code/threads/switch.h	202;"	d
FPState	code/threads/switch.h	146;"	d
FPState	code/threads/switch.h	260;"	d
FPState	code/threads/switch.h	57;"	d
FS_H	code/filesys/filesys.h	34;"	d
FetchFrom	code/filesys/directory.cc	/^Directory::FetchFrom(OpenFile *file)$/;"	f	class:Directory
FetchFrom	code/filesys/filehdr.cc	/^FileHeader::FetchFrom(int sector)$/;"	f	class:FileHeader
FetchFrom	code/filesys/pbitmap.cc	/^PersistentBitmap::FetchFrom(OpenFile *file) $/;"	f	class:PersistentBitmap
FileHeader	code/filesys/filehdr.h	/^class FileHeader {$/;"	c
FileLength	code/filesys/filehdr.cc	/^FileHeader::FileLength()$/;"	f	class:FileHeader
FileNameMaxLen	code/filesys/directory.h	22;"	d
FileSystem	code/filesys/filesys.cc	/^FileSystem::FileSystem(bool format)$/;"	f	class:FileSystem
FileSystem	code/filesys/filesys.h	/^    FileSystem() { for (int i = 0; i < 20; i++) fileDescriptorTable[i] = NULL; }$/;"	f	class:FileSystem
FileSystem	code/filesys/filesys.h	/^class FileSystem {$/;"	c
Find	code/filesys/directory.cc	/^Directory::Find(char *name)$/;"	f	class:Directory
Find	code/lib/hash.cc	/^HashTable<Key,T>::Find(Key key, T *itemPtr) const$/;"	f	class:HashTable
FindAndSet	code/lib/bitmap.cc	/^Bitmap::FindAndSet() $/;"	f	class:Bitmap
FindInBucket	code/lib/hash.cc	/^HashTable<Key,T>::FindInBucket(int bucket, $/;"	f	class:HashTable
FindIndex	code/filesys/directory.cc	/^Directory::FindIndex(char *name)$/;"	f	class:Directory
FindNextFullBucket	code/lib/hash.cc	/^HashTable<Key,T>::FindNextFullBucket(int bucket) const$/;"	f	class:HashTable
FindNextToRun	code/threads/scheduler.cc	/^Scheduler::FindNextToRun ()$/;"	f	class:Scheduler
Finish	code/threads/thread.cc	/^Thread::Finish ()$/;"	f	class:Thread
Fork	code/threads/thread.cc	/^Thread::Fork(VoidFunctionPtr func, void *arg)$/;"	f	class:Thread
ForkExecute	code/threads/kernel.cc	/^void ForkExecute(Thread *t)$/;"	f
FreeMapFileSize	code/filesys/filesys.cc	64;"	d	file:
FreeMapSector	code/filesys/filesys.cc	58;"	d	file:
Front	code/lib/list.h	/^    T Front() { return first->item; }$/;"	f	class:List
GP	code/threads/switch.h	242;"	d
GP13	code/threads/switch.h	166;"	d
GP14	code/threads/switch.h	167;"	d
GP15	code/threads/switch.h	168;"	d
GP16	code/threads/switch.h	169;"	d
GP17	code/threads/switch.h	170;"	d
GP18	code/threads/switch.h	171;"	d
GP19	code/threads/switch.h	172;"	d
GP20	code/threads/switch.h	173;"	d
GP21	code/threads/switch.h	174;"	d
GP22	code/threads/switch.h	175;"	d
GP23	code/threads/switch.h	176;"	d
GP24	code/threads/switch.h	177;"	d
GP25	code/threads/switch.h	178;"	d
GP26	code/threads/switch.h	179;"	d
GP27	code/threads/switch.h	180;"	d
GP28	code/threads/switch.h	181;"	d
GP29	code/threads/switch.h	182;"	d
GP30	code/threads/switch.h	183;"	d
GP31	code/threads/switch.h	184;"	d
Get	code/network/post.cc	/^MailBox::Get(PacketHeader *pktHdr, MailHeader *mailHdr, char *data) $/;"	f	class:MailBox
GetChar	code/machine/console.cc	/^ConsoleInput::GetChar()$/;"	f	class:ConsoleInput
GetChar	code/userprog/synchconsole.cc	/^SynchConsoleInput::GetChar()$/;"	f	class:SynchConsoleInput
HASH_H	code/lib/hash.h	30;"	d
HFILES	code/build.cygwin/Makefile	/^HFILES = $(LIB_H) $(MACHINE_H) $(THREAD_H) $(USERPROG_H) $(FILESYS_H) $(NETWORK_H)$/;"	m
HFILES	code/build.linux/Makefile	/^HFILES = $(LIB_H) $(MACHINE_H) $(THREAD_H) $(USERPROG_H) $(FILESYS_H) $(NETWORK_H)$/;"	m
HFILES	code/build.macosx/Makefile	/^HFILES = $(LIB_H) $(MACHINE_H) $(THREAD_H) $(USERPROG_H) $(FILESYS_H) $(NETWORK_H)$/;"	m
Halt	code/machine/interrupt.cc	/^Interrupt::Halt()$/;"	f	class:Interrupt
Halt	code/test/start.S	/^Halt:$/;"	l
HashInt	code/lib/libtest.cc	/^HashInt(int key) {$/;"	f	file:
HashIterator	code/lib/hash.cc	/^HashIterator<Key,T>::HashIterator(HashTable<Key,T> *tbl) $/;"	f	class:HashIterator
HashIterator	code/lib/hash.h	/^class HashIterator {$/;"	c
HashKey	code/lib/libtest.cc	/^HashKey(char *str) {$/;"	f	file:
HashTable	code/lib/hash.cc	/^HashTable<Key,T>::HashTable(Key (*get)(T x), unsigned (*hFunc)(Key x))$/;"	f	class:HashTable
HashTable	code/lib/hash.h	/^class HashTable {$/;"	c
HashValue	code/lib/hash.cc	/^HashTable<Key, T>::HashValue(Key key) const $/;"	f	class:HashTable
HiReg	code/machine/machine.h	67;"	d
I0	code/threads/switch.h	68;"	d
I1	code/threads/switch.h	69;"	d
I2	code/threads/switch.h	70;"	d
I3	code/threads/switch.h	71;"	d
I4	code/threads/switch.h	72;"	d
I5	code/threads/switch.h	73;"	d
I6	code/threads/switch.h	74;"	d
I7	code/threads/switch.h	75;"	d
ID	code/threads/thread.h	/^	int   ID;$/;"	m	class:Thread
IFMT	code/machine/mipssim.h	108;"	d
INCDIR	code/test/Makefile	/^INCDIR =-I..\/userprog -I..\/lib$/;"	m
INCPATH	code/build.cygwin/Makefile	/^INCPATH = -I..\/network -I..\/filesys -I..\/userprog -I..\/threads -I..\/machine -I..\/lib$/;"	m
INCPATH	code/build.linux/Makefile	/^INCPATH = -I..\/network -I..\/filesys -I..\/userprog -I..\/threads -I..\/machine -I..\/lib -I-$/;"	m
INCPATH	code/build.macosx/Makefile	/^INCPATH = -I..\/network -I..\/filesys -I..\/userprog -I..\/threads -I..\/machine -I..\/lib$/;"	m
INTERRUPT_H	code/machine/interrupt.h	34;"	d
IN_ASM	code/test/start.S	/^#define IN_ASM$/;"	d
Idle	code/machine/interrupt.cc	/^Interrupt::Idle()$/;"	f	class:Interrupt
IdleMode	code/machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
IllegalInstrException	code/machine/machine.h	/^		     IllegalInstrException, \/\/ Unimplemented or reserved instr.$/;"	e	enum:ExceptionType
IncreaseSizeBy	code/lib/hash.cc	/^const int IncreaseSizeBy = 4;	\/\/ how much do we grow table when needed?$/;"	v
IndexToAddr	code/machine/mipssim.h	94;"	d
InitBuckets	code/lib/hash.cc	/^HashTable<Key,T>::InitBuckets(int sz)$/;"	f	class:HashTable
InitRegisters	code/userprog/addrspace.cc	/^AddrSpace::InitRegisters()$/;"	f	class:AddrSpace
InitSocketName	code/lib/sysdep.cc	/^InitSocketName(struct sockaddr_un *uname, char *name)$/;"	f	file:
InitialArg	code/threads/switch.h	119;"	d
InitialArg	code/threads/switch.h	153;"	d
InitialArg	code/threads/switch.h	219;"	d
InitialArg	code/threads/switch.h	255;"	d
InitialArg	code/threads/switch.h	52;"	d
InitialArg	code/threads/switch.h	83;"	d
InitialArgState	code/threads/switch.h	125;"	d
InitialArgState	code/threads/switch.h	148;"	d
InitialArgState	code/threads/switch.h	211;"	d
InitialArgState	code/threads/switch.h	262;"	d
InitialArgState	code/threads/switch.h	59;"	d
InitialArgState	code/threads/switch.h	89;"	d
InitialBuckets	code/lib/hash.cc	/^const int InitialBuckets = 4;	\/\/ how big a hash table do we start with$/;"	v
InitialLR	code/threads/switch.h	218;"	d
InitialPC	code/threads/switch.h	118;"	d
InitialPC	code/threads/switch.h	152;"	d
InitialPC	code/threads/switch.h	254;"	d
InitialPC	code/threads/switch.h	51;"	d
InitialPC	code/threads/switch.h	82;"	d
InitialPCState	code/threads/switch.h	124;"	d
InitialPCState	code/threads/switch.h	147;"	d
InitialPCState	code/threads/switch.h	210;"	d
InitialPCState	code/threads/switch.h	261;"	d
InitialPCState	code/threads/switch.h	58;"	d
InitialPCState	code/threads/switch.h	88;"	d
Initialize	code/threads/kernel.cc	/^Kernel::Initialize()$/;"	f	class:Kernel
Insert	code/lib/hash.cc	/^HashTable<Key,T>::Insert(T item)$/;"	f	class:HashTable
Insert	code/lib/list.cc	/^SortedList<T>::Insert(T item)$/;"	f	class:SortedList
Instruction	code/machine/mipssim.cc	/^class Instruction {$/;"	c	file:
IntCompare	code/lib/libtest.cc	/^IntCompare(int x, int y) {$/;"	f	file:
IntOff	code/machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	e	enum:IntStatus
IntOn	code/machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	e	enum:IntStatus
IntStatus	code/machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	g
IntType	code/machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	g
Interrupt	code/machine/interrupt.cc	/^Interrupt::Interrupt()$/;"	f	class:Interrupt
Interrupt	code/machine/interrupt.h	/^class Interrupt {$/;"	c
IsDone	code/lib/hash.h	/^    bool IsDone() { return (bucket == table->numBuckets); };$/;"	f	class:HashIterator
IsDone	code/lib/list.h	/^    bool IsDone() { return current == NULL; };$/;"	f	class:ListIterator
IsEmpty	code/lib/hash.h	/^    bool IsEmpty() { return numItems == 0; }	$/;"	f	class:HashTable
IsEmpty	code/lib/list.h	/^    bool IsEmpty() { return (numInList == 0); };$/;"	f	class:List
IsEnabled	code/lib/debug.cc	/^Debug::IsEnabled(char flag)$/;"	f	class:Debug
IsHeldByCurrentThread	code/threads/synch.h	/^    bool IsHeldByCurrentThread() { $/;"	f	class:Lock
IsInList	code/lib/list.cc	/^List<T>::IsInList(T item) const$/;"	f	class:List
IsInTable	code/lib/hash.h	/^    bool IsInTable(Key key) { T dummy; return Find(key, &dummy); } 	$/;"	f	class:HashTable
Item	code/lib/hash.h	/^    T Item() { ASSERT(!IsDone()); return bucketIter->Item(); }; $/;"	f	class:HashIterator
Item	code/lib/list.h	/^    T Item() { ASSERT(!IsDone()); return current->item; };$/;"	f	class:ListIterator
JFMT	code/machine/mipssim.h	109;"	d
JUST_CREATED	code/threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
Join	code/test/start.S	/^Join:$/;"	l
KERNEL_H	code/threads/kernel.h	9;"	d
Kernel	code/threads/kernel.cc	/^Kernel::Kernel(int argc, char **argv)$/;"	f	class:Kernel
Kernel	code/threads/kernel.h	/^class Kernel {$/;"	c
LD	code/build.cygwin/Makefile	/^LD = g++$/;"	m
LD	code/build.linux/Makefile	/^LD = g++$/;"	m
LD	code/build.macosx/Makefile	/^LD = g++$/;"	m
LD	code/test/Makefile	/^LD = $(GCCDIR)ld$/;"	m
LDFLAGS	code/build.cygwin/Makefile	/^LDFLAGS =$/;"	m
LDFLAGS	code/build.linux/Makefile	/^LDFLAGS = -m32$/;"	m
LDFLAGS	code/build.macosx/Makefile	/^LDFLAGS =$/;"	m
LIBTEST_H	code/lib/libtest.h	9;"	d
LIB_C	code/build.cygwin/Makefile	/^LIB_C = ..\/lib\/bitmap.cc\\$/;"	m
LIB_C	code/build.linux/Makefile	/^LIB_C = ..\/lib\/bitmap.cc\\$/;"	m
LIB_C	code/build.macosx/Makefile	/^LIB_C = ..\/lib\/bitmap.cc\\$/;"	m
LIB_H	code/build.cygwin/Makefile	/^LIB_H = ..\/lib\/bitmap.h\\$/;"	m
LIB_H	code/build.linux/Makefile	/^LIB_H = ..\/lib\/bitmap.h\\$/;"	m
LIB_H	code/build.macosx/Makefile	/^LIB_H = ..\/lib\/bitmap.h\\$/;"	m
LIB_O	code/build.cygwin/Makefile	/^LIB_O = bitmap.o debug.o libtest.o sysdep.o$/;"	m
LIB_O	code/build.linux/Makefile	/^LIB_O = bitmap.o debug.o libtest.o sysdep.o$/;"	m
LIB_O	code/build.macosx/Makefile	/^LIB_O = bitmap.o debug.o libtest.o sysdep.o$/;"	m
LIST_H	code/lib/list.h	14;"	d
LR	code/threads/switch.h	204;"	d
Length	code/filesys/openfile.cc	/^OpenFile::Length() $/;"	f	class:OpenFile
Length	code/filesys/openfile.h	/^    int Length() { Lseek(file, 0, 2); return Tell(file); }$/;"	f	class:OpenFile
LibSelfTest	code/lib/libtest.cc	/^LibSelfTest () {$/;"	f
List	code/filesys/directory.cc	/^Directory::List()$/;"	f	class:Directory
List	code/filesys/filesys.cc	/^FileSystem::List()$/;"	f	class:FileSystem
List	code/lib/list.cc	/^List<T>::List()$/;"	f	class:List
List	code/lib/list.h	/^class List {$/;"	c
ListElement	code/lib/list.cc	/^ListElement<T>::ListElement(T itm)$/;"	f	class:ListElement
ListElement	code/lib/list.h	/^class ListElement {$/;"	c
ListIterator	code/lib/list.h	/^    ListIterator(List<T> *list) { current = list->first; } $/;"	f	class:ListIterator
ListIterator	code/lib/list.h	/^class ListIterator {$/;"	c
LoReg	code/machine/machine.h	68;"	d
Load	code/userprog/addrspace.cc	/^AddrSpace::Load(char *fileName) $/;"	f	class:AddrSpace
LoadReg	code/machine/machine.h	72;"	d
LoadValueReg	code/machine/machine.h	73;"	d
Lock	code/threads/synch.cc	/^Lock::Lock(char* debugName)$/;"	f	class:Lock
Lock	code/threads/synch.h	/^class Lock {$/;"	c
Lseek	code/lib/sysdep.cc	/^Lseek(int fd, int offset, int whence)$/;"	f
MACHINE_C	code/build.cygwin/Makefile	/^MACHINE_C = ..\/machine\/interrupt.cc\\$/;"	m
MACHINE_C	code/build.linux/Makefile	/^MACHINE_C = ..\/machine\/interrupt.cc\\$/;"	m
MACHINE_C	code/build.macosx/Makefile	/^MACHINE_C = ..\/machine\/interrupt.cc\\$/;"	m
MACHINE_H	code/build.cygwin/Makefile	/^MACHINE_H = ..\/machine\/callback.h\\$/;"	m
MACHINE_H	code/build.linux/Makefile	/^MACHINE_H = ..\/machine\/callback.h\\$/;"	m
MACHINE_H	code/build.macosx/Makefile	/^MACHINE_H = ..\/machine\/callback.h\\$/;"	m
MACHINE_H	code/machine/machine.h	22;"	d
MACHINE_O	code/build.cygwin/Makefile	/^MACHINE_O = interrupt.o stats.o timer.o console.o machine.o mipssim.o\\$/;"	m
MACHINE_O	code/build.linux/Makefile	/^MACHINE_O = interrupt.o stats.o timer.o console.o machine.o mipssim.o\\$/;"	m
MACHINE_O	code/build.macosx/Makefile	/^MACHINE_O = interrupt.o stats.o timer.o console.o machine.o mipssim.o\\$/;"	m
MAIN	code/threads/main.cc	40;"	d	file:
MAIN	code/threads/main.cc	42;"	d	file:
MAIN_H	code/threads/main.h	9;"	d
MIPSSIM_H	code/machine/mipssim.h	11;"	d
MSG	code/test/start.S	/^MSG:$/;"	l
Machine	code/machine/machine.cc	/^Machine::Machine(bool debug)$/;"	f	class:Machine
Machine	code/machine/machine.h	/^class Machine {$/;"	c
MachineStateSize	code/threads/thread.h	53;"	d
MachineStatus	code/machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	g
MagicNumber	code/machine/disk.cc	/^const int MagicNumber = 0x456789ab;$/;"	v
MagicSize	code/machine/disk.cc	/^const int MagicSize = sizeof(int);$/;"	v
Mail	code/network/post.cc	/^Mail::Mail(PacketHeader pktH, MailHeader mailH, char *msgData)$/;"	f	class:Mail
Mail	code/network/post.h	/^class Mail {$/;"	c
MailBox	code/network/post.cc	/^MailBox::MailBox()$/;"	f	class:MailBox
MailBox	code/network/post.h	/^class MailBox {$/;"	c
MailBoxAddress	code/network/post.h	/^typedef int MailBoxAddress;$/;"	t
MailHeader	code/network/post.h	/^class MailHeader {$/;"	c
Mark	code/lib/bitmap.cc	/^Bitmap::Mark(int which) $/;"	f	class:Bitmap
MaxFileSize	code/filesys/filehdr.h	21;"	d
MaxMailSize	code/network/post.h	56;"	d
MaxOpcode	code/machine/mipssim.h	88;"	d
MaxPacketSize	code/machine/network.h	42;"	d
MaxWireSize	code/machine/network.h	41;"	d
MemorySize	code/machine/machine.h	/^const int MemorySize = (NumPhysPages * PageSize);$/;"	v
ModuloDiff	code/machine/disk.cc	/^Disk::ModuloDiff(int to, int from)$/;"	f	class:Disk
Mult	code/machine/mipssim.cc	/^Mult(int a, int b, bool signedArith, int* hiPtr, int* loPtr)$/;"	f	file:
N	code/test/segments.c	17;"	d	file:
NETWORK_C	code/build.cygwin/Makefile	/^NETWORK_C = ..\/network\/post.cc$/;"	m
NETWORK_C	code/build.linux/Makefile	/^NETWORK_C = ..\/network\/post.cc$/;"	m
NETWORK_C	code/build.macosx/Makefile	/^NETWORK_C = ..\/network\/post.cc$/;"	m
NETWORK_H	code/build.cygwin/Makefile	/^NETWORK_H = ..\/network\/post.h$/;"	m
NETWORK_H	code/build.linux/Makefile	/^NETWORK_H = ..\/network\/post.h$/;"	m
NETWORK_H	code/build.macosx/Makefile	/^NETWORK_H = ..\/network\/post.h$/;"	m
NETWORK_H	code/machine/network.h	16;"	d
NETWORK_O	code/build.cygwin/Makefile	/^NETWORK_O = post.o$/;"	m
NETWORK_O	code/build.linux/Makefile	/^NETWORK_O = post.o$/;"	m
NETWORK_O	code/build.macosx/Makefile	/^NETWORK_O = post.o$/;"	m
NOFFMAGIC	code/userprog/noff.h	8;"	d
NONE	code/machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
NO_MPROT	code/lib/sysdep.cc	44;"	d	file:
NO_MPROT	code/lib/sysdep.cc	47;"	d	file:
NULL	code/lib/utility.h	15;"	d
NetworkAddress	code/machine/network.h	/^typedef int NetworkAddress;	 $/;"	t
NetworkInput	code/machine/network.cc	/^NetworkInput::NetworkInput(CallBackObj *toCall)$/;"	f	class:NetworkInput
NetworkInput	code/machine/network.h	/^class NetworkInput : public CallBackObj{$/;"	c
NetworkOutput	code/machine/network.cc	/^NetworkOutput::NetworkOutput(double reliability, CallBackObj *toCall)$/;"	f	class:NetworkOutput
NetworkOutput	code/machine/network.h	/^class NetworkOutput : public CallBackObj {$/;"	c
NetworkRecvInt	code/machine/interrupt.h	/^			NetworkSendInt, NetworkRecvInt};$/;"	e	enum:IntType
NetworkSendInt	code/machine/interrupt.h	/^			NetworkSendInt, NetworkRecvInt};$/;"	e	enum:IntType
NetworkTest	code/threads/kernel.cc	/^Kernel::NetworkTest() {$/;"	f	class:Kernel
NetworkTime	code/machine/stats.h	/^const int NetworkTime =	 100;  	\/\/ time to send or receive one packet$/;"	v
Next	code/lib/hash.cc	/^HashIterator<Key,T>::Next() $/;"	f	class:HashIterator
Next	code/lib/list.h	/^    void Next() { current = current->next; };		$/;"	f	class:ListIterator
NextPCReg	code/machine/machine.h	70;"	d
NoException	code/machine/machine.h	/^enum ExceptionType { NoException,           \/\/ Everything ok!$/;"	e	enum:ExceptionType
NoffHeader	code/userprog/noff.h	/^} NoffHeader;$/;"	t	typeref:struct:noffHeader
NumClear	code/lib/bitmap.cc	/^Bitmap::NumClear() const$/;"	f	class:Bitmap
NumDirEntries	code/filesys/filesys.cc	65;"	d	file:
NumDirect	code/filesys/filehdr.h	20;"	d
NumExceptionTypes	code/machine/machine.h	/^		     NumExceptionTypes$/;"	e	enum:ExceptionType
NumGPRegs	code/machine/machine.h	66;"	d
NumInList	code/lib/list.h	/^    unsigned int NumInList() { return numInList;};$/;"	f	class:List
NumPhysPages	code/machine/machine.h	/^const int NumPhysPages = 128;$/;"	v
NumSectors	code/machine/disk.h	/^const int NumSectors = (SectorsPerTrack * NumTracks);$/;"	v
NumTotalRegs	code/machine/machine.h	76;"	d
NumTracks	code/machine/disk.h	/^const int NumTracks = 32;		\/\/ number of tracks per disk$/;"	v
OFILES	code/build.cygwin/Makefile	/^OFILES = $(C_OFILES) $(S_OFILES)$/;"	m
OFILES	code/build.linux/Makefile	/^OFILES = $(C_OFILES) $(S_OFILES)$/;"	m
OFILES	code/build.macosx/Makefile	/^OFILES = $(C_OFILES) $(S_OFILES)$/;"	m
OPENFILE_H	code/filesys/openfile.h	21;"	d
OP_ADD	code/machine/mipssim.h	25;"	d
OP_ADDI	code/machine/mipssim.h	26;"	d
OP_ADDIU	code/machine/mipssim.h	27;"	d
OP_ADDU	code/machine/mipssim.h	28;"	d
OP_AND	code/machine/mipssim.h	29;"	d
OP_ANDI	code/machine/mipssim.h	30;"	d
OP_BEQ	code/machine/mipssim.h	31;"	d
OP_BGEZ	code/machine/mipssim.h	32;"	d
OP_BGEZAL	code/machine/mipssim.h	33;"	d
OP_BGTZ	code/machine/mipssim.h	34;"	d
OP_BLEZ	code/machine/mipssim.h	35;"	d
OP_BLTZ	code/machine/mipssim.h	36;"	d
OP_BLTZAL	code/machine/mipssim.h	37;"	d
OP_BNE	code/machine/mipssim.h	38;"	d
OP_DIV	code/machine/mipssim.h	40;"	d
OP_DIVU	code/machine/mipssim.h	41;"	d
OP_J	code/machine/mipssim.h	42;"	d
OP_JAL	code/machine/mipssim.h	43;"	d
OP_JALR	code/machine/mipssim.h	44;"	d
OP_JR	code/machine/mipssim.h	45;"	d
OP_LB	code/machine/mipssim.h	46;"	d
OP_LBU	code/machine/mipssim.h	47;"	d
OP_LH	code/machine/mipssim.h	48;"	d
OP_LHU	code/machine/mipssim.h	49;"	d
OP_LUI	code/machine/mipssim.h	50;"	d
OP_LW	code/machine/mipssim.h	51;"	d
OP_LWL	code/machine/mipssim.h	52;"	d
OP_LWR	code/machine/mipssim.h	53;"	d
OP_MFHI	code/machine/mipssim.h	55;"	d
OP_MFLO	code/machine/mipssim.h	56;"	d
OP_MTHI	code/machine/mipssim.h	58;"	d
OP_MTLO	code/machine/mipssim.h	59;"	d
OP_MULT	code/machine/mipssim.h	60;"	d
OP_MULTU	code/machine/mipssim.h	61;"	d
OP_NOR	code/machine/mipssim.h	62;"	d
OP_OR	code/machine/mipssim.h	63;"	d
OP_ORI	code/machine/mipssim.h	64;"	d
OP_RES	code/machine/mipssim.h	87;"	d
OP_RFE	code/machine/mipssim.h	65;"	d
OP_SB	code/machine/mipssim.h	66;"	d
OP_SH	code/machine/mipssim.h	67;"	d
OP_SLL	code/machine/mipssim.h	68;"	d
OP_SLLV	code/machine/mipssim.h	69;"	d
OP_SLT	code/machine/mipssim.h	70;"	d
OP_SLTI	code/machine/mipssim.h	71;"	d
OP_SLTIU	code/machine/mipssim.h	72;"	d
OP_SLTU	code/machine/mipssim.h	73;"	d
OP_SRA	code/machine/mipssim.h	74;"	d
OP_SRAV	code/machine/mipssim.h	75;"	d
OP_SRL	code/machine/mipssim.h	76;"	d
OP_SRLV	code/machine/mipssim.h	77;"	d
OP_SUB	code/machine/mipssim.h	78;"	d
OP_SUBU	code/machine/mipssim.h	79;"	d
OP_SW	code/machine/mipssim.h	80;"	d
OP_SWL	code/machine/mipssim.h	81;"	d
OP_SWR	code/machine/mipssim.h	82;"	d
OP_SYSCALL	code/machine/mipssim.h	85;"	d
OP_UNIMP	code/machine/mipssim.h	86;"	d
OP_XOR	code/machine/mipssim.h	83;"	d
OP_XORI	code/machine/mipssim.h	84;"	d
OSF_OR_AIX	code/lib/sysdep.cc	76;"	d	file:
OSF_OR_AIX	code/lib/sysdep.cc	79;"	d	file:
OneInstruction	code/machine/mipssim.cc	/^Machine::OneInstruction(Instruction *instr)$/;"	f	class:Machine
OneTick	code/machine/interrupt.cc	/^Interrupt::OneTick()$/;"	f	class:Interrupt
OpInfo	code/machine/mipssim.h	/^struct OpInfo {$/;"	s
OpString	code/machine/mipssim.h	/^struct OpString {$/;"	s
Open	code/filesys/filesys.cc	/^FileSystem::Open(char *name)$/;"	f	class:FileSystem
Open	code/filesys/filesys.h	/^    OpenFile* Open(char *name) {$/;"	f	class:FileSystem
Open	code/test/start.S	/^Open:$/;"	l
OpenFile	code/filesys/openfile.cc	/^OpenFile::OpenFile(int sector)$/;"	f	class:OpenFile
OpenFile	code/filesys/openfile.h	/^    OpenFile(int f) { file = f; currentOffset = 0; }	\/\/ open the file$/;"	f	class:OpenFile
OpenFile	code/filesys/openfile.h	/^class OpenFile {$/;"	c
OpenFileId	code/userprog/syscall.h	/^typedef int OpenFileId;	$/;"	t
OpenForReadWrite	code/lib/sysdep.cc	/^OpenForReadWrite(char *name, bool crashOnError)$/;"	f
OpenForWrite	code/lib/sysdep.cc	/^OpenForWrite(char *name)$/;"	f
OpenSocket	code/lib/sysdep.cc	/^OpenSocket()$/;"	f
OverflowException	code/machine/machine.h	/^		     OverflowException,     \/\/ Integer overflow in add or sub.$/;"	e	enum:ExceptionType
P	code/threads/synch.cc	/^Semaphore::P()$/;"	f	class:Semaphore
P1	code/threads/switch.h	162;"	d
P2	code/threads/switch.h	163;"	d
P3	code/threads/switch.h	164;"	d
P4	code/threads/switch.h	165;"	d
PBITMAP_H	code/filesys/pbitmap.h	14;"	d
PC	code/threads/switch.h	115;"	d
PC	code/threads/switch.h	243;"	d
PC	code/threads/switch.h	39;"	d
PC	code/threads/switch.h	79;"	d
PCReg	code/machine/machine.h	69;"	d
PCState	code/threads/switch.h	123;"	d
PCState	code/threads/switch.h	145;"	d
PCState	code/threads/switch.h	214;"	d
PCState	code/threads/switch.h	259;"	d
PCState	code/threads/switch.h	56;"	d
PCState	code/threads/switch.h	87;"	d
PLabelToAddr	code/threads/thread.cc	/^PLabelToAddr(void *plabel)$/;"	f	file:
POST_H	code/network/post.h	28;"	d
PROGRAM	code/build.cygwin/Makefile	/^PROGRAM = nachos$/;"	m
PROGRAM	code/build.linux/Makefile	/^PROGRAM = nachos$/;"	m
PROGRAM	code/build.macosx/Makefile	/^PROGRAM = nachos$/;"	m
PROGRAMS	code/test/Makefile	/^PROGRAMS = add halt consoleIO_test1 consoleIO_test2 fileIO_test1 fileIO_test2$/;"	m
PROGRAMS	code/test/Makefile	/^PROGRAMS = unknownhost$/;"	m
PacketHeader	code/machine/network.h	/^class PacketHeader {$/;"	c
PageFaultException	code/machine/machine.h	/^		     PageFaultException,    \/\/ No valid translation found$/;"	e	enum:ExceptionType
PageSize	code/machine/machine.h	/^const int PageSize = 128; 		\/\/ set the page size equal to$/;"	v
PendingCompare	code/machine/interrupt.cc	/^PendingCompare (PendingInterrupt *x, PendingInterrupt *y)$/;"	f	file:
PendingInterrupt	code/machine/interrupt.cc	/^PendingInterrupt::PendingInterrupt(CallBackObj *callOnInt, $/;"	f	class:PendingInterrupt
PendingInterrupt	code/machine/interrupt.h	/^class PendingInterrupt {$/;"	c
PersistentBitmap	code/filesys/pbitmap.cc	/^PersistentBitmap::PersistentBitmap(OpenFile *file, int numItems):Bitmap(numItems) $/;"	f	class:PersistentBitmap
PersistentBitmap	code/filesys/pbitmap.cc	/^PersistentBitmap::PersistentBitmap(int numItems):Bitmap(numItems) $/;"	f	class:PersistentBitmap
PersistentBitmap	code/filesys/pbitmap.h	/^class PersistentBitmap : public Bitmap {$/;"	c
PollFile	code/lib/sysdep.cc	/^PollFile(int fd)$/;"	f
PollSocket	code/lib/sysdep.cc	/^PollSocket(int sockID)$/;"	f
PostOfficeInput	code/network/post.cc	/^PostOfficeInput::PostOfficeInput(int nBoxes)$/;"	f	class:PostOfficeInput
PostOfficeInput	code/network/post.h	/^class PostOfficeInput : public CallBackObj {$/;"	c
PostOfficeOutput	code/network/post.cc	/^PostOfficeOutput::PostOfficeOutput(double reliability)$/;"	f	class:PostOfficeOutput
PostOfficeOutput	code/network/post.h	/^class PostOfficeOutput : public CallBackObj {$/;"	c
PostalDelivery	code/network/post.cc	/^PostOfficeInput::PostalDelivery(void* data)$/;"	f	class:PostOfficeInput
Prepend	code/lib/list.cc	/^List<T>::Prepend(T item)$/;"	f	class:List
Prepend	code/lib/list.h	/^    void Prepend(T item) { Insert(item); }  \/\/ *pre*pending has no meaning $/;"	f	class:SortedList
PrevPCReg	code/machine/machine.h	71;"	d
Print	code/filesys/directory.cc	/^Directory::Print()$/;"	f	class:Directory
Print	code/filesys/filehdr.cc	/^FileHeader::Print()$/;"	f	class:FileHeader
Print	code/filesys/filesys.cc	/^FileSystem::Print()$/;"	f	class:FileSystem
Print	code/lib/bitmap.cc	/^Bitmap::Print() const$/;"	f	class:Bitmap
Print	code/machine/stats.cc	/^Statistics::Print()$/;"	f	class:Statistics
Print	code/threads/main.cc	/^Print(char *name)$/;"	f
Print	code/threads/scheduler.cc	/^Scheduler::Print()$/;"	f	class:Scheduler
Print	code/threads/thread.h	/^    void Print() { cout << name; }$/;"	f	class:Thread
PrintHeader	code/network/post.cc	/^PrintHeader(PacketHeader pktHdr, MailHeader mailHdr)$/;"	f	file:
PrintInt	code/machine/interrupt.cc	/^Interrupt::PrintInt(int num){$/;"	f	class:Interrupt
PrintInt	code/test/start.S	/^PrintInt:$/;"	l
PrintPending	code/machine/interrupt.cc	/^PrintPending (PendingInterrupt *pending)$/;"	f	file:
PrintSector	code/machine/disk.cc	/^PrintSector (bool writing, int sector, char *data)$/;"	f	file:
Put	code/network/post.cc	/^MailBox::Put(PacketHeader pktHdr, MailHeader mailHdr, char *data)$/;"	f	class:MailBox
PutChar	code/machine/console.cc	/^ConsoleOutput::PutChar(char ch)$/;"	f	class:ConsoleOutput
PutChar	code/userprog/synchconsole.cc	/^SynchConsoleOutput::PutChar(char ch)$/;"	f	class:SynchConsoleOutput
R31	code/machine/mipssim.h	97;"	d
RD	code/machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
READY	code/threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
RFMT	code/machine/mipssim.h	110;"	d
RM	code/build.cygwin/Makefile	/^RM = rm$/;"	m
RM	code/build.linux/Makefile	/^RM = \/bin\/rm$/;"	m
RM	code/build.macosx/Makefile	/^RM = \/bin\/rm$/;"	m
RS	code/machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
RT	code/machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
RUNNING	code/threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
RaiseException	code/machine/machine.cc	/^Machine::RaiseException(ExceptionType which, int badVAddr)$/;"	f	class:Machine
RandomInit	code/lib/sysdep.cc	/^RandomInit(unsigned seed)$/;"	f
RandomNumber	code/lib/sysdep.cc	/^RandomNumber()$/;"	f
ReHash	code/lib/hash.cc	/^HashTable<Key,T>::ReHash()$/;"	f	class:HashTable
Read	code/filesys/openfile.cc	/^OpenFile::Read(char *into, int numBytes)$/;"	f	class:OpenFile
Read	code/filesys/openfile.h	/^    int Read(char *into, int numBytes) {$/;"	f	class:OpenFile
Read	code/lib/sysdep.cc	/^Read(int fd, char *buffer, int nBytes)$/;"	f
Read	code/test/start.S	/^Read:$/;"	l
ReadAt	code/filesys/openfile.cc	/^OpenFile::ReadAt(char *into, int numBytes, int position)$/;"	f	class:OpenFile
ReadAt	code/filesys/openfile.h	/^    int ReadAt(char *into, int numBytes, int position) { $/;"	f	class:OpenFile
ReadFromSocket	code/lib/sysdep.cc	/^ReadFromSocket(int sockID, char *buffer, int packetSize)$/;"	f
ReadMem	code/machine/translate.cc	/^Machine::ReadMem(int addr, int size, int *value)$/;"	f	class:Machine
ReadOnlyException	code/machine/machine.h	/^		     ReadOnlyException,     \/\/ Write attempted to page marked $/;"	e	enum:ExceptionType
ReadPartial	code/lib/sysdep.cc	/^ReadPartial(int fd, char *buffer, int nBytes)$/;"	f
ReadRegister	code/machine/machine.cc	/^Machine::ReadRegister(int num)$/;"	f	class:Machine
ReadRequest	code/machine/disk.cc	/^Disk::ReadRequest(int sectorNumber, char* data)$/;"	f	class:Disk
ReadSector	code/filesys/synchdisk.cc	/^SynchDisk::ReadSector(int sectorNumber, char* data)$/;"	f	class:SynchDisk
ReadyToRun	code/threads/scheduler.cc	/^Scheduler::ReadyToRun (Thread *thread)$/;"	f	class:Scheduler
Receive	code/machine/network.cc	/^NetworkInput::Receive(char* data)$/;"	f	class:NetworkInput
Receive	code/network/post.cc	/^PostOfficeInput::Receive(int box, PacketHeader *pktHdr, $/;"	f	class:PostOfficeInput
RegType	code/machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	g
Release	code/threads/synch.cc	/^void Lock::Release()$/;"	f	class:Lock
Remove	code/filesys/directory.cc	/^Directory::Remove(char *name)$/;"	f	class:Directory
Remove	code/filesys/filesys.cc	/^FileSystem::Remove(char *name)$/;"	f	class:FileSystem
Remove	code/filesys/filesys.h	/^    bool Remove(char *name) { return Unlink(name) == 0; }$/;"	f	class:FileSystem
Remove	code/lib/hash.cc	/^HashTable<Key,T>::Remove(Key key)$/;"	f	class:HashTable
Remove	code/lib/list.cc	/^List<T>::Remove(T item)$/;"	f	class:List
Remove	code/test/start.S	/^Remove:$/;"	l
RemoveFront	code/lib/list.cc	/^List<T>::RemoveFront()$/;"	f	class:List
RemoveFront	code/threads/synchlist.cc	/^SynchList<T>::RemoveFront()$/;"	f	class:SynchList
ResizeRatio	code/lib/hash.cc	/^const int ResizeRatio = 3;	\/\/ when do we grow the hash table?$/;"	v
RestoreState	code/userprog/addrspace.cc	/^void AddrSpace::RestoreState() $/;"	f	class:AddrSpace
RestoreUserState	code/threads/thread.cc	/^Thread::RestoreUserState()$/;"	f	class:Thread
RetAddrReg	code/machine/machine.h	65;"	d
RotationTime	code/machine/stats.h	/^const int RotationTime = 500; 	\/\/ time disk takes to rotate one sector$/;"	v
Run	code/machine/mipssim.cc	/^Machine::Run()$/;"	f	class:Machine
Run	code/threads/scheduler.cc	/^Scheduler::Run (Thread *nextThread, bool finishing)$/;"	f	class:Scheduler
S0	code/threads/switch.h	235;"	d
S0	code/threads/switch.h	30;"	d
S0	code/threads/switch.h	99;"	d
S1	code/threads/switch.h	100;"	d
S1	code/threads/switch.h	236;"	d
S1	code/threads/switch.h	31;"	d
S10	code/threads/switch.h	109;"	d
S11	code/threads/switch.h	110;"	d
S12	code/threads/switch.h	111;"	d
S13	code/threads/switch.h	112;"	d
S14	code/threads/switch.h	113;"	d
S15	code/threads/switch.h	114;"	d
S2	code/threads/switch.h	101;"	d
S2	code/threads/switch.h	237;"	d
S2	code/threads/switch.h	32;"	d
S3	code/threads/switch.h	102;"	d
S3	code/threads/switch.h	238;"	d
S3	code/threads/switch.h	33;"	d
S4	code/threads/switch.h	103;"	d
S4	code/threads/switch.h	239;"	d
S4	code/threads/switch.h	34;"	d
S5	code/threads/switch.h	104;"	d
S5	code/threads/switch.h	240;"	d
S5	code/threads/switch.h	35;"	d
S6	code/threads/switch.h	105;"	d
S6	code/threads/switch.h	241;"	d
S6	code/threads/switch.h	36;"	d
S7	code/threads/switch.h	106;"	d
S7	code/threads/switch.h	37;"	d
S8	code/threads/switch.h	107;"	d
S9	code/threads/switch.h	108;"	d
SCHEDULER_H	code/threads/scheduler.h	10;"	d
SC_Add	code/userprog/syscall.h	37;"	d
SC_Close	code/userprog/syscall.h	31;"	d
SC_Create	code/userprog/syscall.h	25;"	d
SC_Exec	code/userprog/syscall.h	23;"	d
SC_ExecV	code/userprog/syscall.h	34;"	d
SC_Exit	code/userprog/syscall.h	22;"	d
SC_Halt	code/userprog/syscall.h	21;"	d
SC_Join	code/userprog/syscall.h	24;"	d
SC_MSG	code/userprog/syscall.h	38;"	d
SC_Open	code/userprog/syscall.h	27;"	d
SC_PrintInt	code/userprog/syscall.h	39;"	d
SC_Read	code/userprog/syscall.h	28;"	d
SC_Remove	code/userprog/syscall.h	26;"	d
SC_Seek	code/userprog/syscall.h	30;"	d
SC_ThreadExit	code/userprog/syscall.h	35;"	d
SC_ThreadFork	code/userprog/syscall.h	32;"	d
SC_ThreadJoin	code/userprog/syscall.h	36;"	d
SC_ThreadYield	code/userprog/syscall.h	33;"	d
SC_Write	code/userprog/syscall.h	29;"	d
SIGN_BIT	code/machine/mipssim.h	96;"	d
SIZE	code/test/sort.c	23;"	d	file:
SP	code/threads/switch.h	161;"	d
SP	code/threads/switch.h	234;"	d
SP	code/threads/switch.h	29;"	d
SP	code/threads/switch.h	98;"	d
SPECIAL	code/machine/mipssim.h	105;"	d
STACK_FENCEPOST	code/threads/thread.cc	/^const int STACK_FENCEPOST = 0xdedbeef;$/;"	v
STATS_H	code/machine/stats.h	12;"	d
SWITCH	code/threads/switch.S	/^SWITCH$/;"	l
SWITCH	code/threads/switch.S	/^SWITCH:$/;"	l
SWITCH_H	code/threads/switch.h	19;"	d
SYNCHCONSOLE_H	code/userprog/synchconsole.h	12;"	d
SYNCHDISK_H	code/filesys/synchdisk.h	12;"	d
SYNCHLIST_H	code/threads/synchlist.h	11;"	d
SYNCH_H	code/threads/synch.h	18;"	d
SYSCALLS_H	code/userprog/syscall.h	14;"	d
SYSDEP_H	code/lib/sysdep.h	12;"	d
S_OFILES	code/build.cygwin/Makefile	/^S_OFILES = switch.o$/;"	m
S_OFILES	code/build.linux/Makefile	/^S_OFILES = switch.o$/;"	m
S_OFILES	code/build.macosx/Makefile	/^S_OFILES = switch.o$/;"	m
SanityCheck	code/lib/hash.cc	/^HashTable<Key,T>::SanityCheck() const$/;"	f	class:HashTable
SanityCheck	code/lib/list.cc	/^List<T>::SanityCheck() const$/;"	f	class:List
SanityCheck	code/lib/list.cc	/^SortedList<T>::SanityCheck() const$/;"	f	class:SortedList
SaveState	code/userprog/addrspace.cc	/^void AddrSpace::SaveState() $/;"	f	class:AddrSpace
SaveUserState	code/threads/thread.cc	/^Thread::SaveUserState()$/;"	f	class:Thread
Schedule	code/machine/interrupt.cc	/^Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)$/;"	f	class:Interrupt
Scheduler	code/threads/scheduler.cc	/^Scheduler::Scheduler()$/;"	f	class:Scheduler
Scheduler	code/threads/scheduler.h	/^class Scheduler {$/;"	c
SectorSize	code/machine/disk.h	/^const int SectorSize = 128;		\/\/ number of bytes per disk sector$/;"	v
SectorsPerTrack	code/machine/disk.h	/^const int SectorsPerTrack  = 32;	\/\/ number of sectors per disk track $/;"	v
Seek	code/filesys/openfile.cc	/^OpenFile::Seek(int position)$/;"	f	class:OpenFile
Seek	code/test/start.S	/^Seek:$/;"	l
SeekTime	code/machine/stats.h	/^const int SeekTime =	 500;  	\/\/ time disk takes to seek past one track$/;"	v
Segment	code/userprog/noff.h	/^} Segment;$/;"	t	typeref:struct:segment
SelfTest	code/lib/bitmap.cc	/^Bitmap::SelfTest() $/;"	f	class:Bitmap
SelfTest	code/lib/hash.cc	/^HashTable<Key,T>::SelfTest(T *p, int numEntries)$/;"	f	class:HashTable
SelfTest	code/lib/list.cc	/^List<T>::SelfTest(T *p, int numEntries)$/;"	f	class:List
SelfTest	code/lib/list.cc	/^SortedList<T>::SelfTest(T *p, int numEntries)$/;"	f	class:SortedList
SelfTest	code/threads/synch.cc	/^Semaphore::SelfTest()$/;"	f	class:Semaphore
SelfTest	code/threads/synchlist.cc	/^SynchList<T>::SelfTest(T val)$/;"	f	class:SynchList
SelfTest	code/threads/thread.cc	/^Thread::SelfTest()$/;"	f	class:Thread
SelfTestHelper	code/threads/synch.cc	/^SelfTestHelper (Semaphore *pong) $/;"	f	file:
SelfTestHelper	code/threads/synchlist.cc	/^SynchList<T>::SelfTestHelper (void* data) $/;"	f	class:SynchList
Semaphore	code/threads/synch.cc	/^Semaphore::Semaphore(char* debugName, int initialValue)$/;"	f	class:Semaphore
Semaphore	code/threads/synch.h	/^class Semaphore {$/;"	c
Send	code/machine/network.cc	/^NetworkOutput::Send(PacketHeader hdr, char* data)$/;"	f	class:NetworkOutput
Send	code/network/post.cc	/^PostOfficeOutput::Send(PacketHeader pktHdr, MailHeader mailHdr, char* data)$/;"	f	class:PostOfficeOutput
SendToSocket	code/lib/sysdep.cc	/^SendToSocket(int sockID, char *buffer, int packetSize, char *toName)$/;"	f
SetInterrupt	code/machine/timer.cc	/^Timer::SetInterrupt() $/;"	f	class:Timer
SetLevel	code/machine/interrupt.cc	/^Interrupt::SetLevel(IntStatus now)$/;"	f	class:Interrupt
ShortToHost	code/machine/translate.cc	/^ShortToHost(unsigned short shortword) {$/;"	f
ShortToMachine	code/machine/translate.cc	/^ShortToMachine(unsigned short shortword) { return ShortToHost(shortword); }$/;"	f
Signal	code/threads/synch.cc	/^void Condition::Signal(Lock* conditionLock)$/;"	f	class:Condition
SimpleThread	code/threads/thread.cc	/^SimpleThread(int which)$/;"	f	file:
Sleep	code/threads/thread.cc	/^Thread::Sleep (bool finishing)$/;"	f	class:Thread
SortedList	code/lib/list.h	/^    SortedList(int (*comp)(T x, T y)) : List<T>() { compare = comp;};$/;"	f	class:SortedList
SortedList	code/lib/list.h	/^class SortedList : public List<T> {$/;"	c
SpaceId	code/userprog/syscall.h	/^typedef int SpaceId;	$/;"	t
StackAllocate	code/threads/thread.cc	/^Thread::StackAllocate (VoidFunctionPtr func, void *arg)$/;"	f	class:Thread
StackReg	code/machine/machine.h	64;"	d
StackSize	code/threads/thread.h	/^const int StackSize = (8 * 1024);	\/\/ in words$/;"	v
StartupLR	code/threads/switch.h	221;"	d
StartupPC	code/threads/switch.h	121;"	d
StartupPC	code/threads/switch.h	155;"	d
StartupPC	code/threads/switch.h	257;"	d
StartupPC	code/threads/switch.h	54;"	d
StartupPC	code/threads/switch.h	85;"	d
StartupPCState	code/threads/switch.h	127;"	d
StartupPCState	code/threads/switch.h	150;"	d
StartupPCState	code/threads/switch.h	213;"	d
StartupPCState	code/threads/switch.h	264;"	d
StartupPCState	code/threads/switch.h	61;"	d
StartupPCState	code/threads/switch.h	91;"	d
Statistics	code/machine/stats.cc	/^Statistics::Statistics()$/;"	f	class:Statistics
Statistics	code/machine/stats.h	/^class Statistics {$/;"	c
SwapHeader	code/userprog/addrspace.cc	/^SwapHeader (NoffHeader *noffH)$/;"	f	file:
SynchConsoleInput	code/userprog/synchconsole.cc	/^SynchConsoleInput::SynchConsoleInput(char *inputFile)$/;"	f	class:SynchConsoleInput
SynchConsoleInput	code/userprog/synchconsole.h	/^class SynchConsoleInput : public CallBackObj {$/;"	c
SynchConsoleOutput	code/userprog/synchconsole.cc	/^SynchConsoleOutput::SynchConsoleOutput(char *outputFile)$/;"	f	class:SynchConsoleOutput
SynchConsoleOutput	code/userprog/synchconsole.h	/^class SynchConsoleOutput : public CallBackObj {$/;"	c
SynchDisk	code/filesys/synchdisk.cc	/^SynchDisk::SynchDisk()$/;"	f	class:SynchDisk
SynchDisk	code/filesys/synchdisk.h	/^class SynchDisk : public CallBackObj {$/;"	c
SynchList	code/threads/synchlist.cc	/^SynchList<T>::SynchList()$/;"	f	class:SynchList
SynchList	code/threads/synchlist.h	/^class SynchList {$/;"	c
SysAdd	code/userprog/ksyscall.h	/^int SysAdd(int op1, int op2)$/;"	f
SysConsoleInput	code/userprog/syscall.h	112;"	d
SysConsoleOutput	code/userprog/syscall.h	113;"	d
SysCreate	code/userprog/ksyscall.h	/^int SysCreate(char *filename)$/;"	f
SysHalt	code/userprog/ksyscall.h	/^void SysHalt()$/;"	f
SysPrintInt	code/userprog/ksyscall.h	/^void SysPrintInt(int num)$/;"	f
SyscallException	code/machine/machine.h	/^		     SyscallException,      \/\/ A program executed a system call.$/;"	e	enum:ExceptionType
SystemMode	code/machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
SystemTick	code/machine/stats.h	/^const int SystemTick =	  10; 	\/\/ advance each time interrupts are enabled$/;"	v
THREAD_C	code/build.cygwin/Makefile	/^THREAD_C = ..\/threads\/alarm.cc\\$/;"	m
THREAD_C	code/build.linux/Makefile	/^THREAD_C = ..\/threads\/alarm.cc\\$/;"	m
THREAD_C	code/build.macosx/Makefile	/^THREAD_C = ..\/threads\/alarm.cc\\$/;"	m
THREAD_H	code/build.cygwin/Makefile	/^THREAD_H = ..\/threads\/alarm.h\\$/;"	m
THREAD_H	code/build.linux/Makefile	/^THREAD_H = ..\/threads\/alarm.h\\$/;"	m
THREAD_H	code/build.macosx/Makefile	/^THREAD_H = ..\/threads\/alarm.h\\$/;"	m
THREAD_H	code/threads/thread.h	38;"	d
THREAD_O	code/build.cygwin/Makefile	/^THREAD_O = alarm.o kernel.o main.o scheduler.o synch.o thread.o$/;"	m
THREAD_O	code/build.linux/Makefile	/^THREAD_O = alarm.o kernel.o main.o scheduler.o synch.o thread.o$/;"	m
THREAD_O	code/build.macosx/Makefile	/^THREAD_O = alarm.o kernel.o main.o scheduler.o synch.o thread.o$/;"	m
THREAD_S	code/build.cygwin/Makefile	/^THREAD_S = ..\/threads\/switch.s$/;"	m
THREAD_S	code/build.linux/Makefile	/^THREAD_S = ..\/threads\/switch.s$/;"	m
THREAD_S	code/build.macosx/Makefile	/^THREAD_S = ..\/threads\/switch.s$/;"	m
TIMER_H	code/machine/timer.h	21;"	d
TLBSize	code/machine/machine.h	/^const int TLBSize = 4;			\/\/ if there is a TLB, make it small$/;"	v
TLB_H	code/machine/translate.h	19;"	d
TOC	code/threads/switch.h	205;"	d
TRUE	code/lib/utility.h	16;"	d
Tell	code/lib/sysdep.cc	/^Tell(int fd)$/;"	f
Test	code/lib/bitmap.cc	/^Bitmap::Test(int which) const$/;"	f	class:Bitmap
Thread	code/threads/thread.cc	/^Thread::Thread(char* threadName, int threadID)$/;"	f	class:Thread
Thread	code/threads/thread.h	/^class Thread {$/;"	c
ThreadBegin	code/threads/thread.cc	/^static void ThreadBegin() { kernel->currentThread->Begin(); }$/;"	f	file:
ThreadExit	code/test/start.S	/^ThreadExit:$/;"	l
ThreadFinish	code/threads/thread.cc	/^static void ThreadFinish()    { kernel->currentThread->Finish(); }$/;"	f	file:
ThreadFork	code/test/start.S	/^ThreadFork:$/;"	l
ThreadId	code/userprog/syscall.h	/^typedef int ThreadId;$/;"	t
ThreadJoin	code/test/start.S	/^ThreadJoin:$/;"	l
ThreadPrint	code/threads/thread.cc	/^void ThreadPrint(Thread *t) { t->Print(); }$/;"	f
ThreadRoot	code/threads/switch.S	/^ThreadRoot$/;"	l
ThreadRoot	code/threads/switch.S	/^ThreadRoot:$/;"	l
ThreadSelfTest	code/threads/kernel.cc	/^Kernel::ThreadSelfTest() {$/;"	f	class:Kernel
ThreadStatus	code/threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	g
ThreadYield	code/test/start.S	/^ThreadYield:$/;"	l
TimeToSeek	code/machine/disk.cc	/^Disk::TimeToSeek(int newSector, int *rotation) $/;"	f	class:Disk
Timer	code/machine/timer.cc	/^Timer::Timer(bool doRandom, CallBackObj *toCall)$/;"	f	class:Timer
Timer	code/machine/timer.h	/^class Timer : public CallBackObj {$/;"	c
TimerInt	code/machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
TimerTicks	code/machine/stats.h	/^const int TimerTicks = 	 100;  	\/\/ (average) time between timer interrupts$/;"	v
TransferSize	code/threads/main.cc	/^static const int TransferSize = 128;$/;"	v	file:
Translate	code/machine/translate.cc	/^Machine::Translate(int virtAddr, int* physAddr, int size, bool writing)$/;"	f	class:Machine
Translate	code/userprog/addrspace.cc	/^AddrSpace::Translate(unsigned int vaddr, unsigned int *paddr, int isReadWrite)$/;"	f	class:AddrSpace
TranslationEntry	code/machine/translate.h	/^class TranslationEntry {$/;"	c
TypeToReg	code/machine/mipssim.cc	/^TypeToReg(RegType reg, Instruction *instr)$/;"	f	file:
UDelay	code/lib/sysdep.cc	/^UDelay(unsigned int useconds)$/;"	f
UNIMPLEMENTED	code/lib/debug.h	90;"	d
USERPROG_C	code/build.cygwin/Makefile	/^USERPROG_C = ..\/userprog\/addrspace.cc\\$/;"	m
USERPROG_C	code/build.linux/Makefile	/^USERPROG_C = ..\/userprog\/addrspace.cc\\$/;"	m
USERPROG_C	code/build.macosx/Makefile	/^USERPROG_C = ..\/userprog\/addrspace.cc\\$/;"	m
USERPROG_H	code/build.cygwin/Makefile	/^USERPROG_H = ..\/userprog\/addrspace.h\\$/;"	m
USERPROG_H	code/build.linux/Makefile	/^USERPROG_H = ..\/userprog\/addrspace.h\\$/;"	m
USERPROG_H	code/build.macosx/Makefile	/^USERPROG_H = ..\/userprog\/addrspace.h\\$/;"	m
USERPROG_O	code/build.cygwin/Makefile	/^USERPROG_O = addrspace.o exception.o synchconsole.o$/;"	m
USERPROG_O	code/build.linux/Makefile	/^USERPROG_O = addrspace.o exception.o synchconsole.o$/;"	m
USERPROG_O	code/build.macosx/Makefile	/^USERPROG_O = addrspace.o exception.o synchconsole.o$/;"	m
UTILITY_H	code/lib/utility.h	9;"	d
Unlink	code/lib/sysdep.cc	/^Unlink(char *name)$/;"	f
UpdateLast	code/machine/disk.cc	/^Disk::UpdateLast(int newSector)$/;"	f	class:Disk
UserMode	code/machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
UserStackSize	code/userprog/addrspace.h	19;"	d
UserTick	code/machine/stats.h	/^const int UserTick = 	   1;	\/\/ advance for each user-level instruction $/;"	v
V	code/threads/synch.cc	/^Semaphore::V()$/;"	f	class:Semaphore
VoidFunctionPtr	code/lib/utility.h	/^typedef void (*VoidFunctionPtr)(void *arg); $/;"	t
VoidNoArgFunctionPtr	code/lib/utility.h	/^typedef void (*VoidNoArgFunctionPtr)(); $/;"	t
Wait	code/threads/synch.cc	/^void Condition::Wait(Lock* conditionLock) $/;"	f	class:Condition
WhenDoneLR	code/threads/switch.h	220;"	d
WhenDonePC	code/threads/switch.h	120;"	d
WhenDonePC	code/threads/switch.h	154;"	d
WhenDonePC	code/threads/switch.h	256;"	d
WhenDonePC	code/threads/switch.h	53;"	d
WhenDonePC	code/threads/switch.h	84;"	d
WhenDonePCState	code/threads/switch.h	126;"	d
WhenDonePCState	code/threads/switch.h	149;"	d
WhenDonePCState	code/threads/switch.h	212;"	d
WhenDonePCState	code/threads/switch.h	263;"	d
WhenDonePCState	code/threads/switch.h	60;"	d
WhenDonePCState	code/threads/switch.h	90;"	d
WordToHost	code/machine/translate.cc	/^WordToHost(unsigned int word) {$/;"	f
WordToMachine	code/machine/translate.cc	/^WordToMachine(unsigned int word) { return WordToHost(word); }$/;"	f
Write	code/filesys/openfile.cc	/^OpenFile::Write(char *into, int numBytes)$/;"	f	class:OpenFile
Write	code/filesys/openfile.h	/^    int Write(char *from, int numBytes) {$/;"	f	class:OpenFile
Write	code/test/start.S	/^Write:$/;"	l
WriteAt	code/filesys/openfile.cc	/^OpenFile::WriteAt(char *from, int numBytes, int position)$/;"	f	class:OpenFile
WriteAt	code/filesys/openfile.h	/^    int WriteAt(char *from, int numBytes, int position) { $/;"	f	class:OpenFile
WriteBack	code/filesys/directory.cc	/^Directory::WriteBack(OpenFile *file)$/;"	f	class:Directory
WriteBack	code/filesys/filehdr.cc	/^FileHeader::WriteBack(int sector)$/;"	f	class:FileHeader
WriteBack	code/filesys/pbitmap.cc	/^PersistentBitmap::WriteBack(OpenFile *file)$/;"	f	class:PersistentBitmap
WriteFile	code/lib/sysdep.cc	/^WriteFile(int fd, char *buffer, int nBytes)$/;"	f
WriteMem	code/machine/translate.cc	/^Machine::WriteMem(int addr, int size, int value)$/;"	f	class:Machine
WriteRegister	code/machine/machine.cc	/^Machine::WriteRegister(int num, int value)$/;"	f	class:Machine
WriteRequest	code/machine/disk.cc	/^Disk::WriteRequest(int sectorNumber, char* data)$/;"	f	class:Disk
WriteSector	code/filesys/synchdisk.cc	/^SynchDisk::WriteSector(int sectorNumber, char* data)$/;"	f	class:SynchDisk
Yield	code/threads/thread.cc	/^Thread::Yield ()$/;"	f	class:Thread
YieldOnReturn	code/machine/interrupt.cc	/^Interrupt::YieldOnReturn()$/;"	f	class:Interrupt
ZOMBIE	code/threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
_EAX	code/threads/switch.h	135;"	d
_EBP	code/threads/switch.h	139;"	d
_EBX	code/threads/switch.h	136;"	d
_ECX	code/threads/switch.h	137;"	d
_EDI	code/threads/switch.h	141;"	d
_EDX	code/threads/switch.h	138;"	d
_ESI	code/threads/switch.h	140;"	d
_ESP	code/threads/switch.h	134;"	d
_PC	code/threads/switch.h	142;"	d
_SWITCH	code/threads/switch.S	/^_SWITCH:		$/;"	l
_SWITCH	code/threads/switch.S	/^_SWITCH:$/;"	l
_ThreadRoot	code/threads/switch.S	/^_ThreadRoot:	$/;"	l
_ThreadRoot	code/threads/switch.S	/^_ThreadRoot:$/;"	l
__USERPROG_KSYSCALL_H__	code/userprog/ksyscall.h	12;"	d
__main	code/test/start.S	/^__main:$/;"	l
__start	code/test/start.S	/^__start:$/;"	l
a0	code/threads/switch.S	/^#define a0	$16	\/* (T)		argument registers	*\/$/;"	d
a0	code/threads/switch.S	/^#define a0      $4      \/* argument registers *\/$/;"	d
a1	code/threads/switch.S	/^#define a1	$17$/;"	d
a1	code/threads/switch.S	/^#define a1      $5$/;"	d
active	code/machine/disk.h	/^    bool active;     			\/\/ Is a disk operation in progress?$/;"	m	class:Disk
ai	code/threads/switch.S	/^#define ai	$25	\/* (T)		argument information	*\/$/;"	d
alarm	code/threads/kernel.h	/^    Alarm *alarm;		\/\/ the software alarm clock    $/;"	m	class:Kernel
args	code/machine/mipssim.h	/^    RegType args[3];$/;"	m	struct:OpString
blah	code/test/segments.c	/^const int blah = 0xff;               \/* into .rdata segment                   *\/$/;"	v
boxes	code/network/post.h	/^    MailBox *boxes;		\/\/ Table of mail boxes to hold incoming mail$/;"	m	class:PostOfficeInput
bucket	code/lib/hash.h	/^    int bucket;			\/\/ current bucket we are in$/;"	m	class:HashIterator
bucketIter	code/lib/hash.h	/^    ListIterator<T> *bucketIter; \/\/ where we are in the bucket$/;"	m	class:HashIterator
buckets	code/lib/hash.h	/^    Bucket *buckets;		\/\/ the array of hash buckets$/;"	m	class:HashTable
bufferInit	code/machine/disk.h	/^    int bufferInit;			\/\/ When the track buffer started $/;"	m	class:Disk
callOnInterrupt	code/machine/interrupt.h	/^    CallBackObj *callOnInterrupt;\/\/ The object (in the hardware device$/;"	m	class:PendingInterrupt
callPeriodically	code/machine/timer.h	/^    CallBackObj *callPeriodically; \/\/ call this every TimerTicks time units $/;"	m	class:Timer
callWhenAvail	code/machine/console.h	/^    CallBackObj *callWhenAvail;		\/\/ Interrupt handler to call when $/;"	m	class:ConsoleInput
callWhenAvail	code/machine/network.h	/^    CallBackObj *callWhenAvail; \/\/ Interrupt handler, signalling packet has $/;"	m	class:NetworkInput
callWhenDone	code/machine/console.h	/^    CallBackObj *callWhenDone;		\/\/ Interrupt handler to call when $/;"	m	class:ConsoleOutput
callWhenDone	code/machine/disk.h	/^    CallBackObj *callWhenDone;		\/\/ Invoke when any disk request finishes$/;"	m	class:Disk
callWhenDone	code/machine/network.h	/^    CallBackObj *callWhenDone;  \/\/ Interrupt handler, signalling next packet $/;"	m	class:NetworkOutput
chanceToWork	code/machine/network.h	/^    double chanceToWork;	\/\/ Likelihood packet will be dropped$/;"	m	class:NetworkOutput
code	code/userprog/noff.h	/^   Segment code;		\/* executable code segment *\/ $/;"	m	struct:noffHeader
compare	code/lib/list.h	/^    int (*compare)(T x, T y);	\/\/ function for sorting list elements$/;"	m	class:SortedList
consoleIn	code/threads/kernel.h	/^    char *consoleIn;            \/\/ file to read console input from$/;"	m	class:Kernel
consoleInput	code/userprog/synchconsole.h	/^    ConsoleInput *consoleInput;	\/\/ the hardware keyboard$/;"	m	class:SynchConsoleInput
consoleOut	code/threads/kernel.h	/^    char *consoleOut;           \/\/ file to send console output to$/;"	m	class:Kernel
consoleOutput	code/userprog/synchconsole.h	/^    ConsoleOutput *consoleOutput;\/\/ the hardware display$/;"	m	class:SynchConsoleOutput
copyright	code/lib/copyright.h	/^static char *copyright = "Copyright (c) 1992-1993 The Regents of the University of California.  All rights reserved.";$/;"	v
current	code/lib/list.h	/^    ListElement<T> *current;	\/\/ where we are in the list$/;"	m	class:ListIterator
currentOffset	code/filesys/openfile.h	/^    int currentOffset;$/;"	m	class:OpenFile
currentThread	code/threads/kernel.h	/^    Thread *currentThread;	\/\/ the thread holding the CPU$/;"	m	class:Kernel
data	code/network/post.h	/^     char data[MaxMailSize];	\/\/ Payload -- message data$/;"	m	class:Mail
dataSectors	code/filesys/filehdr.h	/^    int dataSectors[NumDirect];		\/\/ Disk sector numbers for each data $/;"	m	class:FileHeader
dbgAddr	code/lib/debug.h	/^const char dbgAddr = 'a'; 		\/\/ address spaces$/;"	v
dbgAll	code/lib/debug.h	/^const char dbgAll = '+';		\/\/ turn on all debug messages$/;"	v
dbgDisk	code/lib/debug.h	/^const char dbgDisk = 'd'; 		\/\/ disk emulation$/;"	v
dbgFile	code/lib/debug.h	/^const char dbgFile = 'f'; 		\/\/ file system$/;"	v
dbgInt	code/lib/debug.h	/^const char dbgInt = 'i'; 		\/\/ interrupt emulation$/;"	v
dbgMach	code/lib/debug.h	/^const char dbgMach = 'm'; 		\/\/ machine emulation$/;"	v
dbgNet	code/lib/debug.h	/^const char dbgNet = 'n'; 		\/\/ network emulation$/;"	v
dbgSynch	code/lib/debug.h	/^const char dbgSynch = 's';		\/\/ locks, semaphores, condition vars$/;"	v
dbgSys	code/lib/debug.h	/^const char dbgSys = 'u';                \/\/ systemcall$/;"	v
dbgThread	code/lib/debug.h	/^const char dbgThread = 't';		\/\/ threads$/;"	v
debug	code/threads/main.cc	/^Debug *debug;$/;"	v
debugUserProg	code/threads/kernel.h	/^    bool debugUserProg;         \/\/ single step user program$/;"	m	class:Kernel
directoryFile	code/filesys/filesys.h	/^   OpenFile* directoryFile;		\/\/ "Root" directory -- list of $/;"	m	class:FileSystem
dirty	code/machine/translate.h	/^    bool dirty;         \/\/ This bit is set by the hardware every time the$/;"	m	class:TranslationEntry
disable	code/machine/timer.h	/^    bool disable;		\/\/ turn off the timer device after next$/;"	m	class:Timer
disk	code/filesys/synchdisk.h	/^    Disk *disk;		  		\/\/ Raw disk device$/;"	m	class:SynchDisk
diskname	code/machine/disk.h	/^    char diskname[32];			\/\/ name of simulated disk's file$/;"	m	class:Disk
divRoundDown	code/lib/utility.h	24;"	d
divRoundUp	code/lib/utility.h	25;"	d
enableFlags	code/lib/debug.h	/^    char *enableFlags;		\/\/ controls which DEBUG messages are printed$/;"	m	class:Debug
exceptionNames	code/machine/machine.cc	/^static char* exceptionNames[] = { "no exception", "syscall", $/;"	v	file:
execfile	code/threads/kernel.h	/^	char*   execfile[10];$/;"	m	class:Kernel
execfileNum	code/threads/kernel.h	/^	int execfileNum;$/;"	m	class:Kernel
extra	code/machine/mipssim.cc	/^    int extra;       \/\/ Immediate or target or shamt field or offset.$/;"	m	class:Instruction	file:
file	code/filesys/openfile.h	/^    int file;$/;"	m	class:OpenFile
fileDescriptorTable	code/filesys/filesys.h	/^	OpenFile *fileDescriptorTable[20];$/;"	m	class:FileSystem
fileSystem	code/threads/kernel.h	/^    FileSystem *fileSystem;     $/;"	m	class:Kernel
fileno	code/machine/disk.h	/^    int fileno;				\/\/ UNIX file number for simulated disk $/;"	m	class:Disk
first	code/lib/list.h	/^    ListElement<T> *first;  	\/\/ Head of the list, NULL if list is empty$/;"	m	class:List
format	code/machine/mipssim.h	/^    char *format;	\/\/ Printed version of instruction$/;"	m	struct:OpString
format	code/machine/mipssim.h	/^    int format;		\/* Format type (IFMT or JFMT or RFMT) *\/$/;"	m	struct:OpInfo
formatFlag	code/threads/kernel.h	/^    bool formatFlag;          \/\/ format the disk if this is true$/;"	m	class:Kernel
fp	code/threads/switch.S	/^#define fp      $30     \/* frame pointer *\/$/;"	d
freeMapFile	code/filesys/filesys.h	/^   OpenFile* freeMapFile;		\/\/ Bit map of free disk blocks,$/;"	m	class:FileSystem
from	code/machine/network.h	/^    NetworkAddress from;	\/\/ source machine ID$/;"	m	class:PacketHeader
from	code/network/post.h	/^    MailBoxAddress from;	\/\/ Mail box to reply to$/;"	m	class:MailHeader
getID	code/threads/thread.h	/^	int getID() { return (ID); }$/;"	f	class:Thread
getKey	code/lib/hash.h	/^    Key (*getKey)(T x);		\/\/ get Key from value$/;"	m	class:HashTable
getLevel	code/machine/interrupt.h	/^    IntStatus getLevel() {return level;}$/;"	f	class:Interrupt
getName	code/threads/synch.h	/^    char* getName() { return (name); }$/;"	f	class:Condition
getName	code/threads/synch.h	/^    char* getName() { return name; }	\/\/ debugging assist$/;"	f	class:Lock
getName	code/threads/synch.h	/^    char* getName() { return name;}			\/\/ debugging assist$/;"	f	class:Semaphore
getName	code/threads/thread.h	/^	char* getName() { return (name); }$/;"	f	class:Thread
getStatus	code/machine/interrupt.h	/^    MachineStatus getStatus() { return status; } $/;"	f	class:Interrupt
getStatus	code/threads/thread.h	/^    ThreadStatus getStatus() { return (status); }$/;"	f	class:Thread
getThread	code/threads/kernel.h	/^	Thread* getThread(int threadID){return t[threadID];}    $/;"	f	class:Kernel
gp	code/threads/switch.S	/^#define	gp	$29	\/* (T)		(local) data pointer	*\/$/;"	d
hash	code/lib/hash.h	/^    unsigned (*hash)(Key x);	\/\/ the hash function$/;"	m	class:HashTable
hashTestVector	code/lib/libtest.cc	/^static char *hashTestVector[] = { "0", "1", "2", "3", "4", "5", "6",$/;"	v	file:
hdr	code/filesys/openfile.h	/^    FileHeader *hdr;			\/\/ Header for this file $/;"	m	class:OpenFile
hostName	code/threads/kernel.h	/^    int hostName;               \/\/ machine identifier$/;"	m	class:Kernel
idleTicks	code/machine/stats.h	/^    int idleTicks;       	\/\/ Time spent idle (no threads to run)$/;"	m	class:Statistics
inFileAddr	code/userprog/noff.h	/^  int inFileAddr;		\/* location of segment in this file *\/$/;"	m	struct:segment
inHandler	code/machine/interrupt.h	/^    bool inHandler;		\/\/ TRUE if we are running an interrupt handler$/;"	m	class:Interrupt
inHdr	code/machine/network.h	/^    PacketHeader inHdr;		\/\/ Information about arrived packet$/;"	m	class:NetworkInput
inUse	code/filesys/directory.h	/^    bool inUse;				\/\/ Is this directory entry in use?$/;"	m	class:DirectoryEntry
inbox	code/machine/network.h	/^    char inbox[MaxPacketSize];  \/\/ Data for arrived packet$/;"	m	class:NetworkInput
incoming	code/machine/console.h	/^    char incoming;    			\/\/ Contains the character to be read,$/;"	m	class:ConsoleInput
initData	code/userprog/noff.h	/^   Segment initData;		\/* initialized data segment *\/$/;"	m	struct:noffHeader
initdata1	code/test/segments.c	/^unsigned int initdata1 = 0xdeadbeef; \/* initialized data put in .data segment *\/$/;"	v
initdata2	code/test/segments.c	/^int initdata2 = 0xbb;                \/* same as above                         *\/$/;"	v
intLevelNames	code/machine/interrupt.cc	/^static char *intLevelNames[] = { "off", "on"};$/;"	v	file:
intTypeNames	code/machine/interrupt.cc	/^static char *intTypeNames[] = { "timer", "disk", "console write", $/;"	v	file:
interrupt	code/threads/kernel.h	/^    Interrupt *interrupt;	\/\/ interrupt status$/;"	m	class:Kernel
item	code/lib/list.h	/^    T item; 	   	     	\/\/ item on the list$/;"	m	class:ListElement
kernel	code/threads/main.cc	/^Kernel *kernel;$/;"	v
last	code/lib/list.h	/^    ListElement<T> *last;	\/\/ Last element of list$/;"	m	class:List
lastSector	code/machine/disk.h	/^    int lastSector;			\/\/ The previous disk request $/;"	m	class:Disk
length	code/machine/network.h	/^    unsigned length;	 	\/\/ bytes of packet data, excluding the $/;"	m	class:PacketHeader
length	code/network/post.h	/^    unsigned length;		\/\/ Bytes of message data (excluding the $/;"	m	class:MailHeader
level	code/machine/interrupt.h	/^    IntStatus level;		\/\/ are interrupts enabled or disabled?$/;"	m	class:Interrupt
list	code/threads/synchlist.h	/^    List<T> *list;		\/\/ the list of things$/;"	m	class:SynchList
listEmpty	code/threads/synchlist.h	/^    Condition *listEmpty;	\/\/ wait in Remove if the list is empty$/;"	m	class:SynchList
listTestVector	code/lib/libtest.cc	/^static int listTestVector[] = { 9, 5, 7 };$/;"	v	file:
lock	code/filesys/synchdisk.h	/^    Lock *lock;		  		\/\/ Only one read\/write request$/;"	m	class:SynchDisk
lock	code/threads/synchlist.h	/^    Lock *lock;			\/\/ enforce mutual exclusive access to the list$/;"	m	class:SynchList
lock	code/userprog/synchconsole.h	/^    Lock *lock;			\/\/ only one reader at a time$/;"	m	class:SynchConsoleInput
lock	code/userprog/synchconsole.h	/^    Lock *lock;			\/\/ only one writer at a time$/;"	m	class:SynchConsoleOutput
lockHolder	code/threads/synch.h	/^    Thread *lockHolder;		\/\/ thread currently holding lock$/;"	m	class:Lock
machine	code/threads/kernel.h	/^    Machine *machine;           \/\/ the simulated CPU$/;"	m	class:Kernel
machineState	code/threads/thread.h	/^    void *machineState[MachineStateSize];  \/\/ all registers except for stackTop$/;"	m	class:Thread
mailHdr	code/network/post.h	/^     MailHeader mailHdr;	\/\/ Header appended by PostOffice$/;"	m	class:Mail
main	code/test/add.c	/^main()$/;"	f
main	code/test/consoleIO_test1.c	/^main()$/;"	f
main	code/test/consoleIO_test2.c	/^main()$/;"	f
main	code/test/fileIO_test1.c	/^int main(void)$/;"	f
main	code/test/fileIO_test2.c	/^int main(void)$/;"	f
main	code/test/halt.c	/^main()$/;"	f
main	code/test/matmult.c	/^main()$/;"	f
main	code/test/segments.c	/^main()$/;"	f
main	code/test/shell.c	/^main()$/;"	f
main	code/test/sort.c	/^main()$/;"	f
main	code/threads/main.cc	/^main(int argc, char **argv)$/;"	f
mainMemory	code/machine/machine.h	/^    char *mainMemory;		\/\/ physical memory to store user program,$/;"	m	class:Machine
map	code/lib/bitmap.h	/^    unsigned int *map;		\/\/ bit storage$/;"	m	class:Bitmap
max	code/lib/utility.h	21;"	d
messageAvailable	code/network/post.h	/^    Semaphore *messageAvailable;\/\/ V'ed when message has arrived from network$/;"	m	class:PostOfficeInput
messageSent	code/network/post.h	/^    Semaphore *messageSent;	\/\/ V'ed when next message can be sent to network$/;"	m	class:PostOfficeOutput
messages	code/network/post.h	/^    SynchList<Mail *> *messages; \/\/ A mailbox is just a list of arrived messages$/;"	m	class:MailBox
min	code/lib/utility.h	20;"	d
name	code/filesys/directory.h	/^    char name[FileNameMaxLen + 1];	\/\/ Text name for file, with +1 for $/;"	m	class:DirectoryEntry
name	code/threads/synch.h	/^    char *name;			\/\/ debugging assist$/;"	m	class:Lock
name	code/threads/synch.h	/^    char* name;        \/\/ useful for debugging$/;"	m	class:Semaphore
name	code/threads/synch.h	/^    char* name;$/;"	m	class:Condition
name	code/threads/thread.h	/^    char* name;$/;"	m	class:Thread
network	code/network/post.h	/^    NetworkInput *network;	\/\/ Physical network connection$/;"	m	class:PostOfficeInput
network	code/network/post.h	/^    NetworkOutput *network;	\/\/ Physical network connection$/;"	m	class:PostOfficeOutput
next	code/lib/list.h	/^    ListElement *next;	     	\/\/ next element on list, NULL if this is last$/;"	m	class:ListElement
noffHeader	code/userprog/noff.h	/^typedef struct noffHeader {$/;"	s
noffMagic	code/userprog/noff.h	/^   int noffMagic;		\/* should be NOFFMAGIC *\/$/;"	m	struct:noffHeader
numBits	code/lib/bitmap.h	/^    int numBits;		\/\/ number of bits in the bitmap$/;"	m	class:Bitmap
numBoxes	code/network/post.h	/^    int numBoxes;		\/\/ Number of mail boxes$/;"	m	class:PostOfficeInput
numBuckets	code/lib/hash.h	/^    int numBuckets;		\/\/ the number of buckets$/;"	m	class:HashTable
numBytes	code/filesys/filehdr.h	/^    int numBytes;			\/\/ Number of bytes in the file$/;"	m	class:FileHeader
numConsoleCharsRead	code/machine/stats.h	/^    int numConsoleCharsRead;	\/\/ number of characters read from the keyboard$/;"	m	class:Statistics
numConsoleCharsWritten	code/machine/stats.h	/^    int numConsoleCharsWritten; \/\/ number of characters written to the display$/;"	m	class:Statistics
numDiskReads	code/machine/stats.h	/^    int numDiskReads;		\/\/ number of disk read requests$/;"	m	class:Statistics
numDiskWrites	code/machine/stats.h	/^    int numDiskWrites;		\/\/ number of disk write requests$/;"	m	class:Statistics
numInList	code/lib/list.h	/^    int numInList;		\/\/ number of elements in list$/;"	m	class:List
numItems	code/lib/hash.h	/^    int numItems;		\/\/ the number of items in the table$/;"	m	class:HashTable
numPacketsRecvd	code/machine/stats.h	/^    int numPacketsRecvd;	\/\/ number of packets received over the network$/;"	m	class:Statistics
numPacketsSent	code/machine/stats.h	/^    int numPacketsSent;		\/\/ number of packets sent over the network$/;"	m	class:Statistics
numPageFaults	code/machine/stats.h	/^    int numPageFaults;		\/\/ number of virtual memory page faults$/;"	m	class:Statistics
numPages	code/userprog/addrspace.h	/^    unsigned int numPages;		\/\/ Number of pages in the virtual $/;"	m	class:AddrSpace
numSectors	code/filesys/filehdr.h	/^    int numSectors;			\/\/ Number of data sectors in the file$/;"	m	class:FileHeader
numWords	code/lib/bitmap.h	/^    int numWords;		\/\/ number of words of bitmap storage$/;"	m	class:Bitmap
opCode	code/machine/mipssim.cc	/^    char opCode;     \/\/ Type of instruction.  This is NOT the same as the$/;"	m	class:Instruction	file:
opCode	code/machine/mipssim.h	/^    int opCode;		\/* Translated op code. *\/$/;"	m	struct:OpInfo
opStrings	code/machine/mipssim.h	/^static struct OpString opStrings[] = {$/;"	v	typeref:struct:OpString
opTable	code/machine/mipssim.h	/^static OpInfo opTable[] = {$/;"	v
packetAvail	code/machine/network.h	/^    bool packetAvail;		\/\/ Packet has arrived, can be pulled off of$/;"	m	class:NetworkInput
pageTable	code/machine/machine.h	/^    TranslationEntry *pageTable;$/;"	m	class:Machine
pageTable	code/userprog/addrspace.h	/^    TranslationEntry *pageTable;	\/\/ Assume linear page table translation$/;"	m	class:AddrSpace
pageTableSize	code/machine/machine.h	/^    unsigned int pageTableSize;$/;"	m	class:Machine
pending	code/machine/interrupt.h	/^    SortedList<PendingInterrupt *> *pending;		$/;"	m	class:Interrupt
physicalPage	code/machine/translate.h	/^    int physicalPage;  	\/\/ The page number in real memory (relative to the$/;"	m	class:TranslationEntry
ping	code/threads/synch.cc	/^static Semaphore *ping;$/;"	v	file:
pktHdr	code/network/post.h	/^     PacketHeader pktHdr;	\/\/ Header appended by Network$/;"	m	class:Mail
postOfficeIn	code/threads/kernel.h	/^    PostOfficeInput *postOfficeIn;$/;"	m	class:Kernel
postOfficeOut	code/threads/kernel.h	/^    PostOfficeOutput *postOfficeOut;$/;"	m	class:Kernel
putBusy	code/machine/console.h	/^    bool putBusy;    			\/\/ Is a PutChar operation in progress?$/;"	m	class:ConsoleOutput
pv	code/threads/switch.S	/^#define pv	$27	\/* (T)		procedure value		*\/$/;"	d
queue	code/threads/synch.h	/^    List<Thread *> *queue;     $/;"	m	class:Semaphore
ra	code/threads/switch.S	/^#define ra	$26	\/* (T)		return address		*\/$/;"	d
ra	code/threads/switch.S	/^#define ra      $31     \/* return address *\/$/;"	d
randomSlice	code/threads/kernel.h	/^    bool randomSlice;		\/\/ enable pseudo-random time slicing$/;"	m	class:Kernel
randomize	code/machine/timer.h	/^    bool randomize;		\/\/ set if we need to use a random timeout delay$/;"	m	class:Timer
rd	code/machine/mipssim.cc	/^    char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction	file:
readFileNo	code/machine/console.h	/^    int readFileNo;			\/\/ UNIX file emulating the keyboard $/;"	m	class:ConsoleInput
readOnly	code/machine/translate.h	/^    bool readOnly;	\/\/ If this bit is set, the user program is not allowed$/;"	m	class:TranslationEntry
readonlyData	code/userprog/noff.h	/^   Segment readonlyData;	\/* read only data *\/$/;"	m	struct:noffHeader
readyList	code/threads/scheduler.h	/^    List<Thread *> *readyList;  \/\/ queue of threads that are ready to run,$/;"	m	class:Scheduler
registers	code/machine/machine.h	/^    int registers[NumTotalRegs]; \/\/ CPU registers, for executing user programs$/;"	m	class:Machine
reliability	code/threads/kernel.h	/^    double reliability;         \/\/ likelihood messages are dropped$/;"	m	class:Kernel
rs	code/machine/mipssim.cc	/^    char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction	file:
rt	code/machine/mipssim.cc	/^    char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction	file:
runUntilTime	code/machine/machine.h	/^    int runUntilTime;		\/\/ drop back into the debugger when simulated$/;"	m	class:Machine
s0	code/threads/switch.S	/^#define s0	$9	\/* (S)		call-safe registers	*\/$/;"	d
s0	code/threads/switch.S	/^#define s0      $16     \/* callee saved *\/$/;"	d
s1	code/threads/switch.S	/^#define s1	$10$/;"	d
s1	code/threads/switch.S	/^#define s1      $17$/;"	d
s2	code/threads/switch.S	/^#define s2	$11$/;"	d
s2	code/threads/switch.S	/^#define s2      $18$/;"	d
s3	code/threads/switch.S	/^#define s3	$12$/;"	d
s3	code/threads/switch.S	/^#define s3      $19$/;"	d
s4	code/threads/switch.S	/^#define s4	$13$/;"	d
s4	code/threads/switch.S	/^#define s4      $20$/;"	d
s5	code/threads/switch.S	/^#define s5	$14$/;"	d
s5	code/threads/switch.S	/^#define s5      $21$/;"	d
s6	code/threads/switch.S	/^#define s6	$15$/;"	d
s6	code/threads/switch.S	/^#define s6      $22$/;"	d
s7	code/threads/switch.S	/^#define s7      $23$/;"	d
scheduler	code/threads/kernel.h	/^    Scheduler *scheduler;	\/\/ the ready list$/;"	m	class:Kernel
sector	code/filesys/directory.h	/^    int sector;				\/\/ Location on disk to find the $/;"	m	class:DirectoryEntry
seekPosition	code/filesys/openfile.h	/^    int seekPosition;			\/\/ Current position within the file$/;"	m	class:OpenFile
segment	code/userprog/noff.h	/^typedef struct segment {$/;"	s
selfTestPing	code/threads/synchlist.h	/^    SynchList<T> *selfTestPing;$/;"	m	class:SynchList
semaphore	code/filesys/synchdisk.h	/^    Semaphore *semaphore; 		\/\/ To synchronize requesting thread $/;"	m	class:SynchDisk
semaphore	code/threads/synch.h	/^    Semaphore *semaphore;	\/\/ we use a semaphore to implement lock$/;"	m	class:Lock
sendBusy	code/machine/network.h	/^    bool sendBusy;		\/\/ Packet is being sent.$/;"	m	class:NetworkOutput
sendLock	code/network/post.h	/^    Lock *sendLock;		\/\/ Only one outgoing message at a time$/;"	m	class:PostOfficeOutput
setStatus	code/machine/interrupt.h	/^    void setStatus(MachineStatus st) { status = st; }$/;"	f	class:Interrupt
setStatus	code/threads/thread.h	/^    void setStatus(ThreadStatus st) { status = st; }$/;"	f	class:Thread
singleStep	code/machine/machine.h	/^    bool singleStep;		\/\/ drop back into the debugger after each$/;"	m	class:Machine
size	code/userprog/noff.h	/^  int size;			\/* size of segment *\/$/;"	m	struct:segment
sock	code/machine/network.h	/^    int sock;                   \/\/ UNIX socket number for incoming packets$/;"	m	class:NetworkInput
sock	code/machine/network.h	/^    int sock;                   \/\/ UNIX socket number for outgoing packets$/;"	m	class:NetworkOutput
sockName	code/machine/network.h	/^    char sockName[32];          \/\/ File name corresponding to UNIX socket$/;"	m	class:NetworkInput
sp	code/threads/switch.S	/^#define sp	$30	\/* (S)		stack pointer		*\/$/;"	d
sp	code/threads/switch.S	/^#define sp      $29     \/* stack pointer *\/$/;"	d
space	code/threads/thread.h	/^    AddrSpace *space;			\/\/ User code this thread is running.$/;"	m	class:Thread
specialTable	code/machine/mipssim.h	/^static int specialTable[] = {$/;"	v
stack	code/threads/thread.h	/^    int *stack; 	 	\/\/ Bottom of the stack $/;"	m	class:Thread
stackTop	code/threads/thread.h	/^    int *stackTop;			 \/\/ the current stack pointer$/;"	m	class:Thread
stats	code/threads/kernel.h	/^    Statistics *stats;		\/\/ performance metrics$/;"	m	class:Kernel
status	code/machine/interrupt.h	/^    MachineStatus status;	\/\/ idle, kernel mode, user mode$/;"	m	class:Interrupt
status	code/threads/thread.h	/^    ThreadStatus status;	\/\/ ready, running or blocked$/;"	m	class:Thread
synchConsoleIn	code/threads/kernel.h	/^    SynchConsoleInput *synchConsoleIn;$/;"	m	class:Kernel
synchConsoleOut	code/threads/kernel.h	/^    SynchConsoleOutput *synchConsoleOut;$/;"	m	class:Kernel
synchDisk	code/threads/kernel.h	/^    SynchDisk *synchDisk;$/;"	m	class:Kernel
systemTicks	code/machine/stats.h	/^    int systemTicks;	 	\/\/ Time spent executing system code$/;"	m	class:Statistics
t	code/threads/kernel.h	/^	Thread* t[10];$/;"	m	class:Kernel
t0	code/threads/switch.S	/^#define t0	$1	\/* (T)		temporary registers	*\/$/;"	d
table	code/filesys/directory.h	/^    DirectoryEntry *table;		\/\/ Table of pairs: $/;"	m	class:Directory
table	code/lib/hash.h	/^    HashTable<Key,T> *table;	\/\/ the hash table we're stepping through$/;"	m	class:HashIterator
tableSize	code/filesys/directory.h	/^    int tableSize;			\/\/ Number of directory entries$/;"	m	class:Directory
threadNum	code/threads/kernel.h	/^	int threadNum;$/;"	m	class:Kernel
timer	code/threads/alarm.h	/^    Timer *timer;		\/\/ the hardware timer device$/;"	m	class:Alarm
tlb	code/machine/machine.h	/^    TranslationEntry *tlb;		\/\/ this pointer should be considered $/;"	m	class:Machine
to	code/machine/network.h	/^    NetworkAddress to;		\/\/ Destination machine ID$/;"	m	class:PacketHeader
to	code/network/post.h	/^    MailBoxAddress to;		\/\/ Destination mail box$/;"	m	class:MailHeader
toBeDestroyed	code/threads/scheduler.h	/^    Thread *toBeDestroyed;	\/\/ finishing thread to be destroyed$/;"	m	class:Scheduler
totalTicks	code/machine/stats.h	/^    int totalTicks;      	\/\/ Total time running Nachos$/;"	m	class:Statistics
type	code/machine/interrupt.h	/^    IntType type;		\/\/ for debugging$/;"	m	class:PendingInterrupt
uninitData	code/userprog/noff.h	/^   Segment uninitData;		\/* uninitialized data segment --$/;"	m	struct:noffHeader
uninitdata	code/test/segments.c	/^int uninitdata[N];                   \/* allocate space in .bss segment        *\/$/;"	v
use	code/machine/translate.h	/^    bool use;           \/\/ This bit is set by the hardware every time the$/;"	m	class:TranslationEntry
userRegisters	code/threads/thread.h	/^    int userRegisters[NumTotalRegs];	\/\/ user-level CPU register state$/;"	m	class:Thread
userTicks	code/machine/stats.h	/^    int userTicks;       	\/\/ Time spent executing user code$/;"	m	class:Statistics
v0	code/threads/switch.S	/^#define	v0	$0	\/* (T)		return value		*\/$/;"	d
valid	code/machine/translate.h	/^    bool valid;         \/\/ If this bit is set, the translation is ignored.$/;"	m	class:TranslationEntry
value	code/machine/mipssim.cc	/^    unsigned int value; \/\/ binary representation of the instruction$/;"	m	class:Instruction	file:
value	code/threads/synch.h	/^    int value;         \/\/ semaphore value, always >= 0$/;"	m	class:Semaphore
virtualAddr	code/userprog/noff.h	/^  int virtualAddr;		\/* location of segment in virt addr space *\/$/;"	m	struct:segment
virtualPage	code/machine/translate.h	/^    int virtualPage;  	\/\/ The page number in virtual memory.$/;"	m	class:TranslationEntry
waitFor	code/userprog/synchconsole.h	/^    Semaphore *waitFor;		\/\/ wait for callBack$/;"	m	class:SynchConsoleInput
waitFor	code/userprog/synchconsole.h	/^    Semaphore *waitFor;		\/\/ wait for callBack$/;"	m	class:SynchConsoleOutput
waitQueue	code/threads/synch.h	/^    List<Semaphore *> *waitQueue;	\/\/ list of waiting threads$/;"	m	class:Condition
when	code/machine/interrupt.h	/^    int when;			\/\/ When the interrupt is supposed to fire$/;"	m	class:PendingInterrupt
writeFileNo	code/machine/console.h	/^    int writeFileNo;			\/\/ UNIX file emulating the display$/;"	m	class:ConsoleOutput
yieldOnReturn	code/machine/interrupt.h	/^    bool yieldOnReturn; 	\/\/ TRUE if we are to context switch$/;"	m	class:Interrupt
z	code/threads/switch.S	/^#define z       $0      \/* zero register *\/$/;"	d
zero	code/threads/switch.S	/^#define zero	$31	\/* 		wired zero		*\/$/;"	d
~AddrSpace	code/userprog/addrspace.cc	/^AddrSpace::~AddrSpace()$/;"	f	class:AddrSpace
~Alarm	code/threads/alarm.h	/^    ~Alarm() { delete timer; }$/;"	f	class:Alarm
~Bitmap	code/lib/bitmap.cc	/^Bitmap::~Bitmap()$/;"	f	class:Bitmap
~CallBackObj	code/machine/callback.h	/^     virtual ~CallBackObj() {};$/;"	f	class:CallBackObj
~Condition	code/threads/synch.cc	/^Condition::~Condition()$/;"	f	class:Condition
~ConsoleInput	code/machine/console.cc	/^ConsoleInput::~ConsoleInput()$/;"	f	class:ConsoleInput
~ConsoleOutput	code/machine/console.cc	/^ConsoleOutput::~ConsoleOutput()$/;"	f	class:ConsoleOutput
~Directory	code/filesys/directory.cc	/^Directory::~Directory()$/;"	f	class:Directory
~Disk	code/machine/disk.cc	/^Disk::~Disk()$/;"	f	class:Disk
~HashIterator	code/lib/hash.h	/^    ~HashIterator() { if (bucketIter != NULL) delete bucketIter;}; $/;"	f	class:HashIterator
~HashTable	code/lib/hash.cc	/^HashTable<Key,T>::~HashTable()$/;"	f	class:HashTable
~Interrupt	code/machine/interrupt.cc	/^Interrupt::~Interrupt()$/;"	f	class:Interrupt
~Kernel	code/threads/kernel.cc	/^Kernel::~Kernel()$/;"	f	class:Kernel
~List	code/lib/list.cc	/^List<T>::~List()$/;"	f	class:List
~Lock	code/threads/synch.cc	/^Lock::~Lock()$/;"	f	class:Lock
~Machine	code/machine/machine.cc	/^Machine::~Machine()$/;"	f	class:Machine
~MailBox	code/network/post.cc	/^MailBox::~MailBox()$/;"	f	class:MailBox
~NetworkInput	code/machine/network.cc	/^NetworkInput::~NetworkInput()$/;"	f	class:NetworkInput
~NetworkOutput	code/machine/network.cc	/^NetworkOutput::~NetworkOutput()$/;"	f	class:NetworkOutput
~OpenFile	code/filesys/openfile.cc	/^OpenFile::~OpenFile()$/;"	f	class:OpenFile
~OpenFile	code/filesys/openfile.h	/^    ~OpenFile() { Close(file); }			\/\/ close the file$/;"	f	class:OpenFile
~PersistentBitmap	code/filesys/pbitmap.cc	/^PersistentBitmap::~PersistentBitmap()$/;"	f	class:PersistentBitmap
~PostOfficeInput	code/network/post.cc	/^PostOfficeInput::~PostOfficeInput()$/;"	f	class:PostOfficeInput
~PostOfficeOutput	code/network/post.cc	/^PostOfficeOutput::~PostOfficeOutput()$/;"	f	class:PostOfficeOutput
~Scheduler	code/threads/scheduler.cc	/^Scheduler::~Scheduler()$/;"	f	class:Scheduler
~Semaphore	code/threads/synch.cc	/^Semaphore::~Semaphore()$/;"	f	class:Semaphore
~SortedList	code/lib/list.h	/^    ~SortedList() {};		\/\/ base class destructor called automatically$/;"	f	class:SortedList
~SynchConsoleInput	code/userprog/synchconsole.cc	/^SynchConsoleInput::~SynchConsoleInput()$/;"	f	class:SynchConsoleInput
~SynchConsoleOutput	code/userprog/synchconsole.cc	/^SynchConsoleOutput::~SynchConsoleOutput()$/;"	f	class:SynchConsoleOutput
~SynchDisk	code/filesys/synchdisk.cc	/^SynchDisk::~SynchDisk()$/;"	f	class:SynchDisk
~SynchList	code/threads/synchlist.cc	/^SynchList<T>::~SynchList()$/;"	f	class:SynchList
~Thread	code/threads/thread.cc	/^Thread::~Thread()$/;"	f	class:Thread
~Timer	code/machine/timer.h	/^    virtual ~Timer() {}$/;"	f	class:Timer
