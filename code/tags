!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	test/matmult.c	/^int A[Dim][Dim];$/;"	v
A	test/sort.c	/^int A[SIZE];	\/* size of physical memory; with code, we'll run out of space!*\/$/;"	v
ADDRSPACE_H	userprog/addrspace.h	14;"	d
ALARM_H	threads/alarm.h	18;"	d
ARRAY_NIS_TYPE	astyle/src/astyle.h	/^	ARRAY_NIS_TYPE = 64,		\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
ARRAY_TYPE	astyle/src/astyle.h	/^	ARRAY_TYPE = 512,$/;"	e	enum:astyle::BracketType
AS	build.cygwin/Makefile	/^AS = as$/;"	m
AS	build.linux/Makefile	/^AS = as$/;"	m
AS	build.macosx/Makefile	/^AS = as$/;"	m
AS	test/Makefile	/^AS = $(GCCDIR)as$/;"	m
ASBase	astyle/src/astyle.h	/^		ASBase() : baseFileType(C_TYPE) { }$/;"	f	class:astyle::ASBase
ASBase	astyle/src/astyle.h	/^class ASBase$/;"	c	namespace:astyle
ASBeautifier	astyle/src/ASBeautifier.cpp	/^ASBeautifier::ASBeautifier()$/;"	f	class:astyle::ASBeautifier
ASBeautifier	astyle/src/ASBeautifier.cpp	/^ASBeautifier::ASBeautifier(const ASBeautifier &other) : ASBase(other)$/;"	f	class:astyle::ASBeautifier
ASBeautifier	astyle/src/astyle.h	/^class ASBeautifier : protected ASResource, protected ASBase$/;"	c	namespace:astyle
ASConsole	astyle/src/astyle_main.h	/^		ASConsole(ASFormatter &formatterArg) : formatter(formatterArg) {$/;"	f	class:astyle::ASConsole
ASConsole	astyle/src/astyle_main.h	/^class ASConsole$/;"	c	namespace:astyle
ASEnhancer	astyle/src/ASEnhancer.cpp	/^ASEnhancer::ASEnhancer()$/;"	f	class:astyle::ASEnhancer
ASEnhancer	astyle/src/astyle.h	/^class ASEnhancer : protected ASBase$/;"	c	namespace:astyle
ASFormatter	astyle/src/ASFormatter.cpp	/^ASFormatter::ASFormatter()$/;"	f	class:astyle::ASFormatter
ASFormatter	astyle/src/astyle.h	/^class ASFormatter : public ASBeautifier$/;"	c	namespace:astyle
ASLOCALIZER_H	astyle/src/ASLocalizer.h	28;"	d
ASLibrary	astyle/src/astyle_main.h	/^		ASLibrary() {}$/;"	f	class:astyle::ASLibrary
ASLibrary	astyle/src/astyle_main.h	/^class ASLibrary$/;"	c	namespace:astyle
ASLocalizer	astyle/src/ASLocalizer.cpp	/^ASLocalizer::ASLocalizer()$/;"	f	class:astyle::ASLocalizer
ASLocalizer	astyle/src/ASLocalizer.h	/^class ASLocalizer$/;"	c	namespace:astyle
ASOptions	astyle/src/astyle_main.h	/^		ASOptions(ASFormatter &formatterArg) : formatter(formatterArg) {}$/;"	f	class:astyle::ASOptions
ASOptions	astyle/src/astyle_main.h	/^class ASOptions$/;"	c	namespace:astyle
ASResource	astyle/src/astyle.h	/^		ASResource() {}$/;"	f	class:astyle::ASResource
ASResource	astyle/src/astyle.h	/^class ASResource$/;"	c	namespace:astyle
ASSERT	lib/debug.h	65;"	d
ASSERTNOTREACHED	lib/debug.h	81;"	d
ASSourceIterator	astyle/src/astyle.h	/^		ASSourceIterator() {}$/;"	f	class:astyle::ASSourceIterator
ASSourceIterator	astyle/src/astyle.h	/^class ASSourceIterator$/;"	c	namespace:astyle
ASStreamIterator	astyle/src/astyle_main.cpp	/^ASStreamIterator<T>::ASStreamIterator(T* in)$/;"	f	class:astyle::ASStreamIterator
ASStreamIterator	astyle/src/astyle_main.h	/^class ASStreamIterator : public ASSourceIterator$/;"	c	namespace:astyle
ASTYLE_H	astyle/src/astyle.h	28;"	d
ASTYLE_LIB	astyle/src/astyle_main.h	57;"	d
ASTYLE_MAIN_H	astyle/src/astyle_main.h	28;"	d
AS_ADD	astyle/src/ASResource.cpp	/^const string ASResource::AS_ADD = string("add");$/;"	m	class:astyle::ASResource	file:
AS_ADD	astyle/src/astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource
AS_AND	astyle/src/ASResource.cpp	/^const string ASResource::AS_AND = string("&&");$/;"	m	class:astyle::ASResource	file:
AS_AND	astyle/src/astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource
AS_AND_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_AND_ASSIGN = string("&=");$/;"	m	class:astyle::ASResource	file:
AS_AND_ASSIGN	astyle/src/astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource
AS_ARROW	astyle/src/ASResource.cpp	/^const string ASResource::AS_ARROW = string("->");$/;"	m	class:astyle::ASResource	file:
AS_ARROW	astyle/src/astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource
AS_ASM	astyle/src/ASResource.cpp	/^const string ASResource::AS_ASM = string("asm");$/;"	m	class:astyle::ASResource	file:
AS_ASM	astyle/src/astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource
AS_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_ASSIGN = string("=");$/;"	m	class:astyle::ASResource	file:
AS_ASSIGN	astyle/src/astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource
AS_AUTORELEASEPOOL	astyle/src/ASResource.cpp	/^const string ASResource::AS_AUTORELEASEPOOL = string("autoreleasepool");$/;"	m	class:astyle::ASResource	file:
AS_AUTORELEASEPOOL	astyle/src/astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource
AS_BAR_DEFINE	astyle/src/ASResource.cpp	/^const string ASResource::AS_BAR_DEFINE = string("#define");$/;"	m	class:astyle::ASResource	file:
AS_BAR_DEFINE	astyle/src/astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource
AS_BAR_EL	astyle/src/ASResource.cpp	/^const string ASResource::AS_BAR_EL = string("#el");$/;"	m	class:astyle::ASResource	file:
AS_BAR_EL	astyle/src/astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource
AS_BAR_ENDIF	astyle/src/ASResource.cpp	/^const string ASResource::AS_BAR_ENDIF = string("#endif");$/;"	m	class:astyle::ASResource	file:
AS_BAR_ENDIF	astyle/src/astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource
AS_BAR_IF	astyle/src/ASResource.cpp	/^const string ASResource::AS_BAR_IF = string("#if");$/;"	m	class:astyle::ASResource	file:
AS_BAR_IF	astyle/src/astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource
AS_BAR_INCLUDE	astyle/src/ASResource.cpp	/^const string ASResource::AS_BAR_INCLUDE = string("#include");$/;"	m	class:astyle::ASResource	file:
AS_BAR_INCLUDE	astyle/src/astyle.h	/^		static const string AS_BAR_DEFINE, AS_BAR_INCLUDE, AS_BAR_IF, AS_BAR_EL, AS_BAR_ENDIF;$/;"	m	class:astyle::ASResource
AS_BIT_AND	astyle/src/ASResource.cpp	/^const string ASResource::AS_BIT_AND = string("&");$/;"	m	class:astyle::ASResource	file:
AS_BIT_AND	astyle/src/astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource
AS_BIT_NOT	astyle/src/ASResource.cpp	/^const string ASResource::AS_BIT_NOT = string("~");$/;"	m	class:astyle::ASResource	file:
AS_BIT_NOT	astyle/src/astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource
AS_BIT_OR	astyle/src/ASResource.cpp	/^const string ASResource::AS_BIT_OR = string("|");$/;"	m	class:astyle::ASResource	file:
AS_BIT_OR	astyle/src/astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource
AS_BIT_XOR	astyle/src/ASResource.cpp	/^const string ASResource::AS_BIT_XOR = string("^");$/;"	m	class:astyle::ASResource	file:
AS_BIT_XOR	astyle/src/astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource
AS_CASE	astyle/src/ASResource.cpp	/^const string ASResource::AS_CASE = string("case");$/;"	m	class:astyle::ASResource	file:
AS_CASE	astyle/src/astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource
AS_CATCH	astyle/src/ASResource.cpp	/^const string ASResource::AS_CATCH = string("catch");$/;"	m	class:astyle::ASResource	file:
AS_CATCH	astyle/src/astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource
AS_CERR	astyle/src/ASResource.cpp	/^const string ASResource::AS_CERR = string("cerr");$/;"	m	class:astyle::ASResource	file:
AS_CERR	astyle/src/astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource
AS_CIN	astyle/src/ASResource.cpp	/^const string ASResource::AS_CIN = string("cin");$/;"	m	class:astyle::ASResource	file:
AS_CIN	astyle/src/astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource
AS_CLASS	astyle/src/ASResource.cpp	/^const string ASResource::AS_CLASS = string("class");$/;"	m	class:astyle::ASResource	file:
AS_CLASS	astyle/src/astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource
AS_CLOSE_BRACKET	astyle/src/ASResource.cpp	/^const string ASResource::AS_CLOSE_BRACKET = string("}");$/;"	m	class:astyle::ASResource	file:
AS_CLOSE_BRACKET	astyle/src/astyle.h	/^		static const string AS_OPEN_BRACKET, AS_CLOSE_BRACKET;$/;"	m	class:astyle::ASResource
AS_CLOSE_COMMENT	astyle/src/ASResource.cpp	/^const string ASResource::AS_CLOSE_COMMENT = string("*\/");$/;"	m	class:astyle::ASResource	file:
AS_CLOSE_COMMENT	astyle/src/astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource
AS_COLON	astyle/src/ASResource.cpp	/^const string ASResource::AS_COLON = string(":");$/;"	m	class:astyle::ASResource	file:
AS_COLON	astyle/src/astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource
AS_COMMA	astyle/src/ASResource.cpp	/^const string ASResource::AS_COMMA = string(",");$/;"	m	class:astyle::ASResource	file:
AS_COMMA	astyle/src/astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource
AS_CONST	astyle/src/ASResource.cpp	/^const string ASResource::AS_CONST = string("const");$/;"	m	class:astyle::ASResource	file:
AS_CONST	astyle/src/astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource
AS_CONST_CAST	astyle/src/ASResource.cpp	/^const string ASResource::AS_CONST_CAST = string("const_cast");$/;"	m	class:astyle::ASResource	file:
AS_CONST_CAST	astyle/src/astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource
AS_COUT	astyle/src/ASResource.cpp	/^const string ASResource::AS_COUT = string("cout");$/;"	m	class:astyle::ASResource	file:
AS_COUT	astyle/src/astyle.h	/^		static const string AS_CIN, AS_COUT, AS_CERR;$/;"	m	class:astyle::ASResource
AS_DEFAULT	astyle/src/ASResource.cpp	/^const string ASResource::AS_DEFAULT = string("default");$/;"	m	class:astyle::ASResource	file:
AS_DEFAULT	astyle/src/astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource
AS_DELEGATE	astyle/src/ASResource.cpp	/^const string ASResource::AS_DELEGATE = string("delegate");$/;"	m	class:astyle::ASResource	file:
AS_DELEGATE	astyle/src/astyle.h	/^		static const string AS_DELEGATE, AS_UNCHECKED;$/;"	m	class:astyle::ASResource
AS_DIV	astyle/src/ASResource.cpp	/^const string ASResource::AS_DIV = string("\/");$/;"	m	class:astyle::ASResource	file:
AS_DIV	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_DIV_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_DIV_ASSIGN = string("\/=");$/;"	m	class:astyle::ASResource	file:
AS_DIV_ASSIGN	astyle/src/astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource
AS_DO	astyle/src/ASResource.cpp	/^const string ASResource::AS_DO = string("do");$/;"	m	class:astyle::ASResource	file:
AS_DO	astyle/src/astyle.h	/^		static const string AS_DO, AS_WHILE;$/;"	m	class:astyle::ASResource
AS_DYNAMIC_CAST	astyle/src/ASResource.cpp	/^const string ASResource::AS_DYNAMIC_CAST = string("dynamic_cast");$/;"	m	class:astyle::ASResource	file:
AS_DYNAMIC_CAST	astyle/src/astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource
AS_ELSE	astyle/src/ASResource.cpp	/^const string ASResource::AS_ELSE = string("else");$/;"	m	class:astyle::ASResource	file:
AS_ELSE	astyle/src/astyle.h	/^		static const string AS_IF, AS_ELSE;$/;"	m	class:astyle::ASResource
AS_END	astyle/src/ASResource.cpp	/^const string ASResource::AS_END = string("end");$/;"	m	class:astyle::ASResource	file:
AS_END	astyle/src/astyle.h	/^		static const string AS_END;$/;"	m	class:astyle::ASResource
AS_ENUM	astyle/src/ASResource.cpp	/^const string ASResource::AS_ENUM = string("enum");$/;"	m	class:astyle::ASResource	file:
AS_ENUM	astyle/src/astyle.h	/^		static const string AS_EXTERN, AS_ENUM;$/;"	m	class:astyle::ASResource
AS_EQUAL	astyle/src/ASResource.cpp	/^const string ASResource::AS_EQUAL = string("==");$/;"	m	class:astyle::ASResource	file:
AS_EQUAL	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_EXTERN	astyle/src/ASResource.cpp	/^const string ASResource::AS_EXTERN = string("extern");$/;"	m	class:astyle::ASResource	file:
AS_EXTERN	astyle/src/astyle.h	/^		static const string AS_EXTERN, AS_ENUM;$/;"	m	class:astyle::ASResource
AS_FINALLY	astyle/src/ASResource.cpp	/^const string ASResource::AS_FINALLY = string("finally");$/;"	m	class:astyle::ASResource	file:
AS_FINALLY	astyle/src/astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource
AS_FIXED	astyle/src/ASResource.cpp	/^const string ASResource::AS_FIXED = string("fixed");$/;"	m	class:astyle::ASResource	file:
AS_FIXED	astyle/src/astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource
AS_FOR	astyle/src/ASResource.cpp	/^const string ASResource::AS_FOR = string("for");$/;"	m	class:astyle::ASResource	file:
AS_FOR	astyle/src/astyle.h	/^		static const string AS_FOR;$/;"	m	class:astyle::ASResource
AS_FOREACH	astyle/src/ASResource.cpp	/^const string ASResource::AS_FOREACH = string("foreach");$/;"	m	class:astyle::ASResource	file:
AS_FOREACH	astyle/src/astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource
AS_FOREVER	astyle/src/ASResource.cpp	/^const string ASResource::AS_FOREVER = string("forever");$/;"	m	class:astyle::ASResource	file:
AS_FOREVER	astyle/src/astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource
AS_GCC_MAX_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_GCC_MAX_ASSIGN = string(">?");$/;"	m	class:astyle::ASResource	file:
AS_GCC_MAX_ASSIGN	astyle/src/astyle.h	/^		static const string AS_GCC_MIN_ASSIGN, AS_GCC_MAX_ASSIGN;$/;"	m	class:astyle::ASResource
AS_GCC_MIN_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_GCC_MIN_ASSIGN = string("<?");$/;"	m	class:astyle::ASResource	file:
AS_GCC_MIN_ASSIGN	astyle/src/astyle.h	/^		static const string AS_GCC_MIN_ASSIGN, AS_GCC_MAX_ASSIGN;$/;"	m	class:astyle::ASResource
AS_GET	astyle/src/ASResource.cpp	/^const string ASResource::AS_GET = string("get");$/;"	m	class:astyle::ASResource	file:
AS_GET	astyle/src/astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource
AS_GR	astyle/src/ASResource.cpp	/^const string ASResource::AS_GR = string(">");$/;"	m	class:astyle::ASResource	file:
AS_GR	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_GR_EQUAL	astyle/src/ASResource.cpp	/^const string ASResource::AS_GR_EQUAL = string(">=");$/;"	m	class:astyle::ASResource	file:
AS_GR_EQUAL	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_GR_GR	astyle/src/ASResource.cpp	/^const string ASResource::AS_GR_GR = string(">>");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_GR_GR_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_GR_GR_ASSIGN = string(">>=");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_ASSIGN	astyle/src/astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource
AS_GR_GR_GR	astyle/src/ASResource.cpp	/^const string ASResource::AS_GR_GR_GR = string(">>>");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_GR	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_GR_GR_GR_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_GR_GR_GR_ASSIGN = string(">>>=");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_GR_ASSIGN	astyle/src/astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource
AS_IF	astyle/src/ASResource.cpp	/^const string ASResource::AS_IF = string("if");$/;"	m	class:astyle::ASResource	file:
AS_IF	astyle/src/astyle.h	/^		static const string AS_IF, AS_ELSE;$/;"	m	class:astyle::ASResource
AS_INTERFACE	astyle/src/ASResource.cpp	/^const string ASResource::AS_INTERFACE = string("interface");$/;"	m	class:astyle::ASResource	file:
AS_INTERFACE	astyle/src/astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource
AS_INTERRUPT	astyle/src/ASResource.cpp	/^const string ASResource::AS_INTERRUPT = string("interrupt");$/;"	m	class:astyle::ASResource	file:
AS_INTERRUPT	astyle/src/astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource
AS_LAMBDA	astyle/src/ASResource.cpp	/^const string ASResource::AS_LAMBDA = string("=>");            \/\/ C# lambda expression arrow$/;"	m	class:astyle::ASResource	file:
AS_LAMBDA	astyle/src/astyle.h	/^		static const string AS_QUESTION_QUESTION, AS_LAMBDA;$/;"	m	class:astyle::ASResource
AS_LET	astyle/src/ASResource.cpp	/^const string ASResource::AS_LET = string("let");$/;"	m	class:astyle::ASResource	file:
AS_LET	astyle/src/astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource
AS_LOCK	astyle/src/ASResource.cpp	/^const string ASResource::AS_LOCK = string("lock");$/;"	m	class:astyle::ASResource	file:
AS_LOCK	astyle/src/astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource
AS_LS	astyle/src/ASResource.cpp	/^const string ASResource::AS_LS = string("<");$/;"	m	class:astyle::ASResource	file:
AS_LS	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_LS_EQUAL	astyle/src/ASResource.cpp	/^const string ASResource::AS_LS_EQUAL = string("<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_EQUAL	astyle/src/astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource
AS_LS_LS	astyle/src/ASResource.cpp	/^const string ASResource::AS_LS_LS = string("<<");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS	astyle/src/astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource
AS_LS_LS_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_LS_LS_ASSIGN = string("<<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_ASSIGN	astyle/src/astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource
AS_LS_LS_LS	astyle/src/ASResource.cpp	/^const string ASResource::AS_LS_LS_LS = string("<<<");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_LS	astyle/src/astyle.h	/^		static const string AS_LS_EQUAL, AS_LS_LS_LS, AS_LS_LS;$/;"	m	class:astyle::ASResource
AS_LS_LS_LS_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_LS_LS_LS_ASSIGN = string("<<<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_LS_ASSIGN	astyle/src/astyle.h	/^		static const string AS_GR_GR_ASSIGN, AS_LS_LS_ASSIGN, AS_GR_GR_GR_ASSIGN, AS_LS_LS_LS_ASSIGN;$/;"	m	class:astyle::ASResource
AS_MINUS	astyle/src/ASResource.cpp	/^const string ASResource::AS_MINUS = string("-");$/;"	m	class:astyle::ASResource	file:
AS_MINUS	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_MINUS_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_MINUS_ASSIGN = string("-=");$/;"	m	class:astyle::ASResource	file:
AS_MINUS_ASSIGN	astyle/src/astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource
AS_MINUS_MINUS	astyle/src/ASResource.cpp	/^const string ASResource::AS_MINUS_MINUS = string("--");$/;"	m	class:astyle::ASResource	file:
AS_MINUS_MINUS	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_MOD	astyle/src/ASResource.cpp	/^const string ASResource::AS_MOD = string("%");$/;"	m	class:astyle::ASResource	file:
AS_MOD	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_MOD_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_MOD_ASSIGN = string("%=");$/;"	m	class:astyle::ASResource	file:
AS_MOD_ASSIGN	astyle/src/astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource
AS_MS_ASM	astyle/src/ASResource.cpp	/^const string ASResource::AS_MS_ASM = string("_asm");$/;"	m	class:astyle::ASResource	file:
AS_MS_ASM	astyle/src/astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource
AS_MS__ASM	astyle/src/ASResource.cpp	/^const string ASResource::AS_MS__ASM = string("__asm");$/;"	m	class:astyle::ASResource	file:
AS_MS__ASM	astyle/src/astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource
AS_MULT	astyle/src/ASResource.cpp	/^const string ASResource::AS_MULT = string("*");$/;"	m	class:astyle::ASResource	file:
AS_MULT	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_MULT_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_MULT_ASSIGN = string("*=");$/;"	m	class:astyle::ASResource	file:
AS_MULT_ASSIGN	astyle/src/astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource
AS_NAMESPACE	astyle/src/ASResource.cpp	/^const string ASResource::AS_NAMESPACE = string("namespace");$/;"	m	class:astyle::ASResource	file:
AS_NAMESPACE	astyle/src/astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource
AS_NEW	astyle/src/ASResource.cpp	/^const string ASResource::AS_NEW = string("new");$/;"	m	class:astyle::ASResource	file:
AS_NEW	astyle/src/astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource
AS_NOEXCEPT	astyle/src/ASResource.cpp	/^const string ASResource::AS_NOEXCEPT = string("noexcept");$/;"	m	class:astyle::ASResource	file:
AS_NOEXCEPT	astyle/src/astyle.h	/^		static const string AS_NOEXCEPT, AS_INTERRUPT, AS_AUTORELEASEPOOL;$/;"	m	class:astyle::ASResource
AS_NOT	astyle/src/ASResource.cpp	/^const string ASResource::AS_NOT = string("!");$/;"	m	class:astyle::ASResource	file:
AS_NOT	astyle/src/astyle.h	/^		static const string AS_NOT, AS_BIT_XOR, AS_BIT_OR, AS_BIT_AND, AS_BIT_NOT;$/;"	m	class:astyle::ASResource
AS_NOT_EQUAL	astyle/src/ASResource.cpp	/^const string ASResource::AS_NOT_EQUAL = string("!=");$/;"	m	class:astyle::ASResource	file:
AS_NOT_EQUAL	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_NS_DURING	astyle/src/ASResource.cpp	/^const string ASResource::AS_NS_DURING = string("NS_DURING");$/;"	m	class:astyle::ASResource	file:
AS_NS_DURING	astyle/src/astyle.h	/^		static const string AS_NS_DURING, AS_NS_HANDLER;$/;"	m	class:astyle::ASResource
AS_NS_HANDLER	astyle/src/ASResource.cpp	/^const string ASResource::AS_NS_HANDLER = string("NS_HANDLER");$/;"	m	class:astyle::ASResource	file:
AS_NS_HANDLER	astyle/src/astyle.h	/^		static const string AS_NS_DURING, AS_NS_HANDLER;$/;"	m	class:astyle::ASResource
AS_OPEN_BRACKET	astyle/src/ASResource.cpp	/^const string ASResource::AS_OPEN_BRACKET = string("{");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_BRACKET	astyle/src/astyle.h	/^		static const string AS_OPEN_BRACKET, AS_CLOSE_BRACKET;$/;"	m	class:astyle::ASResource
AS_OPEN_COMMENT	astyle/src/ASResource.cpp	/^const string ASResource::AS_OPEN_COMMENT = string("\/*");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_COMMENT	astyle/src/astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource
AS_OPEN_LINE_COMMENT	astyle/src/ASResource.cpp	/^const string ASResource::AS_OPEN_LINE_COMMENT = string("\/\/");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_LINE_COMMENT	astyle/src/astyle.h	/^		static const string AS_OPEN_LINE_COMMENT, AS_OPEN_COMMENT, AS_CLOSE_COMMENT;$/;"	m	class:astyle::ASResource
AS_OPERATOR	astyle/src/ASResource.cpp	/^const string ASResource::AS_OPERATOR = string("operator");$/;"	m	class:astyle::ASResource	file:
AS_OPERATOR	astyle/src/astyle.h	/^		static const string AS_OPERATOR, AS_TEMPLATE;$/;"	m	class:astyle::ASResource
AS_OR	astyle/src/ASResource.cpp	/^const string ASResource::AS_OR = string("||");$/;"	m	class:astyle::ASResource	file:
AS_OR	astyle/src/astyle.h	/^		static const string AS_ARROW, AS_AND, AS_OR;$/;"	m	class:astyle::ASResource
AS_OR_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_OR_ASSIGN = string("|=");$/;"	m	class:astyle::ASResource	file:
AS_OR_ASSIGN	astyle/src/astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource
AS_OVERRIDE	astyle/src/ASResource.cpp	/^const string ASResource::AS_OVERRIDE = string("override");$/;"	m	class:astyle::ASResource	file:
AS_OVERRIDE	astyle/src/astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource
AS_PLUS	astyle/src/ASResource.cpp	/^const string ASResource::AS_PLUS = string("+");$/;"	m	class:astyle::ASResource	file:
AS_PLUS	astyle/src/astyle.h	/^		static const string AS_PLUS, AS_MINUS, AS_MULT, AS_DIV, AS_MOD, AS_GR, AS_LS;$/;"	m	class:astyle::ASResource
AS_PLUS_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_PLUS_ASSIGN = string("+=");$/;"	m	class:astyle::ASResource	file:
AS_PLUS_ASSIGN	astyle/src/astyle.h	/^		static const string AS_ASSIGN, AS_PLUS_ASSIGN, AS_MINUS_ASSIGN, AS_MULT_ASSIGN;$/;"	m	class:astyle::ASResource
AS_PLUS_PLUS	astyle/src/ASResource.cpp	/^const string ASResource::AS_PLUS_PLUS = string("++");$/;"	m	class:astyle::ASResource	file:
AS_PLUS_PLUS	astyle/src/astyle.h	/^		static const string AS_EQUAL, AS_PLUS_PLUS, AS_MINUS_MINUS, AS_NOT_EQUAL, AS_GR_EQUAL, AS_GR_GR_GR, AS_GR_GR;$/;"	m	class:astyle::ASResource
AS_PRIVATE	astyle/src/ASResource.cpp	/^const string ASResource::AS_PRIVATE = string("private");$/;"	m	class:astyle::ASResource	file:
AS_PRIVATE	astyle/src/astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource
AS_PROTECTED	astyle/src/ASResource.cpp	/^const string ASResource::AS_PROTECTED = string("protected");$/;"	m	class:astyle::ASResource	file:
AS_PROTECTED	astyle/src/astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource
AS_PUBLIC	astyle/src/ASResource.cpp	/^const string ASResource::AS_PUBLIC = string("public");$/;"	m	class:astyle::ASResource	file:
AS_PUBLIC	astyle/src/astyle.h	/^		static const string AS_PUBLIC, AS_PROTECTED, AS_PRIVATE;$/;"	m	class:astyle::ASResource
AS_QFOREACH	astyle/src/ASResource.cpp	/^const string ASResource::AS_QFOREACH = string("Q_FOREACH");$/;"	m	class:astyle::ASResource	file:
AS_QFOREACH	astyle/src/astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource
AS_QFOREVER	astyle/src/ASResource.cpp	/^const string ASResource::AS_QFOREVER = string("Q_FOREVER");$/;"	m	class:astyle::ASResource	file:
AS_QFOREVER	astyle/src/astyle.h	/^		static const string AS_QFOREACH, AS_QFOREVER, AS_FOREVER;$/;"	m	class:astyle::ASResource
AS_QUESTION	astyle/src/ASResource.cpp	/^const string ASResource::AS_QUESTION = string("?");$/;"	m	class:astyle::ASResource	file:
AS_QUESTION	astyle/src/astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource
AS_QUESTION_QUESTION	astyle/src/ASResource.cpp	/^const string ASResource::AS_QUESTION_QUESTION = string("??");$/;"	m	class:astyle::ASResource	file:
AS_QUESTION_QUESTION	astyle/src/astyle.h	/^		static const string AS_QUESTION_QUESTION, AS_LAMBDA;$/;"	m	class:astyle::ASResource
AS_REINTERPRET_CAST	astyle/src/ASResource.cpp	/^const string ASResource::AS_REINTERPRET_CAST = string("reinterpret_cast");$/;"	m	class:astyle::ASResource	file:
AS_REINTERPRET_CAST	astyle/src/astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource
AS_REMOVE	astyle/src/ASResource.cpp	/^const string ASResource::AS_REMOVE = string("remove");$/;"	m	class:astyle::ASResource	file:
AS_REMOVE	astyle/src/astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource
AS_RETURN	astyle/src/ASResource.cpp	/^const string ASResource::AS_RETURN = string("return");$/;"	m	class:astyle::ASResource	file:
AS_RETURN	astyle/src/astyle.h	/^		static const string AS_RETURN;$/;"	m	class:astyle::ASResource
AS_SCOPE_RESOLUTION	astyle/src/ASResource.cpp	/^const string ASResource::AS_SCOPE_RESOLUTION = string("::");$/;"	m	class:astyle::ASResource	file:
AS_SCOPE_RESOLUTION	astyle/src/astyle.h	/^		static const string AS_SCOPE_RESOLUTION;$/;"	m	class:astyle::ASResource
AS_SEALED	astyle/src/ASResource.cpp	/^const string ASResource::AS_SEALED = string("sealed");$/;"	m	class:astyle::ASResource	file:
AS_SEALED	astyle/src/astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource
AS_SELECTOR	astyle/src/ASResource.cpp	/^const string ASResource::AS_SELECTOR = string("selector");$/;"	m	class:astyle::ASResource	file:
AS_SELECTOR	astyle/src/astyle.h	/^		static const string AS_SELECTOR;$/;"	m	class:astyle::ASResource
AS_SEMICOLON	astyle/src/ASResource.cpp	/^const string ASResource::AS_SEMICOLON = string(";");$/;"	m	class:astyle::ASResource	file:
AS_SEMICOLON	astyle/src/astyle.h	/^		static const string AS_QUESTION, AS_COLON, AS_SEMICOLON, AS_COMMA;$/;"	m	class:astyle::ASResource
AS_SET	astyle/src/ASResource.cpp	/^const string ASResource::AS_SET = string("set");$/;"	m	class:astyle::ASResource	file:
AS_SET	astyle/src/astyle.h	/^		static const string AS_GET, AS_SET, AS_ADD, AS_REMOVE;$/;"	m	class:astyle::ASResource
AS_STATIC	astyle/src/ASResource.cpp	/^const string ASResource::AS_STATIC = string("static");$/;"	m	class:astyle::ASResource	file:
AS_STATIC	astyle/src/astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource
AS_STATIC_CAST	astyle/src/ASResource.cpp	/^const string ASResource::AS_STATIC_CAST = string("static_cast");$/;"	m	class:astyle::ASResource	file:
AS_STATIC_CAST	astyle/src/astyle.h	/^		static const string AS_CONST_CAST, AS_DYNAMIC_CAST, AS_REINTERPRET_CAST, AS_STATIC_CAST;$/;"	m	class:astyle::ASResource
AS_STRUCT	astyle/src/ASResource.cpp	/^const string ASResource::AS_STRUCT = string("struct");$/;"	m	class:astyle::ASResource	file:
AS_STRUCT	astyle/src/astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource
AS_SWITCH	astyle/src/ASResource.cpp	/^const string ASResource::AS_SWITCH = string("switch");$/;"	m	class:astyle::ASResource	file:
AS_SWITCH	astyle/src/astyle.h	/^		static const string AS_SWITCH, AS_CASE, AS_DEFAULT;$/;"	m	class:astyle::ASResource
AS_SYNCHRONIZED	astyle/src/ASResource.cpp	/^const string ASResource::AS_SYNCHRONIZED = string("synchronized");$/;"	m	class:astyle::ASResource	file:
AS_SYNCHRONIZED	astyle/src/astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource
AS_TEMPLATE	astyle/src/ASResource.cpp	/^const string ASResource::AS_TEMPLATE = string("template");$/;"	m	class:astyle::ASResource	file:
AS_TEMPLATE	astyle/src/astyle.h	/^		static const string AS_OPERATOR, AS_TEMPLATE;$/;"	m	class:astyle::ASResource
AS_THROW	astyle/src/ASResource.cpp	/^const string ASResource::AS_THROW = string("throw");$/;"	m	class:astyle::ASResource	file:
AS_THROW	astyle/src/astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource
AS_THROWS	astyle/src/ASResource.cpp	/^const string ASResource::AS_THROWS = string("throws");$/;"	m	class:astyle::ASResource	file:
AS_THROWS	astyle/src/astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource
AS_TRY	astyle/src/ASResource.cpp	/^const string ASResource::AS_TRY = string("try");$/;"	m	class:astyle::ASResource	file:
AS_TRY	astyle/src/astyle.h	/^		static const string AS_TRY, AS_CATCH, AS_THROW, AS_THROWS, AS_FINALLY;$/;"	m	class:astyle::ASResource
AS_UNCHECKED	astyle/src/ASResource.cpp	/^const string ASResource::AS_UNCHECKED = string("unchecked");$/;"	m	class:astyle::ASResource	file:
AS_UNCHECKED	astyle/src/astyle.h	/^		static const string AS_DELEGATE, AS_UNCHECKED;$/;"	m	class:astyle::ASResource
AS_UNION	astyle/src/ASResource.cpp	/^const string ASResource::AS_UNION = string("union");$/;"	m	class:astyle::ASResource	file:
AS_UNION	astyle/src/astyle.h	/^		static const string AS_CLASS, AS_STRUCT, AS_UNION, AS_INTERFACE, AS_NAMESPACE;$/;"	m	class:astyle::ASResource
AS_UNSAFE	astyle/src/ASResource.cpp	/^const string ASResource::AS_UNSAFE = string("unsafe");$/;"	m	class:astyle::ASResource	file:
AS_UNSAFE	astyle/src/astyle.h	/^		static const string AS_FOREACH, AS_LOCK, AS_UNSAFE, AS_FIXED;$/;"	m	class:astyle::ASResource
AS_VOLATILE	astyle/src/ASResource.cpp	/^const string ASResource::AS_VOLATILE = string("volatile");$/;"	m	class:astyle::ASResource	file:
AS_VOLATILE	astyle/src/astyle.h	/^		static const string AS_STATIC, AS_CONST, AS_SEALED, AS_OVERRIDE, AS_VOLATILE, AS_NEW;$/;"	m	class:astyle::ASResource
AS_WHERE	astyle/src/ASResource.cpp	/^const string ASResource::AS_WHERE = string("where");$/;"	m	class:astyle::ASResource	file:
AS_WHERE	astyle/src/astyle.h	/^		static const string AS_WHERE, AS_LET, AS_SYNCHRONIZED;$/;"	m	class:astyle::ASResource
AS_WHILE	astyle/src/ASResource.cpp	/^const string ASResource::AS_WHILE = string("while");$/;"	m	class:astyle::ASResource	file:
AS_WHILE	astyle/src/astyle.h	/^		static const string AS_DO, AS_WHILE;$/;"	m	class:astyle::ASResource
AS_XOR_ASSIGN	astyle/src/ASResource.cpp	/^const string ASResource::AS_XOR_ASSIGN = string("^=");$/;"	m	class:astyle::ASResource	file:
AS_XOR_ASSIGN	astyle/src/astyle.h	/^		static const string AS_DIV_ASSIGN, AS_MOD_ASSIGN, AS_XOR_ASSIGN, AS_OR_ASSIGN, AS_AND_ASSIGN;$/;"	m	class:astyle::ASResource
AS__ASM__	astyle/src/ASResource.cpp	/^const string ASResource::AS__ASM__ = string("__asm__");$/;"	m	class:astyle::ASResource	file:
AS__ASM__	astyle/src/astyle.h	/^		static const string AS_ASM, AS__ASM__, AS_MS_ASM, AS_MS__ASM;$/;"	m	class:astyle::ASResource
AStyleGetVersion	astyle/src/astyle_main.cpp	/^extern "C" EXPORT const char* STDCALL AStyleGetVersion(void)$/;"	f
AStyleMain	astyle/src/astyle_main.cpp	/^extern "C" EXPORT char* STDCALL AStyleMain(const char* pSourceIn,		\/\/ the source to be formatted$/;"	f
AStyleMainUtf16	astyle/src/astyle_main.cpp	/^extern "C" EXPORT utf16_t* STDCALL AStyleMainUtf16(const utf16_t* pSourceIn,	\/\/ the source to be formatted$/;"	f
ATTACH_MODE	astyle/src/astyle.h	/^	ATTACH_MODE,$/;"	e	enum:astyle::BracketMode
Abort	lib/sysdep.cc	/^Abort()$/;"	f
Acquire	threads/synch.cc	/^void Lock::Acquire()$/;"	f	class:Lock
Add	filesys/directory.cc	/^Directory::Add(char *name, int newSector, bool directoryFlag)$/;"	f	class:Directory
Add	test/start.S	/^Add:$/;"	l
AddrSpace	userprog/addrspace.cc	/^AddrSpace::AddrSpace()$/;"	f	class:AddrSpace
AddrSpace	userprog/addrspace.h	/^class AddrSpace$/;"	c
AddressErrorException	machine/machine.h	/^                     AddressErrorException, \/\/ Unaligned reference or one that$/;"	e	enum:ExceptionType
Alarm	threads/alarm.cc	/^Alarm::Alarm(bool doRandom)$/;"	f	class:Alarm
Alarm	threads/alarm.h	/^class Alarm : public CallBackObj$/;"	c
AllocBoundedArray	lib/sysdep.cc	/^AllocBoundedArray(int size)$/;"	f
Allocate	filesys/filehdr.cc	/^FileHeader::Allocate(PersistentBitmap *freeMap, int fileSize)$/;"	f	class:FileHeader
Append	lib/list.cc	/^List<T>::Append(T item)$/;"	f	class:List
Append	lib/list.h	/^    void Append(T item)$/;"	f	class:SortedList
Append	threads/synchlist.cc	/^SynchList<T>::Append(T item)$/;"	f	class:SynchList
Apply	lib/hash.cc	/^HashTable<Key,T>::Apply(void (*func)(T)) const$/;"	f	class:HashTable
Apply	lib/list.cc	/^List<T>::Apply(void (*func)(T)) const$/;"	f	class:List
Apply	threads/synchlist.cc	/^SynchList<T>::Apply(void (*func)(T))$/;"	f	class:SynchList
AssignNameToSocket	lib/sysdep.cc	/^AssignNameToSocket(char *socketName, int sockID)$/;"	f
B	test/matmult.c	/^int B[Dim][Dim];$/;"	v
BCOND	machine/mipssim.h	106;"	d
BITMAP_H	lib/bitmap.h	16;"	d
BLOCKED	threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
BREAK_MODE	astyle/src/astyle.h	/^	BREAK_MODE,$/;"	e	enum:astyle::BracketMode
BadVAddrReg	machine/machine.h	74;"	d
Begin	threads/thread.cc	/^Thread::Begin ()$/;"	f	class:Thread
Bitmap	lib/bitmap.cc	/^Bitmap::Bitmap(int numItems)$/;"	f	class:Bitmap
Bitmap	lib/bitmap.h	/^class Bitmap$/;"	c
BitsInByte	lib/bitmap.h	/^const int BitsInByte =	8;$/;"	v
BitsInWord	lib/bitmap.h	/^const int BitsInWord = sizeof(unsigned int) * BitsInByte;$/;"	v
BracketMode	astyle/src/astyle.h	/^enum BracketMode$/;"	g	namespace:astyle
BracketType	astyle/src/astyle.h	/^enum BracketType$/;"	g	namespace:astyle
Broadcast	threads/synch.cc	/^void Condition::Broadcast(Lock* conditionLock)$/;"	f	class:Condition
Bucket	lib/hash.h	/^    typedef List<T> *Bucket;$/;"	t	class:HashTable
BusErrorException	machine/machine.h	/^                     BusErrorException,     \/\/ Translation resulted in an$/;"	e	enum:ExceptionType
ByteToSector	filesys/filehdr.cc	/^FileHeader::ByteToSector(int offset)$/;"	f	class:FileHeader
C	test/matmult.c	/^int C[Dim][Dim];$/;"	v
CALLBACK_H	machine/callback.h	27;"	d
CBASEFLAGS	astyle/build/clang/Makefile	/^CBASEFLAGS = -W -Wall -fno-rtti -fno-exceptions$/;"	m
CBASEFLAGS	astyle/build/gcc/Makefile	/^CBASEFLAGS = -W -Wall -fno-rtti -fno-exceptions$/;"	m
CBASEFLAGS	astyle/build/intel/Makefile	/^CBASEFLAGS = -w3 -Wall -fno-rtti -fno-exceptions$/;"	m
CC	build.cygwin/Makefile	/^CC = g++$/;"	m
CC	build.linux/Makefile	/^CC = g++$/;"	m
CC	build.macosx/Makefile	/^CC = g++$/;"	m
CC	test/Makefile	/^CC = $(GCCDIR)gcc$/;"	m
CFILES	build.cygwin/Makefile	/^CFILES = $(LIB_C) $(MACHINE_C) $(THREAD_C) $(USERPROG_C) $(FILESYS_C) $(NETWORK_C)$/;"	m
CFILES	build.linux/Makefile	/^CFILES = $(LIB_C) $(MACHINE_C) $(THREAD_C) $(USERPROG_C) $(FILESYS_C) $(NETWORK_C)$/;"	m
CFILES	build.macosx/Makefile	/^CFILES = $(LIB_C) $(MACHINE_C) $(THREAD_C) $(USERPROG_C) $(FILESYS_C) $(NETWORK_C)$/;"	m
CFLAGS	build.cygwin/Makefile	/^CFLAGS = -g -Wall -fwritable-strings $(INCPATH) $(DEFINES) $(HOSTCFLAGS) -DCHANGED$/;"	m
CFLAGS	build.linux/Makefile	/^CFLAGS = -g -Wall $(INCPATH) $(DEFINES) $(HOSTCFLAGS) -DCHANGED -m32$/;"	m
CFLAGS	build.macosx/Makefile	/^CFLAGS = -g -Wall -fwritable-strings $(INCPATH) $(DEFINES) $(HOSTCFLAGS) -DCHANGED$/;"	m
CFLAGS	test/Makefile	/^CFLAGS = -G 0 -c $(INCDIR) -B\/usr\/bin\/local\/nachos\/lib\/gcc-lib\/decstation-ultrix\/2.95.2\/ -B\/usr\/bin\/local\/nachos\/decstation-ultrix\/bin\/$/;"	m
CFLAGSa	astyle/build/clang/Makefile	/^CFLAGSa   = -DASTYLE_LIB $(CFLAGSr)$/;"	m
CFLAGSa	astyle/build/gcc/Makefile	/^CFLAGSa   = -DASTYLE_LIB $(CFLAGSr)$/;"	m
CFLAGSa	astyle/build/intel/Makefile	/^CFLAGSa   = -DASTYLE_LIB $(CFLAGSr)$/;"	m
CFLAGSad	astyle/build/clang/Makefile	/^CFLAGSad  = -DASTYLE_LIB $(CFLAGSd)$/;"	m
CFLAGSad	astyle/build/gcc/Makefile	/^CFLAGSad  = -DASTYLE_LIB $(CFLAGSd)$/;"	m
CFLAGSad	astyle/build/intel/Makefile	/^CFLAGSad  = -DASTYLE_LIB $(CFLAGSd)$/;"	m
CFLAGSd	astyle/build/clang/Makefile	/^    CFLAGSd   = -g $(CBASEFLAGS) $(CFLAGS)$/;"	m
CFLAGSd	astyle/build/clang/Makefile	/^    CFLAGSd   = -g $(CBASEFLAGS)$/;"	m
CFLAGSd	astyle/build/gcc/Makefile	/^    CFLAGSd   = -g $(CBASEFLAGS) $(CFLAGS)$/;"	m
CFLAGSd	astyle/build/gcc/Makefile	/^    CFLAGSd   = -g $(CBASEFLAGS)$/;"	m
CFLAGSd	astyle/build/intel/Makefile	/^    CFLAGSd   = -g $(CBASEFLAGS) $(CFLAGS)$/;"	m
CFLAGSd	astyle/build/intel/Makefile	/^    CFLAGSd   = -g $(CBASEFLAGS)$/;"	m
CFLAGSr	astyle/build/clang/Makefile	/^    CFLAGSr   = -DNDEBUG $(CBASEFLAGS) $(CFLAGS)$/;"	m
CFLAGSr	astyle/build/clang/Makefile	/^    CFLAGSr   = -DNDEBUG -O3 $(CBASEFLAGS)$/;"	m
CFLAGSr	astyle/build/gcc/Makefile	/^    CFLAGSr   = -DNDEBUG $(CBASEFLAGS) $(CFLAGS)$/;"	m
CFLAGSr	astyle/build/gcc/Makefile	/^    CFLAGSr   = -DNDEBUG -O3 $(CBASEFLAGS)$/;"	m
CFLAGSr	astyle/build/intel/Makefile	/^    CFLAGSr   = -DNDEBUG $(CBASEFLAGS) $(CFLAGS)$/;"	m
CFLAGSr	astyle/build/intel/Makefile	/^    CFLAGSr   = -DNDEBUG -O3 $(CBASEFLAGS)$/;"	m
CFLAGSs	astyle/build/clang/Makefile	/^CFLAGSs   = -DASTYLE_LIB -fPIC -fvisibility=hidden $(CFLAGSr)$/;"	m
CFLAGSs	astyle/build/gcc/Makefile	/^CFLAGSs   = -DASTYLE_LIB -fPIC -fvisibility=hidden $(CFLAGSr)$/;"	m
CFLAGSs	astyle/build/intel/Makefile	/^CFLAGSs   = -DASTYLE_LIB -fPIC -fvisibility=hidden $(CFLAGSr)$/;"	m
CFLAGSsd	astyle/build/clang/Makefile	/^CFLAGSsd  = -DASTYLE_LIB -fPIC -fvisibility=hidden $(CFLAGSd)$/;"	m
CFLAGSsd	astyle/build/gcc/Makefile	/^CFLAGSsd  = -DASTYLE_LIB -fPIC -fvisibility=hidden $(CFLAGSd)$/;"	m
CFLAGSsd	astyle/build/intel/Makefile	/^CFLAGSsd  = -DASTYLE_LIB -fPIC -fvisibility=hidden $(CFLAGSd)$/;"	m
CFLAGSsj	astyle/build/clang/Makefile	/^CFLAGSsj  = -DASTYLE_JNI -fPIC -fvisibility=hidden $(CFLAGSr) $(JAVAINCS)$/;"	m
CFLAGSsj	astyle/build/gcc/Makefile	/^CFLAGSsj  = -DASTYLE_JNI -fPIC -fvisibility=hidden $(CFLAGSr) $(JAVAINCS)$/;"	m
CFLAGSsj	astyle/build/intel/Makefile	/^CFLAGSsj  = -DASTYLE_JNI -fPIC -fvisibility=hidden $(CFLAGSr) $(JAVAINCS)$/;"	m
CFLAGSsjd	astyle/build/clang/Makefile	/^CFLAGSsjd = -DASTYLE_JNI -fPIC -fvisibility=hidden $(CFLAGSd) $(JAVAINCS)$/;"	m
CFLAGSsjd	astyle/build/gcc/Makefile	/^CFLAGSsjd = -DASTYLE_JNI -fPIC -fvisibility=hidden $(CFLAGSd) $(JAVAINCS)$/;"	m
CFLAGSsjd	astyle/build/intel/Makefile	/^CFLAGSsjd = -DASTYLE_JNI -fPIC -fvisibility=hidden $(CFLAGSd) $(JAVAINCS)$/;"	m
CLASS_TYPE	astyle/src/astyle.h	/^	CLASS_TYPE = 2,				\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
COLON_PAD_AFTER	astyle/src/astyle.h	/^	COLON_PAD_AFTER,$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_ALL	astyle/src/astyle.h	/^	COLON_PAD_ALL,$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_BEFORE	astyle/src/astyle.h	/^	COLON_PAD_BEFORE$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_NONE	astyle/src/astyle.h	/^	COLON_PAD_NONE,$/;"	e	enum:astyle::ObjCColonPad
COLON_PAD_NO_CHANGE	astyle/src/astyle.h	/^	COLON_PAD_NO_CHANGE,$/;"	e	enum:astyle::ObjCColonPad
COMMAND_TYPE	astyle/src/astyle.h	/^	COMMAND_TYPE = 32,$/;"	e	enum:astyle::BracketType
CONSOLE_H	machine/console.h	28;"	d
CPP	build.cygwin/Makefile	/^CPP= cpp$/;"	m
CPP	build.linux/Makefile	/^CPP=\/lib\/cpp$/;"	m
CPP	build.macosx/Makefile	/^CPP=\/lib\/cpp$/;"	m
CPP_AS_FLAGS	build.linux/Makefile	/^CPP_AS_FLAGS= -m32$/;"	m
CR	threads/switch.h	203;"	d
CXX	astyle/build/clang/Makefile	/^CXX = clang++$/;"	m
CXX	astyle/build/gcc/Makefile	/^CXX = g++$/;"	m
CXX	astyle/build/intel/Makefile	/^CXX = icpc$/;"	m
C_OFILES	build.cygwin/Makefile	/^C_OFILES = $(LIB_O) $(MACHINE_O) $(THREAD_O) $(USERPROG_O) $(FILESYS_O) $(NETWORK_O)$/;"	m
C_OFILES	build.linux/Makefile	/^C_OFILES = $(LIB_O) $(MACHINE_O) $(THREAD_O) $(USERPROG_O) $(FILESYS_O) $(NETWORK_O)$/;"	m
C_OFILES	build.macosx/Makefile	/^C_OFILES = $(LIB_O) $(MACHINE_O) $(THREAD_O) $(USERPROG_O) $(FILESYS_O) $(NETWORK_O)$/;"	m
C_TYPE	astyle/src/astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
CallBack	filesys/synchdisk.cc	/^SynchDisk::CallBack()$/;"	f	class:SynchDisk
CallBack	machine/console.cc	/^ConsoleInput::CallBack()$/;"	f	class:ConsoleInput
CallBack	machine/console.cc	/^ConsoleOutput::CallBack()$/;"	f	class:ConsoleOutput
CallBack	machine/disk.cc	/^Disk::CallBack ()$/;"	f	class:Disk
CallBack	machine/network.cc	/^NetworkInput::CallBack()$/;"	f	class:NetworkInput
CallBack	machine/network.cc	/^NetworkOutput::CallBack()$/;"	f	class:NetworkOutput
CallBack	machine/timer.cc	/^Timer::CallBack()$/;"	f	class:Timer
CallBack	network/post.cc	/^PostOfficeInput::CallBack()$/;"	f	class:PostOfficeInput
CallBack	network/post.cc	/^PostOfficeOutput::CallBack()$/;"	f	class:PostOfficeOutput
CallBack	threads/alarm.cc	/^Alarm::CallBack()$/;"	f	class:Alarm
CallBack	userprog/synchconsole.cc	/^SynchConsoleInput::CallBack()$/;"	f	class:SynchConsoleInput
CallBack	userprog/synchconsole.cc	/^SynchConsoleOutput::CallBack()$/;"	f	class:SynchConsoleOutput
CallBackObj	machine/callback.h	/^    CallBackObj() {};	\/\/ to prevent anyone from creating$/;"	f	class:CallBackObj
CallBackObj	machine/callback.h	/^class CallBackObj$/;"	c
CallOnUserAbort	lib/sysdep.cc	/^CallOnUserAbort(void (*func)(int))$/;"	f
ChangeLevel	machine/interrupt.cc	/^Interrupt::ChangeLevel(IntStatus old, IntStatus now)$/;"	f	class:Interrupt
CheckEndian	machine/machine.cc	/^void CheckEndian()$/;"	f	file:
CheckIfDue	machine/interrupt.cc	/^Interrupt::CheckIfDue(bool advanceClock)$/;"	f	class:Interrupt
CheckOverflow	threads/thread.cc	/^Thread::CheckOverflow()$/;"	f	class:Thread
CheckToBeDestroyed	threads/scheduler.cc	/^Scheduler::CheckToBeDestroyed()$/;"	f	class:Scheduler
ChineseSimplified	astyle/src/ASLocalizer.cpp	/^ChineseSimplified::ChineseSimplified()	\/\/ 中文（简体）$/;"	f	class:astyle::ChineseSimplified
ChineseSimplified	astyle/src/ASLocalizer.h	/^class ChineseSimplified : public Translation$/;"	c	namespace:astyle
ChineseTraditional	astyle/src/ASLocalizer.cpp	/^ChineseTraditional::ChineseTraditional()	\/\/ 中文（繁體）$/;"	f	class:astyle::ChineseTraditional
ChineseTraditional	astyle/src/ASLocalizer.h	/^class ChineseTraditional : public Translation$/;"	c	namespace:astyle
Cleanup	threads/main.cc	/^Cleanup(int x)$/;"	f	file:
Clear	lib/bitmap.cc	/^Bitmap::Clear(int which)$/;"	f	class:Bitmap
Close	filesys/filesys.cc	/^FileSystem::Close(OpenFileId id)$/;"	f	class:FileSystem
Close	lib/sysdep.cc	/^Close(int fd)$/;"	f
Close	test/start.S	/^Close:$/;"	l
CloseSocket	lib/sysdep.cc	/^CloseSocket(int sockID)$/;"	f
ComputeLatency	machine/disk.cc	/^Disk::ComputeLatency(int newSector, bool writing)$/;"	f	class:Disk
Condition	threads/synch.cc	/^Condition::Condition(char* debugName)$/;"	f	class:Condition
Condition	threads/synch.h	/^class Condition$/;"	c
ConsoleInput	machine/console.cc	/^ConsoleInput::ConsoleInput(char *readFile, CallBackObj *toCall)$/;"	f	class:ConsoleInput
ConsoleInput	machine/console.h	/^class ConsoleInput : public CallBackObj$/;"	c
ConsoleOutput	machine/console.cc	/^ConsoleOutput::ConsoleOutput(char *writeFile, CallBackObj *toCall)$/;"	f	class:ConsoleOutput
ConsoleOutput	machine/console.h	/^class ConsoleOutput : public CallBackObj$/;"	c
ConsoleReadInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt,$/;"	e	enum:IntType
ConsoleTest	threads/kernel.cc	/^Kernel::ConsoleTest()$/;"	f	class:Kernel
ConsoleTime	machine/stats.h	/^const int ConsoleTime =	 100;	\/\/ time to read or write one character$/;"	v
ConsoleWriteInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt,$/;"	e	enum:IntType
Copy	threads/main.cc	/^Copy(char *from, char *to)$/;"	f	file:
Create	filesys/filesys.cc	/^FileSystem::Create(char *name, int initialSize, bool directoryFlag)$/;"	f	class:FileSystem
Create	filesys/filesys.h	/^    bool Create(char *name)$/;"	f	class:FileSystem
Create	test/start.S	/^Create:$/;"	l
CreateDirectory	threads/main.cc	/^CreateDirectory(char *name)$/;"	f	file:
DEBUG	lib/debug.h	51;"	d
DEBUG_H	lib/debug.h	14;"	d
DEFINES	build.cygwin/Makefile	/^DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX$/;"	m
DEFINES	build.linux/Makefile	/^DEFINES =  -DRDATA -DSIM_FIX$/;"	m
DEFINES	build.macosx/Makefile	/^DEFINES =  -DFILESYS_STUB -DRDATA -DSIM_FIX$/;"	m
DEFINITION_TYPE	astyle/src/astyle.h	/^	DEFINITION_TYPE = 16,$/;"	e	enum:astyle::BracketType
DIRECTORY_H	filesys/directory.h	18;"	d
DISK_H	machine/disk.h	18;"	d
DeAssignNameToSocket	lib/sysdep.cc	/^DeAssignNameToSocket(char *socketName)$/;"	f
DeallocBoundedArray	lib/sysdep.cc	/^DeallocBoundedArray(char *ptr, int \/* size *\/)$/;"	f
DeallocBoundedArray	lib/sysdep.cc	/^DeallocBoundedArray(char *ptr, int size)$/;"	f
Deallocate	filesys/filehdr.cc	/^FileHeader::Deallocate(PersistentBitmap *freeMap)$/;"	f	class:FileHeader
Debug	lib/debug.cc	/^Debug::Debug(char *flagList)$/;"	f	class:Debug
Debug	lib/debug.h	/^class Debug$/;"	c
Debugger	machine/machine.cc	/^void Machine::Debugger()$/;"	f	class:Machine
Decode	machine/mipssim.cc	/^Instruction::Decode()$/;"	f	class:Instruction
Delay	lib/sysdep.cc	/^Delay(int seconds)$/;"	f
DelayedLoad	machine/mipssim.cc	/^Machine::DelayedLoad(int nextReg, int nextValue)$/;"	f	class:Machine
DeleteBuckets	lib/hash.cc	/^HashTable<Key,T>::DeleteBuckets(List<T> **table, int sz)$/;"	f	class:HashTable
Dim	test/matmult.c	12;"	d	file:
Directory	filesys/directory.cc	/^Directory::Directory(int size)$/;"	f	class:Directory
Directory	filesys/directory.h	/^class Directory$/;"	c
DirectoryEntry	filesys/directory.h	/^class DirectoryEntry$/;"	c
DirectoryFileSize	filesys/filesys.cc	66;"	d	file:
DirectorySector	filesys/filesys.cc	59;"	d	file:
Disable	machine/console.h	/^    void Disable()$/;"	f	class:ConsoleInput
Disable	machine/timer.h	/^    void Disable()$/;"	f	class:Timer
Disable	threads/alarm.h	/^    void Disable()$/;"	f	class:Alarm
Disable	userprog/synchconsole.h	/^    void Disable()$/;"	f	class:SynchConsoleInput
Disk	machine/disk.cc	/^Disk::Disk(CallBackObj *toCall)$/;"	f	class:Disk
Disk	machine/disk.h	/^class Disk : public CallBackObj$/;"	c
DiskInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt,$/;"	e	enum:IntType
DiskSize	machine/disk.cc	/^const int DiskSize = (MagicSize + (NumSectors * SectorSize));$/;"	v
DumpState	machine/interrupt.cc	/^Interrupt::DumpState()$/;"	f	class:Interrupt
DumpState	machine/machine.cc	/^Machine::DumpState()$/;"	f	class:Machine
Dutch	astyle/src/ASLocalizer.cpp	/^Dutch::Dutch()	\/\/ Nederlandse$/;"	f	class:astyle::Dutch
Dutch	astyle/src/ASLocalizer.h	/^class Dutch : public Translation$/;"	c	namespace:astyle
E2BIG	userprog/errno.h	32;"	d
EACCES	userprog/errno.h	38;"	d
EAGAIN	userprog/errno.h	36;"	d
EBADE	userprog/errno.h	77;"	d
EBADF	userprog/errno.h	34;"	d
EBADR	userprog/errno.h	78;"	d
EBADRQC	userprog/errno.h	81;"	d
EBADSLT	userprog/errno.h	82;"	d
EBUSY	userprog/errno.h	41;"	d
ECHILD	userprog/errno.h	35;"	d
ECHRNG	userprog/errno.h	69;"	d
EDEADLK	userprog/errno.h	60;"	d
EDOM	userprog/errno.h	58;"	d
EEXIST	userprog/errno.h	42;"	d
EFAULT	userprog/errno.h	39;"	d
EFBIG	userprog/errno.h	52;"	d
EIDRM	userprog/errno.h	68;"	d
EINTR	userprog/errno.h	29;"	d
EINVAL	userprog/errno.h	47;"	d
EIO	userprog/errno.h	30;"	d
EISDIR	userprog/errno.h	46;"	d
EL2HLT	userprog/errno.h	76;"	d
EL2NSYNC	userprog/errno.h	70;"	d
EL3HLT	userprog/errno.h	71;"	d
EL3RST	userprog/errno.h	72;"	d
ELNRNG	userprog/errno.h	73;"	d
ELOOP	userprog/errno.h	65;"	d
EMFILE	userprog/errno.h	49;"	d
EMLINK	userprog/errno.h	56;"	d
ENAMETOOLONG	userprog/errno.h	61;"	d
ENCODING_8BIT	astyle/src/astyle.h	/^	ENCODING_8BIT,$/;"	e	enum:astyle::FileEncoding
ENFILE	userprog/errno.h	48;"	d
ENOANO	userprog/errno.h	80;"	d
ENOCSI	userprog/errno.h	75;"	d
ENODEV	userprog/errno.h	44;"	d
ENOENT	userprog/errno.h	27;"	d
ENOEXEC	userprog/errno.h	33;"	d
ENOLCK	userprog/errno.h	62;"	d
ENOMEM	userprog/errno.h	37;"	d
ENOMSG	userprog/errno.h	67;"	d
ENOSPC	userprog/errno.h	53;"	d
ENOSYS	userprog/errno.h	63;"	d
ENOTBLK	userprog/errno.h	40;"	d
ENOTDIR	userprog/errno.h	45;"	d
ENOTEMPTY	userprog/errno.h	64;"	d
ENOTTY	userprog/errno.h	50;"	d
ENUM_TYPE	astyle/src/astyle.h	/^	ENUM_TYPE = 128,			\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
ENXIO	userprog/errno.h	31;"	d
EPERM	userprog/errno.h	26;"	d
EPIPE	userprog/errno.h	57;"	d
ERANGE	userprog/errno.h	59;"	d
EROFS	userprog/errno.h	55;"	d
ERRNO_H	userprog/errno.h	22;"	d
ESPIPE	userprog/errno.h	54;"	d
ESRCH	userprog/errno.h	28;"	d
ETXTBSY	userprog/errno.h	51;"	d
EUNATCH	userprog/errno.h	74;"	d
EWOULDBLOCK	userprog/errno.h	66;"	d
EXDEV	userprog/errno.h	43;"	d
EXFULL	userprog/errno.h	79;"	d
EXPORT	astyle/src/astyle_main.h	99;"	d
EXTERN_TYPE	astyle/src/astyle.h	/^	EXTERN_TYPE = 1024,			\/\/ extern "C", not a command type extern$/;"	e	enum:astyle::BracketType
EXTRA	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA };$/;"	e	enum:RegType
Enable	machine/interrupt.h	/^    void Enable()$/;"	f	class:Interrupt
English	astyle/src/ASLocalizer.cpp	/^English::English()$/;"	f	class:astyle::English
English	astyle/src/ASLocalizer.h	/^class English : public Translation$/;"	c	namespace:astyle
ExceptionHandler	userprog/exception.cc	/^ExceptionHandler(ExceptionType which)$/;"	f
ExceptionType	machine/machine.h	/^enum ExceptionType { NoException,           \/\/ Everything ok!$/;"	g
Exec	test/start.S	/^Exec:$/;"	l
Exec	threads/kernel.cc	/^int Kernel::Exec(char* name)$/;"	f	class:Kernel
ExecAll	threads/kernel.cc	/^void Kernel::ExecAll()$/;"	f	class:Kernel
ExecV	test/start.S	/^ExecV:$/;"	l
Execute	userprog/addrspace.cc	/^AddrSpace::Execute(char* fileName)$/;"	f	class:AddrSpace
Exit	lib/sysdep.cc	/^Exit(int exitCode)$/;"	f
Exit	test/sort.c	18;"	d	file:
Exit	test/start.S	/^Exit:$/;"	l
FALSE	lib/utility.h	17;"	d
FILEHDR_H	filesys/filehdr.h	15;"	d
FILESYS_C	build.cygwin/Makefile	/^FILESYS_C =..\/filesys\/directory.cc\\$/;"	m
FILESYS_C	build.linux/Makefile	/^FILESYS_C =..\/filesys\/directory.cc\\$/;"	m
FILESYS_C	build.macosx/Makefile	/^FILESYS_C =..\/filesys\/directory.cc\\$/;"	m
FILESYS_H	build.cygwin/Makefile	/^FILESYS_H =..\/filesys\/directory.h \\$/;"	m
FILESYS_H	build.linux/Makefile	/^FILESYS_H =..\/filesys\/directory.h \\$/;"	m
FILESYS_H	build.macosx/Makefile	/^FILESYS_H =..\/filesys\/directory.h \\$/;"	m
FILESYS_O	build.cygwin/Makefile	/^FILESYS_O =directory.o filehdr.o filesys.o pbitmap.o openfile.o synchdisk.o$/;"	m
FILESYS_O	build.linux/Makefile	/^FILESYS_O =directory.o filehdr.o filesys.o pbitmap.o openfile.o synchdisk.o$/;"	m
FILESYS_O	build.macosx/Makefile	/^FILESYS_O =directory.o filehdr.o filesys.o pbitmap.o openfile.o synchdisk.o$/;"	m
FP	threads/switch.h	38;"	d
FP	threads/switch.h	78;"	d
FP13	threads/switch.h	185;"	d
FP15	threads/switch.h	186;"	d
FP16	threads/switch.h	187;"	d
FP17	threads/switch.h	188;"	d
FP18	threads/switch.h	189;"	d
FP19	threads/switch.h	190;"	d
FP20	threads/switch.h	191;"	d
FP21	threads/switch.h	192;"	d
FP22	threads/switch.h	193;"	d
FP23	threads/switch.h	194;"	d
FP24	threads/switch.h	195;"	d
FP25	threads/switch.h	196;"	d
FP26	threads/switch.h	197;"	d
FP27	threads/switch.h	198;"	d
FP28	threads/switch.h	199;"	d
FP29	threads/switch.h	200;"	d
FP30	threads/switch.h	201;"	d
FP31	threads/switch.h	202;"	d
FPState	threads/switch.h	146;"	d
FPState	threads/switch.h	260;"	d
FPState	threads/switch.h	57;"	d
FS_H	filesys/filesys.h	34;"	d
FetchFrom	filesys/directory.cc	/^Directory::FetchFrom(OpenFile *file)$/;"	f	class:Directory
FetchFrom	filesys/filehdr.cc	/^FileHeader::FetchFrom(int sector)$/;"	f	class:FileHeader
FetchFrom	filesys/pbitmap.cc	/^PersistentBitmap::FetchFrom(OpenFile *file)$/;"	f	class:PersistentBitmap
FileEncoding	astyle/src/astyle.h	/^enum FileEncoding$/;"	g	namespace:astyle
FileHeader	filesys/filehdr.cc	/^FileHeader::FileHeader()$/;"	f	class:FileHeader
FileHeader	filesys/filehdr.h	/^class FileHeader$/;"	c
FileLength	filesys/filehdr.cc	/^FileHeader::FileLength()$/;"	f	class:FileHeader
FileNameMaxLen	filesys/directory.h	23;"	d
FileSystem	filesys/filesys.cc	/^FileSystem::FileSystem(bool format) : fileDescritporIndex(0)$/;"	f	class:FileSystem
FileSystem	filesys/filesys.h	/^    FileSystem()$/;"	f	class:FileSystem
FileSystem	filesys/filesys.h	/^class FileSystem$/;"	c
FileType	astyle/src/astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	g	namespace:astyle
Find	filesys/directory.cc	/^Directory::Find(char *name)$/;"	f	class:Directory
Find	lib/hash.cc	/^HashTable<Key,T>::Find(Key key, T *itemPtr) const$/;"	f	class:HashTable
FindAndSet	lib/bitmap.cc	/^Bitmap::FindAndSet()$/;"	f	class:Bitmap
FindInBucket	lib/hash.cc	/^HashTable<Key,T>::FindInBucket(int bucket,$/;"	f	class:HashTable
FindIndex	filesys/directory.cc	/^Directory::FindIndex(char *name)$/;"	f	class:Directory
FindNextFullBucket	lib/hash.cc	/^HashTable<Key,T>::FindNextFullBucket(int bucket) const$/;"	f	class:HashTable
FindNextToRun	threads/scheduler.cc	/^Scheduler::FindNextToRun ()$/;"	f	class:Scheduler
Find_r	filesys/directory.cc	/^Directory::Find_r(char *name, int numEntries, int rootSector)$/;"	f	class:Directory
Finish	threads/thread.cc	/^Thread::Finish ()$/;"	f	class:Thread
Finnish	astyle/src/ASLocalizer.cpp	/^Finnish::Finnish()	\/\/ Suomeksi$/;"	f	class:astyle::Finnish
Finnish	astyle/src/ASLocalizer.h	/^class Finnish : public Translation$/;"	c	namespace:astyle
Fork	threads/thread.cc	/^Thread::Fork(VoidFunctionPtr func, void *arg)$/;"	f	class:Thread
ForkExecute	threads/kernel.cc	/^void ForkExecute(Thread *t)$/;"	f
FormatStyle	astyle/src/astyle.h	/^enum FormatStyle$/;"	g	namespace:astyle
FreeMapFileSize	filesys/filesys.cc	64;"	d	file:
FreeMapSector	filesys/filesys.cc	58;"	d	file:
French	astyle/src/ASLocalizer.cpp	/^French::French()	\/\/ Française$/;"	f	class:astyle::French
French	astyle/src/ASLocalizer.h	/^class French : public Translation$/;"	c	namespace:astyle
Front	lib/list.h	/^    T Front()$/;"	f	class:List
GP	threads/switch.h	242;"	d
GP13	threads/switch.h	166;"	d
GP14	threads/switch.h	167;"	d
GP15	threads/switch.h	168;"	d
GP16	threads/switch.h	169;"	d
GP17	threads/switch.h	170;"	d
GP18	threads/switch.h	171;"	d
GP19	threads/switch.h	172;"	d
GP20	threads/switch.h	173;"	d
GP21	threads/switch.h	174;"	d
GP22	threads/switch.h	175;"	d
GP23	threads/switch.h	176;"	d
GP24	threads/switch.h	177;"	d
GP25	threads/switch.h	178;"	d
GP26	threads/switch.h	179;"	d
GP27	threads/switch.h	180;"	d
GP28	threads/switch.h	181;"	d
GP29	threads/switch.h	182;"	d
GP30	threads/switch.h	183;"	d
GP31	threads/switch.h	184;"	d
German	astyle/src/ASLocalizer.cpp	/^German::German()	\/\/ Deutsch$/;"	f	class:astyle::German
German	astyle/src/ASLocalizer.h	/^class German : public Translation$/;"	c	namespace:astyle
Get	network/post.cc	/^MailBox::Get(PacketHeader *pktHdr, MailHeader *mailHdr, char *data)$/;"	f	class:MailBox
GetChar	machine/console.cc	/^ConsoleInput::GetChar()$/;"	f	class:ConsoleInput
GetChar	userprog/synchconsole.cc	/^SynchConsoleInput::GetChar()$/;"	f	class:SynchConsoleInput
GetDirectoryFileSize	filesys/filesys.cc	/^FileSystem::GetDirectoryFileSize()$/;"	f	class:FileSystem
GetFileName	filesys/filesys.cc	/^FileSystem::GetFileName(char *dest, char *name)$/;"	f	class:FileSystem
GetNextFileHeader	filesys/filehdr.h	/^    FileHeader *GetNextFileHeader(){ return nextFileHeader; }$/;"	f	class:FileHeader
GetNextFileHeaderSector	filesys/filehdr.h	/^    int GetNextFileHeaderSector(){ return nextFileHeaderSector; }$/;"	f	class:FileHeader
HASH_H	lib/hash.h	30;"	d
HFILES	build.cygwin/Makefile	/^HFILES = $(LIB_H) $(MACHINE_H) $(THREAD_H) $(USERPROG_H) $(FILESYS_H) $(NETWORK_H)$/;"	m
HFILES	build.linux/Makefile	/^HFILES = $(LIB_H) $(MACHINE_H) $(THREAD_H) $(USERPROG_H) $(FILESYS_H) $(NETWORK_H)$/;"	m
HFILES	build.macosx/Makefile	/^HFILES = $(LIB_H) $(MACHINE_H) $(THREAD_H) $(USERPROG_H) $(FILESYS_H) $(NETWORK_H)$/;"	m
Halt	machine/interrupt.cc	/^Interrupt::Halt()$/;"	f	class:Interrupt
Halt	test/start.S	/^Halt:$/;"	l
HashInt	lib/libtest.cc	/^HashInt(int key)$/;"	f	file:
HashIterator	lib/hash.cc	/^HashIterator<Key,T>::HashIterator(HashTable<Key,T> *tbl)$/;"	f	class:HashIterator
HashIterator	lib/hash.h	/^class HashIterator$/;"	c
HashKey	lib/libtest.cc	/^HashKey(char *str)$/;"	f	file:
HashTable	lib/hash.cc	/^HashTable<Key,T>::HashTable(Key (*get)(T x), unsigned (*hFunc)(Key x))$/;"	f	class:HashTable
HashTable	lib/hash.h	/^class HashTable$/;"	c
HashValue	lib/hash.cc	/^HashTable<Key, T>::HashValue(Key key) const$/;"	f	class:HashTable
HiReg	machine/machine.h	67;"	d
Hindi	astyle/src/ASLocalizer.cpp	/^Hindi::Hindi()	\/\/ हिन्दी$/;"	f	class:astyle::Hindi
Hindi	astyle/src/ASLocalizer.h	/^class Hindi : public Translation$/;"	c	namespace:astyle
I0	threads/switch.h	68;"	d
I1	threads/switch.h	69;"	d
I2	threads/switch.h	70;"	d
I3	threads/switch.h	71;"	d
I4	threads/switch.h	72;"	d
I5	threads/switch.h	73;"	d
I6	threads/switch.h	74;"	d
I7	threads/switch.h	75;"	d
ID	threads/thread.h	/^    int   ID;$/;"	m	class:Thread
IFMT	machine/mipssim.h	108;"	d
INCDIR	test/Makefile	/^INCDIR =-I..\/userprog -I..\/lib$/;"	m
INCPATH	build.cygwin/Makefile	/^INCPATH = -I..\/network -I..\/filesys -I..\/userprog -I..\/threads -I..\/machine -I..\/lib$/;"	m
INCPATH	build.linux/Makefile	/^INCPATH = -I..\/network -I..\/filesys -I..\/userprog -I..\/threads -I..\/machine -I..\/lib -I-$/;"	m
INCPATH	build.macosx/Makefile	/^INCPATH = -I..\/network -I..\/filesys -I..\/userprog -I..\/threads -I..\/machine -I..\/lib$/;"	m
INIT_TYPE	astyle/src/astyle.h	/^	INIT_TYPE = 256,			\/\/ also an ARRAY_TYPE$/;"	e	enum:astyle::BracketType
INSTALL	astyle/build/clang/Makefile	/^INSTALL=install -o $(USER) -g $(USER)$/;"	m
INSTALL	astyle/build/gcc/Makefile	/^INSTALL=install -o $(USER) -g $(USER)$/;"	m
INSTALL	astyle/build/intel/Makefile	/^INSTALL=install -o $(USER) -g $(USER)$/;"	m
INTERFACE_TYPE	astyle/src/astyle.h	/^	INTERFACE_TYPE = 8,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
INTERRUPT_H	machine/interrupt.h	34;"	d
IN_ASM	test/start.S	/^#define IN_ASM$/;"	d
Idle	machine/interrupt.cc	/^Interrupt::Idle()$/;"	f	class:Interrupt
IdleMode	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
IllegalInstrException	machine/machine.h	/^                     IllegalInstrException, \/\/ Unimplemented or reserved instr.$/;"	e	enum:ExceptionType
IncreaseSizeBy	lib/hash.cc	/^const int IncreaseSizeBy = 4;	\/\/ how much do we grow table when needed?$/;"	v
IndexToAddr	machine/mipssim.h	94;"	d
InitBuckets	lib/hash.cc	/^HashTable<Key,T>::InitBuckets(int sz)$/;"	f	class:HashTable
InitRegisters	userprog/addrspace.cc	/^AddrSpace::InitRegisters()$/;"	f	class:AddrSpace
InitSocketName	lib/sysdep.cc	/^InitSocketName(struct sockaddr_un *uname, char *name)$/;"	f	file:
InitialArg	threads/switch.h	119;"	d
InitialArg	threads/switch.h	153;"	d
InitialArg	threads/switch.h	219;"	d
InitialArg	threads/switch.h	255;"	d
InitialArg	threads/switch.h	52;"	d
InitialArg	threads/switch.h	83;"	d
InitialArgState	threads/switch.h	125;"	d
InitialArgState	threads/switch.h	148;"	d
InitialArgState	threads/switch.h	211;"	d
InitialArgState	threads/switch.h	262;"	d
InitialArgState	threads/switch.h	59;"	d
InitialArgState	threads/switch.h	89;"	d
InitialBuckets	lib/hash.cc	/^const int InitialBuckets = 4;	\/\/ how big a hash table do we start with$/;"	v
InitialLR	threads/switch.h	218;"	d
InitialPC	threads/switch.h	118;"	d
InitialPC	threads/switch.h	152;"	d
InitialPC	threads/switch.h	254;"	d
InitialPC	threads/switch.h	51;"	d
InitialPC	threads/switch.h	82;"	d
InitialPCState	threads/switch.h	124;"	d
InitialPCState	threads/switch.h	147;"	d
InitialPCState	threads/switch.h	210;"	d
InitialPCState	threads/switch.h	261;"	d
InitialPCState	threads/switch.h	58;"	d
InitialPCState	threads/switch.h	88;"	d
Initialize	threads/kernel.cc	/^Kernel::Initialize()$/;"	f	class:Kernel
Insert	lib/hash.cc	/^HashTable<Key,T>::Insert(T item)$/;"	f	class:HashTable
Insert	lib/list.cc	/^SortedList<T>::Insert(T item)$/;"	f	class:SortedList
Instruction	machine/mipssim.cc	/^class Instruction$/;"	c	file:
IntCloseFile	machine/interrupt.cc	/^Interrupt::IntCloseFile(OpenFileId id)$/;"	f	class:Interrupt
IntCompare	lib/libtest.cc	/^IntCompare(int x, int y)$/;"	f	file:
IntCreateFile	machine/interrupt.cc	/^Interrupt::IntCreateFile(char *filename, int size)$/;"	f	class:Interrupt
IntOff	machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	e	enum:IntStatus
IntOn	machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	e	enum:IntStatus
IntOpenFile	machine/interrupt.cc	/^Interrupt::IntOpenFile(char *name)$/;"	f	class:Interrupt
IntReadFile	machine/interrupt.cc	/^Interrupt::IntReadFile(char *buf, int size, OpenFileId id)$/;"	f	class:Interrupt
IntStatus	machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	g
IntType	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt,$/;"	g
IntWriteFile	machine/interrupt.cc	/^Interrupt::IntWriteFile(char *buf, int size, OpenFileId id)$/;"	f	class:Interrupt
Interrupt	machine/interrupt.cc	/^Interrupt::Interrupt()$/;"	f	class:Interrupt
Interrupt	machine/interrupt.h	/^class Interrupt$/;"	c
IsDone	lib/hash.h	/^    bool IsDone()$/;"	f	class:HashIterator
IsDone	lib/list.h	/^    bool IsDone()$/;"	f	class:ListIterator
IsEmpty	lib/hash.h	/^    bool IsEmpty()$/;"	f	class:HashTable
IsEmpty	lib/list.h	/^    bool IsEmpty()$/;"	f	class:List
IsEnabled	lib/debug.cc	/^Debug::IsEnabled(char flag)$/;"	f	class:Debug
IsHeldByCurrentThread	threads/synch.h	/^    bool IsHeldByCurrentThread()$/;"	f	class:Lock
IsInList	lib/list.cc	/^List<T>::IsInList(T item) const$/;"	f	class:List
IsInTable	lib/hash.h	/^    bool IsInTable(Key key)$/;"	f	class:HashTable
Italian	astyle/src/ASLocalizer.cpp	/^Italian::Italian()	\/\/ Italiano$/;"	f	class:astyle::Italian
Italian	astyle/src/ASLocalizer.h	/^class Italian : public Translation$/;"	c	namespace:astyle
Item	lib/hash.h	/^    T Item()$/;"	f	class:HashIterator
Item	lib/list.h	/^    T Item()$/;"	f	class:ListIterator
JAVAINCS	astyle/build/clang/Makefile	/^JAVAINCS   = -I$(JAVA_HOME)\/include$/;"	m
JAVAINCS	astyle/build/gcc/Makefile	/^JAVAINCS   = -I$(JAVA_HOME)\/include$/;"	m
JAVAINCS	astyle/build/intel/Makefile	/^JAVAINCS   = -I$(JAVA_HOME)\/include$/;"	m
JAVA_HOME	astyle/build/clang/Makefile	/^    JAVA_HOME = \/usr\/lib\/jvm\/default-java$/;"	m
JAVA_HOME	astyle/build/gcc/Makefile	/^    JAVA_HOME = \/usr\/lib\/jvm\/default-java$/;"	m
JAVA_HOME	astyle/build/intel/Makefile	/^    JAVA_HOME = \/usr\/lib\/jvm\/default-java$/;"	m
JAVA_TYPE	astyle/src/astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
JFMT	machine/mipssim.h	109;"	d
JUST_CREATED	threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
Japanese	astyle/src/ASLocalizer.cpp	/^Japanese::Japanese()	\/\/ 日本$/;"	f	class:astyle::Japanese
Japanese	astyle/src/ASLocalizer.h	/^class Japanese : public Translation$/;"	c	namespace:astyle
Java_AStyleInterface_AStyleGetVersion	astyle/src/astyle_main.cpp	/^jstring STDCALL Java_AStyleInterface_AStyleGetVersion(JNIEnv* env, jclass)$/;"	f
Java_AStyleInterface_AStyleMain	astyle/src/astyle_main.cpp	/^jstring STDCALL Java_AStyleInterface_AStyleMain(JNIEnv* env,$/;"	f
Join	test/start.S	/^Join:$/;"	l
KClose	threads/kernel.cc	/^int Kernel::KClose(OpenFileId id)$/;"	f	class:Kernel
KCreateFile	threads/kernel.cc	/^int Kernel::KCreateFile(char *filename, int size)$/;"	f	class:Kernel
KERNEL_H	threads/kernel.h	9;"	d
KOpen	threads/kernel.cc	/^OpenFileId Kernel::KOpen(char *name)$/;"	f	class:Kernel
KRead	threads/kernel.cc	/^int Kernel::KRead(char *buf, int size, OpenFileId id)$/;"	f	class:Kernel
KWrite	threads/kernel.cc	/^int Kernel::KWrite(char *buf, int size, OpenFileId id)$/;"	f	class:Kernel
Kernel	threads/kernel.cc	/^Kernel::Kernel(int argc, char **argv)$/;"	f	class:Kernel
Kernel	threads/kernel.h	/^class Kernel$/;"	c
Korean	astyle/src/ASLocalizer.cpp	/^Korean::Korean()	\/\/ 한국의$/;"	f	class:astyle::Korean
Korean	astyle/src/ASLocalizer.h	/^class Korean : public Translation$/;"	c	namespace:astyle
LANG_HINDI	astyle/src/ASLocalizer.cpp	/^	const size_t LANG_HINDI = 57;$/;"	v
LD	build.cygwin/Makefile	/^LD = g++$/;"	m
LD	build.linux/Makefile	/^LD = g++$/;"	m
LD	build.macosx/Makefile	/^LD = g++$/;"	m
LD	test/Makefile	/^LD = $(GCCDIR)ld$/;"	m
LDFLAGS	build.cygwin/Makefile	/^LDFLAGS =$/;"	m
LDFLAGS	build.linux/Makefile	/^LDFLAGS = -m32$/;"	m
LDFLAGS	build.macosx/Makefile	/^LDFLAGS =$/;"	m
LDFLAGSd	astyle/build/clang/Makefile	/^    LDFLAGSd   = $(LDFLAGS)$/;"	m
LDFLAGSd	astyle/build/clang/Makefile	/^    LDFLAGSd   =$/;"	m
LDFLAGSd	astyle/build/gcc/Makefile	/^    LDFLAGSd   = $(LDFLAGS)$/;"	m
LDFLAGSd	astyle/build/gcc/Makefile	/^    LDFLAGSd   =$/;"	m
LDFLAGSd	astyle/build/intel/Makefile	/^    LDFLAGSd   = $(LDFLAGS)$/;"	m
LDFLAGSd	astyle/build/intel/Makefile	/^    LDFLAGSd   = -static-intel$/;"	m
LDFLAGSr	astyle/build/clang/Makefile	/^    LDFLAGSr   = $(LDFLAGS)$/;"	m
LDFLAGSr	astyle/build/clang/Makefile	/^    LDFLAGSr   = -s$/;"	m
LDFLAGSr	astyle/build/gcc/Makefile	/^    LDFLAGSr   = $(LDFLAGS)$/;"	m
LDFLAGSr	astyle/build/gcc/Makefile	/^    LDFLAGSr   = -s$/;"	m
LDFLAGSr	astyle/build/intel/Makefile	/^    LDFLAGSr   = $(LDFLAGS)$/;"	m
LDFLAGSr	astyle/build/intel/Makefile	/^    LDFLAGSr   = -s -static-intel$/;"	m
LIBTEST_H	lib/libtest.h	9;"	d
LIB_C	build.cygwin/Makefile	/^LIB_C = ..\/lib\/bitmap.cc\\$/;"	m
LIB_C	build.linux/Makefile	/^LIB_C = ..\/lib\/bitmap.cc\\$/;"	m
LIB_C	build.macosx/Makefile	/^LIB_C = ..\/lib\/bitmap.cc\\$/;"	m
LIB_H	build.cygwin/Makefile	/^LIB_H = ..\/lib\/bitmap.h\\$/;"	m
LIB_H	build.linux/Makefile	/^LIB_H = ..\/lib\/bitmap.h\\$/;"	m
LIB_H	build.macosx/Makefile	/^LIB_H = ..\/lib\/bitmap.h\\$/;"	m
LIB_O	build.cygwin/Makefile	/^LIB_O = bitmap.o debug.o libtest.o sysdep.o$/;"	m
LIB_O	build.linux/Makefile	/^LIB_O = bitmap.o debug.o libtest.o sysdep.o$/;"	m
LIB_O	build.macosx/Makefile	/^LIB_O = bitmap.o debug.o libtest.o sysdep.o$/;"	m
LINEEND_CR	astyle/src/astyle.h	/^	LINEEND_CR   = LINEEND_MACOLD$/;"	e	enum:astyle::LineEndFormat
LINEEND_CRLF	astyle/src/astyle.h	/^	LINEEND_CRLF = LINEEND_WINDOWS,$/;"	e	enum:astyle::LineEndFormat
LINEEND_DEFAULT	astyle/src/astyle.h	/^	LINEEND_DEFAULT,	\/\/ Use line break that matches most of the file$/;"	e	enum:astyle::LineEndFormat
LINEEND_LF	astyle/src/astyle.h	/^	LINEEND_LF   = LINEEND_LINUX,$/;"	e	enum:astyle::LineEndFormat
LINEEND_LINUX	astyle/src/astyle.h	/^	LINEEND_LINUX,$/;"	e	enum:astyle::LineEndFormat
LINEEND_MACOLD	astyle/src/astyle.h	/^	LINEEND_MACOLD,$/;"	e	enum:astyle::LineEndFormat
LINEEND_WINDOWS	astyle/src/astyle.h	/^	LINEEND_WINDOWS,$/;"	e	enum:astyle::LineEndFormat
LINUX_MODE	astyle/src/astyle.h	/^	LINUX_MODE,$/;"	e	enum:astyle::BracketMode
LIST_H	lib/list.h	14;"	d
LR	threads/switch.h	204;"	d
Length	filesys/openfile.cc	/^OpenFile::Length()$/;"	f	class:OpenFile
Length	filesys/openfile.h	/^    int Length()$/;"	f	class:OpenFile
LibSelfTest	lib/libtest.cc	/^LibSelfTest ()$/;"	f
LineEndFormat	astyle/src/astyle.h	/^enum LineEndFormat$/;"	g	namespace:astyle
List	filesys/directory.cc	/^Directory::List()$/;"	f	class:Directory
List	filesys/filesys.cc	/^FileSystem::List(char *dirName)$/;"	f	class:FileSystem
List	lib/list.cc	/^List<T>::List()$/;"	f	class:List
List	lib/list.h	/^class List$/;"	c
ListElement	lib/list.cc	/^ListElement<T>::ListElement(T itm)$/;"	f	class:ListElement
ListElement	lib/list.h	/^class ListElement$/;"	c
ListIterator	lib/list.h	/^    ListIterator(List<T> *list)$/;"	f	class:ListIterator
ListIterator	lib/list.h	/^class ListIterator$/;"	c
LoReg	machine/machine.h	68;"	d
Load	userprog/addrspace.cc	/^AddrSpace::Load(char *fileName)$/;"	f	class:AddrSpace
LoadReg	machine/machine.h	72;"	d
LoadValueReg	machine/machine.h	73;"	d
Lock	threads/synch.cc	/^Lock::Lock(char* debugName)$/;"	f	class:Lock
Lock	threads/synch.h	/^class Lock$/;"	c
Lseek	lib/sysdep.cc	/^Lseek(int fd, int offset, int whence)$/;"	f
MACHINE_C	build.cygwin/Makefile	/^MACHINE_C = ..\/machine\/interrupt.cc\\$/;"	m
MACHINE_C	build.linux/Makefile	/^MACHINE_C = ..\/machine\/interrupt.cc\\$/;"	m
MACHINE_C	build.macosx/Makefile	/^MACHINE_C = ..\/machine\/interrupt.cc\\$/;"	m
MACHINE_H	build.cygwin/Makefile	/^MACHINE_H = ..\/machine\/callback.h\\$/;"	m
MACHINE_H	build.linux/Makefile	/^MACHINE_H = ..\/machine\/callback.h\\$/;"	m
MACHINE_H	build.macosx/Makefile	/^MACHINE_H = ..\/machine\/callback.h\\$/;"	m
MACHINE_H	machine/machine.h	22;"	d
MACHINE_O	build.cygwin/Makefile	/^MACHINE_O = interrupt.o stats.o timer.o console.o machine.o mipssim.o\\$/;"	m
MACHINE_O	build.linux/Makefile	/^MACHINE_O = interrupt.o stats.o timer.o console.o machine.o mipssim.o\\$/;"	m
MACHINE_O	build.macosx/Makefile	/^MACHINE_O = interrupt.o stats.o timer.o console.o machine.o mipssim.o\\$/;"	m
MAIN	threads/main.cc	40;"	d	file:
MAIN	threads/main.cc	42;"	d	file:
MAIN_H	threads/main.h	9;"	d
MAXOPENFILES	filesys/filesys.h	41;"	d
MINCOND_END	astyle/src/astyle.h	/^	MINCOND_END$/;"	e	enum:astyle::MinConditional
MINCOND_ONE	astyle/src/astyle.h	/^	MINCOND_ONE,$/;"	e	enum:astyle::MinConditional
MINCOND_ONEHALF	astyle/src/astyle.h	/^	MINCOND_ONEHALF,$/;"	e	enum:astyle::MinConditional
MINCOND_TWO	astyle/src/astyle.h	/^	MINCOND_TWO,$/;"	e	enum:astyle::MinConditional
MINCOND_ZERO	astyle/src/astyle.h	/^	MINCOND_ZERO,$/;"	e	enum:astyle::MinConditional
MIPSSIM_H	machine/mipssim.h	11;"	d
MSG	test/start.S	/^MSG:$/;"	l
Machine	machine/machine.cc	/^Machine::Machine(bool debug)$/;"	f	class:Machine
Machine	machine/machine.h	/^class Machine$/;"	c
MachineStateSize	threads/thread.h	53;"	d
MachineStatus	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	g
MagicNumber	machine/disk.cc	/^const int MagicNumber = 0x456789ab;$/;"	v
MagicSize	machine/disk.cc	/^const int MagicSize = sizeof(int);$/;"	v
Mail	network/post.cc	/^Mail::Mail(PacketHeader pktH, MailHeader mailH, char *msgData)$/;"	f	class:Mail
Mail	network/post.h	/^class Mail$/;"	c
MailBox	network/post.cc	/^MailBox::MailBox()$/;"	f	class:MailBox
MailBox	network/post.h	/^class MailBox$/;"	c
MailBoxAddress	network/post.h	/^typedef int MailBoxAddress;$/;"	t
MailHeader	network/post.h	/^class MailHeader$/;"	c
Mark	lib/bitmap.cc	/^Bitmap::Mark(int which)$/;"	f	class:Bitmap
MaxFileSize	filesys/filehdr.h	24;"	d
MaxMailSize	network/post.h	57;"	d
MaxOpcode	machine/mipssim.h	88;"	d
MaxPacketSize	machine/network.h	43;"	d
MaxWireSize	machine/network.h	42;"	d
MemorySize	machine/machine.h	/^const int MemorySize = (NumPhysPages * PageSize);$/;"	v
MinConditional	astyle/src/astyle.h	/^enum MinConditional$/;"	g	namespace:astyle
ModuloDiff	machine/disk.cc	/^Disk::ModuloDiff(int to, int from)$/;"	f	class:Disk
Mult	machine/mipssim.cc	/^Mult(int a, int b, bool signedArith, int* hiPtr, int* loPtr)$/;"	f	file:
N	test/segments.c	17;"	d	file:
NAMESPACE_TYPE	astyle/src/astyle.h	/^	NAMESPACE_TYPE = 1,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
NETWORK_C	build.cygwin/Makefile	/^NETWORK_C = ..\/network\/post.cc$/;"	m
NETWORK_C	build.linux/Makefile	/^NETWORK_C = ..\/network\/post.cc$/;"	m
NETWORK_C	build.macosx/Makefile	/^NETWORK_C = ..\/network\/post.cc$/;"	m
NETWORK_H	build.cygwin/Makefile	/^NETWORK_H = ..\/network\/post.h$/;"	m
NETWORK_H	build.linux/Makefile	/^NETWORK_H = ..\/network\/post.h$/;"	m
NETWORK_H	build.macosx/Makefile	/^NETWORK_H = ..\/network\/post.h$/;"	m
NETWORK_H	machine/network.h	16;"	d
NETWORK_O	build.cygwin/Makefile	/^NETWORK_O = post.o$/;"	m
NETWORK_O	build.linux/Makefile	/^NETWORK_O = post.o$/;"	m
NETWORK_O	build.macosx/Makefile	/^NETWORK_O = post.o$/;"	m
NOFFMAGIC	userprog/noff.h	8;"	d
NONE	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA };$/;"	e	enum:RegType
NONE_MODE	astyle/src/astyle.h	/^	NONE_MODE,$/;"	e	enum:astyle::BracketMode
NO_MPROT	lib/sysdep.cc	44;"	d	file:
NO_MPROT	lib/sysdep.cc	47;"	d	file:
NULL	lib/utility.h	15;"	d
NULL_TYPE	astyle/src/astyle.h	/^	NULL_TYPE = 0,$/;"	e	enum:astyle::BracketType
NetworkAddress	machine/network.h	/^typedef int NetworkAddress;$/;"	t
NetworkInput	machine/network.cc	/^NetworkInput::NetworkInput(CallBackObj *toCall)$/;"	f	class:NetworkInput
NetworkInput	machine/network.h	/^class NetworkInput : public CallBackObj$/;"	c
NetworkOutput	machine/network.cc	/^NetworkOutput::NetworkOutput(double reliability, CallBackObj *toCall)$/;"	f	class:NetworkOutput
NetworkOutput	machine/network.h	/^class NetworkOutput : public CallBackObj$/;"	c
NetworkRecvInt	machine/interrupt.h	/^               NetworkSendInt, NetworkRecvInt$/;"	e	enum:IntType
NetworkSendInt	machine/interrupt.h	/^               NetworkSendInt, NetworkRecvInt$/;"	e	enum:IntType
NetworkTest	threads/kernel.cc	/^Kernel::NetworkTest()$/;"	f	class:Kernel
NetworkTime	machine/stats.h	/^const int NetworkTime =	 100;  	\/\/ time to send or receive one packet$/;"	v
Next	lib/hash.cc	/^HashIterator<Key,T>::Next()$/;"	f	class:HashIterator
Next	lib/list.h	/^    void Next()$/;"	f	class:ListIterator
NextPCReg	machine/machine.h	70;"	d
NoException	machine/machine.h	/^enum ExceptionType { NoException,           \/\/ Everything ok!$/;"	e	enum:ExceptionType
NoffHeader	userprog/noff.h	/^} NoffHeader;$/;"	t	typeref:struct:noffHeader
NumClear	lib/bitmap.cc	/^Bitmap::NumClear() const$/;"	f	class:Bitmap
NumDirEntries	filesys/filesys.cc	65;"	d	file:
NumDirect	filesys/filehdr.h	23;"	d
NumExceptionTypes	machine/machine.h	/^                     NumExceptionTypes$/;"	e	enum:ExceptionType
NumGPRegs	machine/machine.h	66;"	d
NumInList	lib/list.h	/^    unsigned int NumInList()$/;"	f	class:List
NumPhysPages	machine/machine.h	/^const int NumPhysPages = 128;$/;"	v
NumSectors	machine/disk.h	/^const int NumSectors = (SectorsPerTrack * NumTracks);$/;"	v
NumTotalRegs	machine/machine.h	76;"	d
NumTracks	machine/disk.h	/^const int NumTracks = 32;		\/\/ number of tracks per disk$/;"	v
OBJ	astyle/build/clang/Makefile	/^OBJ   = $(patsubst %.cpp,$(objdir)\/%.o,$(SRC))$/;"	m
OBJ	astyle/build/gcc/Makefile	/^OBJ   = $(patsubst %.cpp,$(objdir)\/%.o,$(SRC))$/;"	m
OBJ	astyle/build/intel/Makefile	/^OBJ   = $(patsubst %.cpp,$(objdir)\/%.o,$(SRC))$/;"	m
OBJa	astyle/build/clang/Makefile	/^OBJa  = $(patsubst %.cpp,$(objdir)\/%_a.o,$(SRC))$/;"	m
OBJa	astyle/build/gcc/Makefile	/^OBJa  = $(patsubst %.cpp,$(objdir)\/%_a.o,$(SRC))$/;"	m
OBJa	astyle/build/intel/Makefile	/^OBJa  = $(patsubst %.cpp,$(objdir)\/%_a.o,$(SRC))$/;"	m
OBJad	astyle/build/clang/Makefile	/^OBJad = $(patsubst %.cpp,$(objdir)\/%_ad.o,$(SRC))$/;"	m
OBJad	astyle/build/gcc/Makefile	/^OBJad = $(patsubst %.cpp,$(objdir)\/%_ad.o,$(SRC))$/;"	m
OBJad	astyle/build/intel/Makefile	/^OBJad = $(patsubst %.cpp,$(objdir)\/%_ad.o,$(SRC))$/;"	m
OBJd	astyle/build/clang/Makefile	/^OBJd  = $(patsubst %.cpp,$(objdir)\/%_d.o,$(SRC))$/;"	m
OBJd	astyle/build/gcc/Makefile	/^OBJd  = $(patsubst %.cpp,$(objdir)\/%_d.o,$(SRC))$/;"	m
OBJd	astyle/build/intel/Makefile	/^OBJd  = $(patsubst %.cpp,$(objdir)\/%_d.o,$(SRC))$/;"	m
OBJs	astyle/build/clang/Makefile	/^OBJs  = $(patsubst %.cpp,$(objdir)\/%_s.o,$(SRC))$/;"	m
OBJs	astyle/build/gcc/Makefile	/^OBJs  = $(patsubst %.cpp,$(objdir)\/%_s.o,$(SRC))$/;"	m
OBJs	astyle/build/intel/Makefile	/^OBJs  = $(patsubst %.cpp,$(objdir)\/%_s.o,$(SRC))$/;"	m
OBJsd	astyle/build/clang/Makefile	/^OBJsd = $(patsubst %.cpp,$(objdir)\/%_sd.o,$(SRC))$/;"	m
OBJsd	astyle/build/gcc/Makefile	/^OBJsd = $(patsubst %.cpp,$(objdir)\/%_sd.o,$(SRC))$/;"	m
OBJsd	astyle/build/intel/Makefile	/^OBJsd = $(patsubst %.cpp,$(objdir)\/%_sd.o,$(SRC))$/;"	m
OBJsj	astyle/build/clang/Makefile	/^OBJsj  = $(patsubst %.cpp,$(objdir)\/%_sj.o,$(SRC))$/;"	m
OBJsj	astyle/build/gcc/Makefile	/^OBJsj  = $(patsubst %.cpp,$(objdir)\/%_sj.o,$(SRC))$/;"	m
OBJsj	astyle/build/intel/Makefile	/^OBJsj  = $(patsubst %.cpp,$(objdir)\/%_sj.o,$(SRC))$/;"	m
OBJsjd	astyle/build/clang/Makefile	/^OBJsjd = $(patsubst %.cpp,$(objdir)\/%_sjd.o,$(SRC))$/;"	m
OBJsjd	astyle/build/gcc/Makefile	/^OBJsjd = $(patsubst %.cpp,$(objdir)\/%_sjd.o,$(SRC))$/;"	m
OBJsjd	astyle/build/intel/Makefile	/^OBJsjd = $(patsubst %.cpp,$(objdir)\/%_sjd.o,$(SRC))$/;"	m
OFILES	build.cygwin/Makefile	/^OFILES = $(C_OFILES) $(S_OFILES)$/;"	m
OFILES	build.linux/Makefile	/^OFILES = $(C_OFILES) $(S_OFILES)$/;"	m
OFILES	build.macosx/Makefile	/^OFILES = $(C_OFILES) $(S_OFILES)$/;"	m
OPENFILE_H	filesys/openfile.h	21;"	d
OP_ADD	machine/mipssim.h	25;"	d
OP_ADDI	machine/mipssim.h	26;"	d
OP_ADDIU	machine/mipssim.h	27;"	d
OP_ADDU	machine/mipssim.h	28;"	d
OP_AND	machine/mipssim.h	29;"	d
OP_ANDI	machine/mipssim.h	30;"	d
OP_BEQ	machine/mipssim.h	31;"	d
OP_BGEZ	machine/mipssim.h	32;"	d
OP_BGEZAL	machine/mipssim.h	33;"	d
OP_BGTZ	machine/mipssim.h	34;"	d
OP_BLEZ	machine/mipssim.h	35;"	d
OP_BLTZ	machine/mipssim.h	36;"	d
OP_BLTZAL	machine/mipssim.h	37;"	d
OP_BNE	machine/mipssim.h	38;"	d
OP_DIV	machine/mipssim.h	40;"	d
OP_DIVU	machine/mipssim.h	41;"	d
OP_J	machine/mipssim.h	42;"	d
OP_JAL	machine/mipssim.h	43;"	d
OP_JALR	machine/mipssim.h	44;"	d
OP_JR	machine/mipssim.h	45;"	d
OP_LB	machine/mipssim.h	46;"	d
OP_LBU	machine/mipssim.h	47;"	d
OP_LH	machine/mipssim.h	48;"	d
OP_LHU	machine/mipssim.h	49;"	d
OP_LUI	machine/mipssim.h	50;"	d
OP_LW	machine/mipssim.h	51;"	d
OP_LWL	machine/mipssim.h	52;"	d
OP_LWR	machine/mipssim.h	53;"	d
OP_MFHI	machine/mipssim.h	55;"	d
OP_MFLO	machine/mipssim.h	56;"	d
OP_MTHI	machine/mipssim.h	58;"	d
OP_MTLO	machine/mipssim.h	59;"	d
OP_MULT	machine/mipssim.h	60;"	d
OP_MULTU	machine/mipssim.h	61;"	d
OP_NOR	machine/mipssim.h	62;"	d
OP_OR	machine/mipssim.h	63;"	d
OP_ORI	machine/mipssim.h	64;"	d
OP_RES	machine/mipssim.h	87;"	d
OP_RFE	machine/mipssim.h	65;"	d
OP_SB	machine/mipssim.h	66;"	d
OP_SH	machine/mipssim.h	67;"	d
OP_SLL	machine/mipssim.h	68;"	d
OP_SLLV	machine/mipssim.h	69;"	d
OP_SLT	machine/mipssim.h	70;"	d
OP_SLTI	machine/mipssim.h	71;"	d
OP_SLTIU	machine/mipssim.h	72;"	d
OP_SLTU	machine/mipssim.h	73;"	d
OP_SRA	machine/mipssim.h	74;"	d
OP_SRAV	machine/mipssim.h	75;"	d
OP_SRL	machine/mipssim.h	76;"	d
OP_SRLV	machine/mipssim.h	77;"	d
OP_SUB	machine/mipssim.h	78;"	d
OP_SUBU	machine/mipssim.h	79;"	d
OP_SW	machine/mipssim.h	80;"	d
OP_SWL	machine/mipssim.h	81;"	d
OP_SWR	machine/mipssim.h	82;"	d
OP_SYSCALL	machine/mipssim.h	85;"	d
OP_UNIMP	machine/mipssim.h	86;"	d
OP_XOR	machine/mipssim.h	83;"	d
OP_XORI	machine/mipssim.h	84;"	d
OSF_OR_AIX	lib/sysdep.cc	76;"	d	file:
OSF_OR_AIX	lib/sysdep.cc	79;"	d	file:
ObjCColonPad	astyle/src/astyle.h	/^enum ObjCColonPad$/;"	g	namespace:astyle
OneInstruction	machine/mipssim.cc	/^Machine::OneInstruction(Instruction *instr)$/;"	f	class:Machine
OneTick	machine/interrupt.cc	/^Interrupt::OneTick()$/;"	f	class:Interrupt
OpInfo	machine/mipssim.h	/^struct OpInfo$/;"	s
OpString	machine/mipssim.h	/^struct OpString$/;"	s
Open	filesys/filesys.cc	/^FileSystem::Open(char *name)$/;"	f	class:FileSystem
Open	filesys/filesys.h	/^    OpenFile* Open(char *name)$/;"	f	class:FileSystem
Open	test/start.S	/^Open:$/;"	l
OpenFile	filesys/openfile.cc	/^OpenFile::OpenFile(int sector)$/;"	f	class:OpenFile
OpenFile	filesys/openfile.h	/^    OpenFile(int f)$/;"	f	class:OpenFile
OpenFile	filesys/openfile.h	/^class OpenFile$/;"	c
OpenFileId	userprog/syscall.h	/^typedef int OpenFileId;$/;"	t
OpenForReadWrite	lib/sysdep.cc	/^OpenForReadWrite(char *name, bool crashOnError)$/;"	f
OpenForWrite	lib/sysdep.cc	/^OpenForWrite(char *name)$/;"	f
OpenSocket	lib/sysdep.cc	/^OpenSocket()$/;"	f
OverflowException	machine/machine.h	/^                     OverflowException,     \/\/ Integer overflow in add or sub.$/;"	e	enum:ExceptionType
P	threads/synch.cc	/^Semaphore::P()$/;"	f	class:Semaphore
P1	threads/switch.h	162;"	d
P2	threads/switch.h	163;"	d
P3	threads/switch.h	164;"	d
P4	threads/switch.h	165;"	d
PBITMAP_H	filesys/pbitmap.h	14;"	d
PC	threads/switch.h	115;"	d
PC	threads/switch.h	243;"	d
PC	threads/switch.h	39;"	d
PC	threads/switch.h	79;"	d
PCReg	machine/machine.h	69;"	d
PCState	threads/switch.h	123;"	d
PCState	threads/switch.h	145;"	d
PCState	threads/switch.h	214;"	d
PCState	threads/switch.h	259;"	d
PCState	threads/switch.h	56;"	d
PCState	threads/switch.h	87;"	d
PLabelToAddr	threads/thread.cc	/^PLabelToAddr(void *plabel)$/;"	f	file:
POST_H	network/post.h	28;"	d
PROGRAM	build.cygwin/Makefile	/^PROGRAM = nachos$/;"	m
PROGRAM	build.linux/Makefile	/^PROGRAM = nachos$/;"	m
PROGRAM	build.macosx/Makefile	/^PROGRAM = nachos$/;"	m
PROGRAMS	test/Makefile	/^PROGRAMS = FS_test1 FS_test2$/;"	m
PROGRAMS	test/Makefile	/^PROGRAMS = unknownhost$/;"	m
PTR_ALIGN_MIDDLE	astyle/src/astyle.h	/^	PTR_ALIGN_MIDDLE,$/;"	e	enum:astyle::PointerAlign
PTR_ALIGN_NAME	astyle/src/astyle.h	/^	PTR_ALIGN_NAME$/;"	e	enum:astyle::PointerAlign
PTR_ALIGN_NONE	astyle/src/astyle.h	/^	PTR_ALIGN_NONE,$/;"	e	enum:astyle::PointerAlign
PTR_ALIGN_TYPE	astyle/src/astyle.h	/^	PTR_ALIGN_TYPE,$/;"	e	enum:astyle::PointerAlign
PacketHeader	machine/network.h	/^class PacketHeader$/;"	c
PageFaultException	machine/machine.h	/^                     PageFaultException,    \/\/ No valid translation found$/;"	e	enum:ExceptionType
PageSize	machine/machine.h	/^const int PageSize = 128; 		\/\/ set the page size equal to$/;"	v
PendingCompare	machine/interrupt.cc	/^PendingCompare (PendingInterrupt *x, PendingInterrupt *y)$/;"	f	file:
PendingInterrupt	machine/interrupt.cc	/^PendingInterrupt::PendingInterrupt(CallBackObj *callOnInt,$/;"	f	class:PendingInterrupt
PendingInterrupt	machine/interrupt.h	/^class PendingInterrupt$/;"	c
PersistentBitmap	filesys/pbitmap.cc	/^PersistentBitmap::PersistentBitmap(OpenFile *file, int numItems):Bitmap(numItems)$/;"	f	class:PersistentBitmap
PersistentBitmap	filesys/pbitmap.cc	/^PersistentBitmap::PersistentBitmap(int numItems):Bitmap(numItems)$/;"	f	class:PersistentBitmap
PersistentBitmap	filesys/pbitmap.h	/^class PersistentBitmap : public Bitmap$/;"	c
PointerAlign	astyle/src/astyle.h	/^enum PointerAlign$/;"	g	namespace:astyle
Polish	astyle/src/ASLocalizer.cpp	/^Polish::Polish()	\/\/ Polski$/;"	f	class:astyle::Polish
Polish	astyle/src/ASLocalizer.h	/^class Polish : public Translation$/;"	c	namespace:astyle
PollFile	lib/sysdep.cc	/^PollFile(int fd)$/;"	f
PollSocket	lib/sysdep.cc	/^PollSocket(int sockID)$/;"	f
Portuguese	astyle/src/ASLocalizer.cpp	/^Portuguese::Portuguese()	\/\/ Português$/;"	f	class:astyle::Portuguese
Portuguese	astyle/src/ASLocalizer.h	/^class Portuguese : public Translation$/;"	c	namespace:astyle
PostOfficeInput	network/post.cc	/^PostOfficeInput::PostOfficeInput(int nBoxes)$/;"	f	class:PostOfficeInput
PostOfficeInput	network/post.h	/^class PostOfficeInput : public CallBackObj$/;"	c
PostOfficeOutput	network/post.cc	/^PostOfficeOutput::PostOfficeOutput(double reliability)$/;"	f	class:PostOfficeOutput
PostOfficeOutput	network/post.h	/^class PostOfficeOutput : public CallBackObj$/;"	c
PostalDelivery	network/post.cc	/^PostOfficeInput::PostalDelivery(void* data)$/;"	f	class:PostOfficeInput
PrepareToEnd	threads/kernel.cc	/^Kernel::PrepareToEnd()$/;"	f	class:Kernel
Prepend	lib/list.cc	/^List<T>::Prepend(T item)$/;"	f	class:List
Prepend	lib/list.h	/^    void Prepend(T item)$/;"	f	class:SortedList
PrevPCReg	machine/machine.h	71;"	d
Print	filesys/directory.cc	/^Directory::Print()$/;"	f	class:Directory
Print	filesys/filehdr.cc	/^FileHeader::Print()$/;"	f	class:FileHeader
Print	filesys/filesys.cc	/^FileSystem::Print()$/;"	f	class:FileSystem
Print	lib/bitmap.cc	/^Bitmap::Print() const$/;"	f	class:Bitmap
Print	machine/stats.cc	/^Statistics::Print()$/;"	f	class:Statistics
Print	threads/main.cc	/^Print(char *name)$/;"	f
Print	threads/scheduler.cc	/^Scheduler::Print()$/;"	f	class:Scheduler
Print	threads/thread.h	/^    void Print()$/;"	f	class:Thread
PrintHeader	network/post.cc	/^PrintHeader(PacketHeader pktHdr, MailHeader mailHdr)$/;"	f	file:
PrintPending	machine/interrupt.cc	/^PrintPending (PendingInterrupt *pending)$/;"	f	file:
PrintSector	machine/disk.cc	/^PrintSector (bool writing, int sector, char *data)$/;"	f	file:
Put	network/post.cc	/^MailBox::Put(PacketHeader pktHdr, MailHeader mailHdr, char *data)$/;"	f	class:MailBox
PutChar	machine/console.cc	/^ConsoleOutput::PutChar(char ch)$/;"	f	class:ConsoleOutput
PutChar	userprog/synchconsole.cc	/^SynchConsoleOutput::PutChar(char ch)$/;"	f	class:SynchConsoleOutput
PutFileDescriptor	filesys/filesys.cc	/^FileSystem::PutFileDescriptor(OpenFile *fileDesc)$/;"	f	class:FileSystem
R31	machine/mipssim.h	97;"	d
RD	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA };$/;"	e	enum:RegType
READY	threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
REF_ALIGN_MIDDLE	astyle/src/astyle.h	/^	REF_ALIGN_MIDDLE = PTR_ALIGN_MIDDLE,$/;"	e	enum:astyle::ReferenceAlign
REF_ALIGN_NAME	astyle/src/astyle.h	/^	REF_ALIGN_NAME = PTR_ALIGN_NAME,$/;"	e	enum:astyle::ReferenceAlign
REF_ALIGN_NONE	astyle/src/astyle.h	/^	REF_ALIGN_NONE = PTR_ALIGN_NONE,$/;"	e	enum:astyle::ReferenceAlign
REF_ALIGN_TYPE	astyle/src/astyle.h	/^	REF_ALIGN_TYPE = PTR_ALIGN_TYPE,$/;"	e	enum:astyle::ReferenceAlign
REF_SAME_AS_PTR	astyle/src/astyle.h	/^	REF_SAME_AS_PTR$/;"	e	enum:astyle::ReferenceAlign
RFMT	machine/mipssim.h	110;"	d
RM	build.cygwin/Makefile	/^RM = rm$/;"	m
RM	build.linux/Makefile	/^RM = \/bin\/rm$/;"	m
RM	build.macosx/Makefile	/^RM = \/bin\/rm$/;"	m
RS	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA };$/;"	e	enum:RegType
RT	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA };$/;"	e	enum:RegType
RUNNING	threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
RUN_IN_MODE	astyle/src/astyle.h	/^	RUN_IN_MODE$/;"	e	enum:astyle::BracketMode
RaiseException	machine/machine.cc	/^Machine::RaiseException(ExceptionType which, int badVAddr)$/;"	f	class:Machine
RandomInit	lib/sysdep.cc	/^RandomInit(unsigned seed)$/;"	f
RandomNumber	lib/sysdep.cc	/^RandomNumber()$/;"	f
ReHash	lib/hash.cc	/^HashTable<Key,T>::ReHash()$/;"	f	class:HashTable
Read	filesys/filesys.cc	/^FileSystem::Read(char *buf, int size, OpenFileId id)$/;"	f	class:FileSystem
Read	filesys/openfile.cc	/^OpenFile::Read(char *into, int numBytes)$/;"	f	class:OpenFile
Read	filesys/openfile.h	/^    int Read(char *into, int numBytes)$/;"	f	class:OpenFile
Read	lib/sysdep.cc	/^Read(int fd, char *buffer, int nBytes)$/;"	f
Read	test/start.S	/^Read:$/;"	l
ReadAt	filesys/openfile.cc	/^OpenFile::ReadAt(char *into, int numBytes, int position)$/;"	f	class:OpenFile
ReadAt	filesys/openfile.h	/^    int ReadAt(char *into, int numBytes, int position)$/;"	f	class:OpenFile
ReadFromSocket	lib/sysdep.cc	/^ReadFromSocket(int sockID, char *buffer, int packetSize)$/;"	f
ReadMem	machine/translate.cc	/^Machine::ReadMem(int addr, int size, int *value)$/;"	f	class:Machine
ReadOnlyException	machine/machine.h	/^                     ReadOnlyException,     \/\/ Write attempted to page marked$/;"	e	enum:ExceptionType
ReadPartial	lib/sysdep.cc	/^ReadPartial(int fd, char *buffer, int nBytes)$/;"	f
ReadRegister	machine/machine.cc	/^Machine::ReadRegister(int num)$/;"	f	class:Machine
ReadRequest	machine/disk.cc	/^Disk::ReadRequest(int sectorNumber, char* data)$/;"	f	class:Disk
ReadSector	filesys/synchdisk.cc	/^SynchDisk::ReadSector(int sectorNumber, char* data)$/;"	f	class:SynchDisk
ReadyToRun	threads/scheduler.cc	/^Scheduler::ReadyToRun (Thread *thread)$/;"	f	class:Scheduler
Receive	machine/network.cc	/^NetworkInput::Receive(char* data)$/;"	f	class:NetworkInput
Receive	network/post.cc	/^PostOfficeInput::Receive(int box, PacketHeader *pktHdr,$/;"	f	class:PostOfficeInput
ReferenceAlign	astyle/src/astyle.h	/^enum ReferenceAlign$/;"	g	namespace:astyle
RegType	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA };$/;"	g
Release	threads/synch.cc	/^void Lock::Release()$/;"	f	class:Lock
Remove	filesys/directory.cc	/^Directory::Remove(char *name)$/;"	f	class:Directory
Remove	filesys/filesys.cc	/^FileSystem::Remove(char *name)$/;"	f	class:FileSystem
Remove	filesys/filesys.h	/^    bool Remove(char *name)$/;"	f	class:FileSystem
Remove	lib/hash.cc	/^HashTable<Key,T>::Remove(Key key)$/;"	f	class:HashTable
Remove	lib/list.cc	/^List<T>::Remove(T item)$/;"	f	class:List
Remove	test/start.S	/^Remove:$/;"	l
RemoveFront	lib/list.cc	/^List<T>::RemoveFront()$/;"	f	class:List
RemoveFront	threads/synchlist.cc	/^SynchList<T>::RemoveFront()$/;"	f	class:SynchList
ResizeRatio	lib/hash.cc	/^const int ResizeRatio = 3;	\/\/ when do we grow the hash table?$/;"	v
RestoreState	userprog/addrspace.cc	/^void AddrSpace::RestoreState()$/;"	f	class:AddrSpace
RestoreUserState	threads/thread.cc	/^Thread::RestoreUserState()$/;"	f	class:Thread
RetAddrReg	machine/machine.h	65;"	d
RootDirectoryName	filesys/filesys.cc	/^const char *RootDirectoryName = "\/";$/;"	v
RotationTime	machine/stats.h	/^const int RotationTime = 500; 	\/\/ time disk takes to rotate one sector$/;"	v
Run	machine/mipssim.cc	/^Machine::Run()$/;"	f	class:Machine
Run	threads/scheduler.cc	/^Scheduler::Run (Thread *nextThread, bool finishing)$/;"	f	class:Scheduler
Russian	astyle/src/ASLocalizer.cpp	/^Russian::Russian()	\/\/ русский$/;"	f	class:astyle::Russian
Russian	astyle/src/ASLocalizer.h	/^class Russian : public Translation$/;"	c	namespace:astyle
S0	threads/switch.h	235;"	d
S0	threads/switch.h	30;"	d
S0	threads/switch.h	99;"	d
S1	threads/switch.h	100;"	d
S1	threads/switch.h	236;"	d
S1	threads/switch.h	31;"	d
S10	threads/switch.h	109;"	d
S11	threads/switch.h	110;"	d
S12	threads/switch.h	111;"	d
S13	threads/switch.h	112;"	d
S14	threads/switch.h	113;"	d
S15	threads/switch.h	114;"	d
S2	threads/switch.h	101;"	d
S2	threads/switch.h	237;"	d
S2	threads/switch.h	32;"	d
S3	threads/switch.h	102;"	d
S3	threads/switch.h	238;"	d
S3	threads/switch.h	33;"	d
S4	threads/switch.h	103;"	d
S4	threads/switch.h	239;"	d
S4	threads/switch.h	34;"	d
S5	threads/switch.h	104;"	d
S5	threads/switch.h	240;"	d
S5	threads/switch.h	35;"	d
S6	threads/switch.h	105;"	d
S6	threads/switch.h	241;"	d
S6	threads/switch.h	36;"	d
S7	threads/switch.h	106;"	d
S7	threads/switch.h	37;"	d
S8	threads/switch.h	107;"	d
S9	threads/switch.h	108;"	d
SCHEDULER_H	threads/scheduler.h	10;"	d
SC_Add	userprog/syscall.h	37;"	d
SC_Close	userprog/syscall.h	31;"	d
SC_Create	userprog/syscall.h	25;"	d
SC_Exec	userprog/syscall.h	23;"	d
SC_ExecV	userprog/syscall.h	34;"	d
SC_Exit	userprog/syscall.h	22;"	d
SC_Halt	userprog/syscall.h	21;"	d
SC_Join	userprog/syscall.h	24;"	d
SC_MSG	userprog/syscall.h	38;"	d
SC_Open	userprog/syscall.h	27;"	d
SC_Read	userprog/syscall.h	28;"	d
SC_Remove	userprog/syscall.h	26;"	d
SC_Seek	userprog/syscall.h	30;"	d
SC_ThreadExit	userprog/syscall.h	35;"	d
SC_ThreadFork	userprog/syscall.h	32;"	d
SC_ThreadJoin	userprog/syscall.h	36;"	d
SC_ThreadYield	userprog/syscall.h	33;"	d
SC_Write	userprog/syscall.h	29;"	d
SHARP_TYPE	astyle/src/astyle.h	/^enum FileType { C_TYPE = 0, JAVA_TYPE = 1, SHARP_TYPE = 2 };$/;"	e	enum:astyle::FileType
SIGN_BIT	machine/mipssim.h	96;"	d
SINGLE_LINE_TYPE	astyle/src/astyle.h	/^	SINGLE_LINE_TYPE = 2048$/;"	e	enum:astyle::BracketType
SIZE	test/sort.c	23;"	d	file:
SP	threads/switch.h	161;"	d
SP	threads/switch.h	234;"	d
SP	threads/switch.h	29;"	d
SP	threads/switch.h	98;"	d
SPECIAL	machine/mipssim.h	105;"	d
SRC	astyle/build/clang/Makefile	/^SRC = astyle_main.cpp \\$/;"	m
SRC	astyle/build/gcc/Makefile	/^SRC = astyle_main.cpp \\$/;"	m
SRC	astyle/build/intel/Makefile	/^SRC = astyle_main.cpp \\$/;"	m
STACK_FENCEPOST	threads/thread.cc	/^const int STACK_FENCEPOST = 0xdedbeef;$/;"	v
STATS_H	machine/stats.h	12;"	d
STDCALL	astyle/src/astyle_main.h	95;"	d
STROUSTRUP_MODE	astyle/src/astyle.h	/^	STROUSTRUP_MODE,$/;"	e	enum:astyle::BracketMode
STRUCT_TYPE	astyle/src/astyle.h	/^	STRUCT_TYPE = 4,			\/\/ also a DEFINITION_TYPE$/;"	e	enum:astyle::BracketType
STYLE_1TBS	astyle/src/astyle.h	/^	STYLE_1TBS,$/;"	e	enum:astyle::FormatStyle
STYLE_ALLMAN	astyle/src/astyle.h	/^	STYLE_ALLMAN,$/;"	e	enum:astyle::FormatStyle
STYLE_BANNER	astyle/src/astyle.h	/^	STYLE_BANNER,$/;"	e	enum:astyle::FormatStyle
STYLE_GNU	astyle/src/astyle.h	/^	STYLE_GNU,$/;"	e	enum:astyle::FormatStyle
STYLE_GOOGLE	astyle/src/astyle.h	/^	STYLE_GOOGLE,$/;"	e	enum:astyle::FormatStyle
STYLE_HORSTMANN	astyle/src/astyle.h	/^	STYLE_HORSTMANN,$/;"	e	enum:astyle::FormatStyle
STYLE_JAVA	astyle/src/astyle.h	/^	STYLE_JAVA,$/;"	e	enum:astyle::FormatStyle
STYLE_KR	astyle/src/astyle.h	/^	STYLE_KR,$/;"	e	enum:astyle::FormatStyle
STYLE_LINUX	astyle/src/astyle.h	/^	STYLE_LINUX,$/;"	e	enum:astyle::FormatStyle
STYLE_LISP	astyle/src/astyle.h	/^	STYLE_LISP$/;"	e	enum:astyle::FormatStyle
STYLE_NONE	astyle/src/astyle.h	/^	STYLE_NONE,$/;"	e	enum:astyle::FormatStyle
STYLE_PICO	astyle/src/astyle.h	/^	STYLE_PICO,$/;"	e	enum:astyle::FormatStyle
STYLE_STROUSTRUP	astyle/src/astyle.h	/^	STYLE_STROUSTRUP,$/;"	e	enum:astyle::FormatStyle
STYLE_VTK	astyle/src/astyle.h	/^	STYLE_VTK,$/;"	e	enum:astyle::FormatStyle
STYLE_WHITESMITH	astyle/src/astyle.h	/^	STYLE_WHITESMITH,$/;"	e	enum:astyle::FormatStyle
SUBLANG_CHINESE_MACAU	astyle/src/ASLocalizer.cpp	/^	const size_t SUBLANG_CHINESE_MACAU = 5;$/;"	v
SURROGATE_FIRST_VALUE	astyle/src/astyle_main.h	/^		enum { SURROGATE_FIRST_VALUE = 0x10000 };$/;"	e	enum:astyle::Utf8_16::__anon5
SURROGATE_LEAD_FIRST	astyle/src/astyle_main.h	/^		enum { SURROGATE_LEAD_FIRST = 0xD800 };$/;"	e	enum:astyle::Utf8_16::__anon1
SURROGATE_LEAD_LAST	astyle/src/astyle_main.h	/^		enum { SURROGATE_LEAD_LAST = 0xDBFF };$/;"	e	enum:astyle::Utf8_16::__anon2
SURROGATE_TRAIL_FIRST	astyle/src/astyle_main.h	/^		enum { SURROGATE_TRAIL_FIRST = 0xDC00 };$/;"	e	enum:astyle::Utf8_16::__anon3
SURROGATE_TRAIL_LAST	astyle/src/astyle_main.h	/^		enum { SURROGATE_TRAIL_LAST = 0xDFFF };$/;"	e	enum:astyle::Utf8_16::__anon4
SWITCH	threads/switch.S	/^SWITCH$/;"	l
SWITCH	threads/switch.S	/^SWITCH:$/;"	l
SWITCH_H	threads/switch.h	19;"	d
SYNCHCONSOLE_H	userprog/synchconsole.h	12;"	d
SYNCHDISK_H	filesys/synchdisk.h	12;"	d
SYNCHLIST_H	threads/synchlist.h	11;"	d
SYNCH_H	threads/synch.h	18;"	d
SYSCALLS_H	userprog/syscall.h	14;"	d
SYSCONF_PATH	astyle/build/clang/Makefile	/^SYSCONF_PATH=$(prefix)\/share\/doc\/astyle$/;"	m
SYSCONF_PATH	astyle/build/gcc/Makefile	/^SYSCONF_PATH=$(prefix)\/share\/doc\/astyle$/;"	m
SYSCONF_PATH	astyle/build/intel/Makefile	/^SYSCONF_PATH=$(prefix)\/share\/doc\/astyle$/;"	m
SYSCONF_PATH_OLD	astyle/build/clang/Makefile	/^SYSCONF_PATH_OLD=$(prefix)\/share\/astyle$/;"	m
SYSCONF_PATH_OLD	astyle/build/gcc/Makefile	/^SYSCONF_PATH_OLD=$(prefix)\/share\/astyle$/;"	m
SYSCONF_PATH_OLD	astyle/build/intel/Makefile	/^SYSCONF_PATH_OLD=$(prefix)\/share\/astyle$/;"	m
SYSDEP_H	lib/sysdep.h	12;"	d
S_OFILES	build.cygwin/Makefile	/^S_OFILES = switch.o$/;"	m
S_OFILES	build.linux/Makefile	/^S_OFILES = switch.o$/;"	m
S_OFILES	build.macosx/Makefile	/^S_OFILES = switch.o$/;"	m
SanityCheck	lib/hash.cc	/^HashTable<Key,T>::SanityCheck() const$/;"	f	class:HashTable
SanityCheck	lib/list.cc	/^List<T>::SanityCheck() const$/;"	f	class:List
SanityCheck	lib/list.cc	/^SortedList<T>::SanityCheck() const$/;"	f	class:SortedList
SaveState	userprog/addrspace.cc	/^void AddrSpace::SaveState()$/;"	f	class:AddrSpace
SaveUserState	threads/thread.cc	/^Thread::SaveUserState()$/;"	f	class:Thread
Schedule	machine/interrupt.cc	/^Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)$/;"	f	class:Interrupt
Scheduler	threads/scheduler.cc	/^Scheduler::Scheduler()$/;"	f	class:Scheduler
Scheduler	threads/scheduler.h	/^class Scheduler$/;"	c
SectorSize	machine/disk.h	/^const int SectorSize = 128;		\/\/ number of bytes per disk sector$/;"	v
SectorsPerTrack	machine/disk.h	/^const int SectorsPerTrack  = 32 * 512;	\/\/ number of sectors per disk track$/;"	v
Seek	filesys/openfile.cc	/^OpenFile::Seek(int position)$/;"	f	class:OpenFile
Seek	test/start.S	/^Seek:$/;"	l
SeekTime	machine/stats.h	/^const int SeekTime =	 500;  	\/\/ time disk takes to seek past one track$/;"	v
Segment	userprog/noff.h	/^} Segment;$/;"	t	typeref:struct:segment
SelfTest	lib/bitmap.cc	/^Bitmap::SelfTest()$/;"	f	class:Bitmap
SelfTest	lib/hash.cc	/^HashTable<Key,T>::SelfTest(T *p, int numEntries)$/;"	f	class:HashTable
SelfTest	lib/list.cc	/^List<T>::SelfTest(T *p, int numEntries)$/;"	f	class:List
SelfTest	lib/list.cc	/^SortedList<T>::SelfTest(T *p, int numEntries)$/;"	f	class:SortedList
SelfTest	threads/synch.cc	/^Semaphore::SelfTest()$/;"	f	class:Semaphore
SelfTest	threads/synchlist.cc	/^SynchList<T>::SelfTest(T val)$/;"	f	class:SynchList
SelfTest	threads/thread.cc	/^Thread::SelfTest()$/;"	f	class:Thread
SelfTestHelper	threads/synch.cc	/^SelfTestHelper (Semaphore *pong)$/;"	f	file:
SelfTestHelper	threads/synchlist.cc	/^SynchList<T>::SelfTestHelper (void* data)$/;"	f	class:SynchList
Semaphore	threads/synch.cc	/^Semaphore::Semaphore(char* debugName, int initialValue)$/;"	f	class:Semaphore
Semaphore	threads/synch.h	/^class Semaphore$/;"	c
Send	machine/network.cc	/^NetworkOutput::Send(PacketHeader hdr, char* data)$/;"	f	class:NetworkOutput
Send	network/post.cc	/^PostOfficeOutput::Send(PacketHeader pktHdr, MailHeader mailHdr, char* data)$/;"	f	class:PostOfficeOutput
SendToSocket	lib/sysdep.cc	/^SendToSocket(int sockID, char *buffer, int packetSize, char *toName)$/;"	f
SetInterrupt	machine/timer.cc	/^Timer::SetInterrupt()$/;"	f	class:Timer
SetLevel	machine/interrupt.cc	/^Interrupt::SetLevel(IntStatus now)$/;"	f	class:Interrupt
ShortToHost	machine/translate.cc	/^ShortToHost(unsigned short shortword)$/;"	f
ShortToMachine	machine/translate.cc	/^ShortToMachine(unsigned short shortword)$/;"	f
Signal	threads/synch.cc	/^void Condition::Signal(Lock* conditionLock)$/;"	f	class:Condition
SimpleThread	threads/thread.cc	/^SimpleThread(int which)$/;"	f	file:
Sleep	threads/thread.cc	/^Thread::Sleep (bool finishing)$/;"	f	class:Thread
SortedList	lib/list.h	/^    SortedList(int (*comp)(T x, T y)) : List<T>()$/;"	f	class:SortedList
SortedList	lib/list.h	/^class SortedList : public List<T>$/;"	c
SpaceId	userprog/syscall.h	/^typedef int SpaceId;$/;"	t
Spanish	astyle/src/ASLocalizer.cpp	/^Spanish::Spanish()	\/\/ Español$/;"	f	class:astyle::Spanish
Spanish	astyle/src/ASLocalizer.h	/^class Spanish : public Translation$/;"	c	namespace:astyle
StackAllocate	threads/thread.cc	/^Thread::StackAllocate (VoidFunctionPtr func, void *arg)$/;"	f	class:Thread
StackReg	machine/machine.h	64;"	d
StackSize	threads/thread.h	/^const int StackSize = (8 * 1024);	\/\/ in words$/;"	v
StartupLR	threads/switch.h	221;"	d
StartupPC	threads/switch.h	121;"	d
StartupPC	threads/switch.h	155;"	d
StartupPC	threads/switch.h	257;"	d
StartupPC	threads/switch.h	54;"	d
StartupPC	threads/switch.h	85;"	d
StartupPCState	threads/switch.h	127;"	d
StartupPCState	threads/switch.h	150;"	d
StartupPCState	threads/switch.h	213;"	d
StartupPCState	threads/switch.h	264;"	d
StartupPCState	threads/switch.h	61;"	d
StartupPCState	threads/switch.h	91;"	d
Statistics	machine/stats.cc	/^Statistics::Statistics()$/;"	f	class:Statistics
Statistics	machine/stats.h	/^class Statistics$/;"	c
SwapHeader	userprog/addrspace.cc	/^SwapHeader (NoffHeader *noffH)$/;"	f	file:
Swedish	astyle/src/ASLocalizer.cpp	/^Swedish::Swedish()	\/\/ Svenska$/;"	f	class:astyle::Swedish
Swedish	astyle/src/ASLocalizer.h	/^class Swedish : public Translation$/;"	c	namespace:astyle
SynchConsoleInput	userprog/synchconsole.cc	/^SynchConsoleInput::SynchConsoleInput(char *inputFile)$/;"	f	class:SynchConsoleInput
SynchConsoleInput	userprog/synchconsole.h	/^class SynchConsoleInput : public CallBackObj$/;"	c
SynchConsoleOutput	userprog/synchconsole.cc	/^SynchConsoleOutput::SynchConsoleOutput(char *outputFile)$/;"	f	class:SynchConsoleOutput
SynchConsoleOutput	userprog/synchconsole.h	/^class SynchConsoleOutput : public CallBackObj$/;"	c
SynchDisk	filesys/synchdisk.cc	/^SynchDisk::SynchDisk()$/;"	f	class:SynchDisk
SynchDisk	filesys/synchdisk.h	/^class SynchDisk : public CallBackObj$/;"	c
SynchList	threads/synchlist.cc	/^SynchList<T>::SynchList()$/;"	f	class:SynchList
SynchList	threads/synchlist.h	/^class SynchList$/;"	c
SysAdd	userprog/ksyscall.h	/^int SysAdd(int op1, int op2)$/;"	f
SysClose	userprog/ksyscall.h	/^int SysClose(OpenFileId id)$/;"	f
SysConsoleInput	userprog/syscall.h	111;"	d
SysConsoleOutput	userprog/syscall.h	112;"	d
SysCreate	userprog/ksyscall.h	/^int SysCreate(char *filename, int size)$/;"	f
SysHalt	userprog/ksyscall.h	/^void SysHalt()$/;"	f
SysOpen	userprog/ksyscall.h	/^OpenFileId SysOpen(char *filename)$/;"	f
SysRead	userprog/ksyscall.h	/^int SysRead(char *buf, int size, OpenFileId id)$/;"	f
SysWrite	userprog/ksyscall.h	/^int SysWrite(char *buf, int size, OpenFileId id)$/;"	f
SyscallException	machine/machine.h	/^                     SyscallException,      \/\/ A program executed a system call.$/;"	e	enum:ExceptionType
SystemMode	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
SystemTick	machine/stats.h	/^const int SystemTick =	  10; 	\/\/ advance each time interrupts are enabled$/;"	v
THREAD_C	build.cygwin/Makefile	/^THREAD_C = ..\/threads\/alarm.cc\\$/;"	m
THREAD_C	build.linux/Makefile	/^THREAD_C = ..\/threads\/alarm.cc\\$/;"	m
THREAD_C	build.macosx/Makefile	/^THREAD_C = ..\/threads\/alarm.cc\\$/;"	m
THREAD_H	build.cygwin/Makefile	/^THREAD_H = ..\/threads\/alarm.h\\$/;"	m
THREAD_H	build.linux/Makefile	/^THREAD_H = ..\/threads\/alarm.h\\$/;"	m
THREAD_H	build.macosx/Makefile	/^THREAD_H = ..\/threads\/alarm.h\\$/;"	m
THREAD_H	threads/thread.h	38;"	d
THREAD_O	build.cygwin/Makefile	/^THREAD_O = alarm.o kernel.o main.o scheduler.o synch.o thread.o$/;"	m
THREAD_O	build.linux/Makefile	/^THREAD_O = alarm.o kernel.o main.o scheduler.o synch.o thread.o$/;"	m
THREAD_O	build.macosx/Makefile	/^THREAD_O = alarm.o kernel.o main.o scheduler.o synch.o thread.o$/;"	m
THREAD_S	build.cygwin/Makefile	/^THREAD_S = ..\/threads\/switch.s$/;"	m
THREAD_S	build.linux/Makefile	/^THREAD_S = ..\/threads\/switch.s$/;"	m
THREAD_S	build.macosx/Makefile	/^THREAD_S = ..\/threads\/switch.s$/;"	m
TIMER_H	machine/timer.h	21;"	d
TLBSize	machine/machine.h	/^const int TLBSize = 4;			\/\/ if there is a TLB, make it small$/;"	v
TLB_H	machine/translate.h	19;"	d
TOC	threads/switch.h	205;"	d
TRUE	lib/utility.h	16;"	d
Tell	lib/sysdep.cc	/^Tell(int fd)$/;"	f
Test	lib/bitmap.cc	/^Bitmap::Test(int which) const$/;"	f	class:Bitmap
Thread	threads/thread.cc	/^Thread::Thread(char* threadName, int threadID)$/;"	f	class:Thread
Thread	threads/thread.h	/^class Thread$/;"	c
ThreadBegin	threads/thread.cc	/^static void ThreadBegin()$/;"	f	file:
ThreadExit	test/start.S	/^ThreadExit:$/;"	l
ThreadFinish	threads/thread.cc	/^static void ThreadFinish()$/;"	f	file:
ThreadFork	test/start.S	/^ThreadFork:$/;"	l
ThreadId	userprog/syscall.h	/^typedef int ThreadId;$/;"	t
ThreadJoin	test/start.S	/^ThreadJoin:$/;"	l
ThreadPrint	threads/thread.cc	/^void ThreadPrint(Thread *t)$/;"	f
ThreadRoot	threads/switch.S	/^ThreadRoot$/;"	l
ThreadRoot	threads/switch.S	/^ThreadRoot:$/;"	l
ThreadSelfTest	threads/kernel.cc	/^Kernel::ThreadSelfTest()$/;"	f	class:Kernel
ThreadStatus	threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	g
ThreadYield	test/start.S	/^ThreadYield:$/;"	l
TimeToSeek	machine/disk.cc	/^Disk::TimeToSeek(int newSector, int *rotation)$/;"	f	class:Disk
Timer	machine/timer.cc	/^Timer::Timer(bool doRandom, CallBackObj *toCall)$/;"	f	class:Timer
Timer	machine/timer.h	/^class Timer : public CallBackObj$/;"	c
TimerInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt,$/;"	e	enum:IntType
TimerTicks	machine/stats.h	/^const int TimerTicks = 	 100;  	\/\/ (average) time between timer interrupts$/;"	v
TransferSize	threads/main.cc	/^static const int TransferSize = 128;$/;"	v	file:
Translate	machine/translate.cc	/^Machine::Translate(int virtAddr, int* physAddr, int size, bool writing)$/;"	f	class:Machine
Translate	userprog/addrspace.cc	/^AddrSpace::Translate(unsigned int vaddr, unsigned int *paddr, int isReadWrite)$/;"	f	class:AddrSpace
Translation	astyle/src/ASLocalizer.h	/^		Translation() {}$/;"	f	class:astyle::Translation
Translation	astyle/src/ASLocalizer.h	/^class Translation$/;"	c	namespace:astyle
TranslationEntry	machine/translate.h	/^class TranslationEntry$/;"	c
TypeToReg	machine/mipssim.cc	/^TypeToReg(RegType reg, Instruction *instr)$/;"	f	file:
UDelay	lib/sysdep.cc	/^UDelay(unsigned int useconds)$/;"	f
UNICODE	astyle/src/astyle_main.cpp	61;"	d	file:
UNIMPLEMENTED	lib/debug.h	91;"	d
USERPROG_C	build.cygwin/Makefile	/^USERPROG_C = ..\/userprog\/addrspace.cc\\$/;"	m
USERPROG_C	build.linux/Makefile	/^USERPROG_C = ..\/userprog\/addrspace.cc\\$/;"	m
USERPROG_C	build.macosx/Makefile	/^USERPROG_C = ..\/userprog\/addrspace.cc\\$/;"	m
USERPROG_H	build.cygwin/Makefile	/^USERPROG_H = ..\/userprog\/addrspace.h\\$/;"	m
USERPROG_H	build.linux/Makefile	/^USERPROG_H = ..\/userprog\/addrspace.h\\$/;"	m
USERPROG_H	build.macosx/Makefile	/^USERPROG_H = ..\/userprog\/addrspace.h\\$/;"	m
USERPROG_O	build.cygwin/Makefile	/^USERPROG_O = addrspace.o exception.o synchconsole.o$/;"	m
USERPROG_O	build.linux/Makefile	/^USERPROG_O = addrspace.o exception.o synchconsole.o$/;"	m
USERPROG_O	build.macosx/Makefile	/^USERPROG_O = addrspace.o exception.o synchconsole.o$/;"	m
UTF_16BE	astyle/src/astyle.h	/^	UTF_16BE,$/;"	e	enum:astyle::FileEncoding
UTF_16LE	astyle/src/astyle.h	/^	UTF_16LE,     \/\/ Windows default$/;"	e	enum:astyle::FileEncoding
UTF_32BE	astyle/src/astyle.h	/^	UTF_32BE,$/;"	e	enum:astyle::FileEncoding
UTF_32LE	astyle/src/astyle.h	/^	UTF_32LE$/;"	e	enum:astyle::FileEncoding
UTILITY_H	lib/utility.h	9;"	d
Ukrainian	astyle/src/ASLocalizer.cpp	/^Ukrainian::Ukrainian()	\/\/ Український$/;"	f	class:astyle::Ukrainian
Ukrainian	astyle/src/ASLocalizer.h	/^class Ukrainian : public Translation$/;"	c	namespace:astyle
Unlink	lib/sysdep.cc	/^Unlink(char *name)$/;"	f
UpdateLast	machine/disk.cc	/^Disk::UpdateLast(int newSector)$/;"	f	class:Disk
UserMode	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
UserStackSize	userprog/addrspace.h	19;"	d
UserTick	machine/stats.h	/^const int UserTick = 	   1;	\/\/ advance for each user-level instruction$/;"	v
Utf16LengthFromUtf8	astyle/src/astyle_main.cpp	/^size_t Utf8_16::Utf16LengthFromUtf8(const char* utf8In, size_t len) const$/;"	f	class:astyle::Utf8_16
Utf16ToUtf8	astyle/src/astyle_main.cpp	/^size_t Utf8_16::Utf16ToUtf8(char* utf16In, size_t inLen, bool isBigEndian,$/;"	f	class:astyle::Utf8_16
Utf8LengthFromUtf16	astyle/src/astyle_main.cpp	/^size_t Utf8_16::Utf8LengthFromUtf16(const char* utf16In, size_t inLen, bool isBigEndian) const$/;"	f	class:astyle::Utf8_16
Utf8ToUtf16	astyle/src/astyle_main.cpp	/^size_t Utf8_16::Utf8ToUtf16(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const$/;"	f	class:astyle::Utf8_16
Utf8_16	astyle/src/astyle_main.h	/^class Utf8_16$/;"	c	namespace:astyle
V	threads/synch.cc	/^Semaphore::V()$/;"	f	class:Semaphore
VoidFunctionPtr	lib/utility.h	/^typedef void (*VoidFunctionPtr)(void *arg);$/;"	t
VoidNoArgFunctionPtr	lib/utility.h	/^typedef void (*VoidNoArgFunctionPtr)();$/;"	t
Wait	threads/synch.cc	/^void Condition::Wait(Lock* conditionLock)$/;"	f	class:Condition
WhenDoneLR	threads/switch.h	220;"	d
WhenDonePC	threads/switch.h	120;"	d
WhenDonePC	threads/switch.h	154;"	d
WhenDonePC	threads/switch.h	256;"	d
WhenDonePC	threads/switch.h	53;"	d
WhenDonePC	threads/switch.h	84;"	d
WhenDonePCState	threads/switch.h	126;"	d
WhenDonePCState	threads/switch.h	149;"	d
WhenDonePCState	threads/switch.h	212;"	d
WhenDonePCState	threads/switch.h	263;"	d
WhenDonePCState	threads/switch.h	60;"	d
WhenDonePCState	threads/switch.h	90;"	d
WinLangCode	astyle/src/ASLocalizer.cpp	/^struct WinLangCode$/;"	s	namespace:astyle	file:
WordToHost	machine/translate.cc	/^WordToHost(unsigned int word)$/;"	f
WordToMachine	machine/translate.cc	/^WordToMachine(unsigned int word)$/;"	f
Write	filesys/filesys.cc	/^FileSystem::Write(char *buf, int size, OpenFileId id)$/;"	f	class:FileSystem
Write	filesys/openfile.cc	/^OpenFile::Write(char *into, int numBytes)$/;"	f	class:OpenFile
Write	filesys/openfile.h	/^    int Write(char *from, int numBytes)$/;"	f	class:OpenFile
Write	test/start.S	/^Write:$/;"	l
WriteAt	filesys/openfile.cc	/^OpenFile::WriteAt(char *from, int numBytes, int position)$/;"	f	class:OpenFile
WriteAt	filesys/openfile.h	/^    int WriteAt(char *from, int numBytes, int position)$/;"	f	class:OpenFile
WriteBack	filesys/directory.cc	/^Directory::WriteBack(OpenFile *file)$/;"	f	class:Directory
WriteBack	filesys/filehdr.cc	/^FileHeader::WriteBack(int sector)$/;"	f	class:FileHeader
WriteBack	filesys/pbitmap.cc	/^PersistentBitmap::WriteBack(OpenFile *file)$/;"	f	class:PersistentBitmap
WriteFile	lib/sysdep.cc	/^WriteFile(int fd, char *buffer, int nBytes)$/;"	f
WriteMem	machine/translate.cc	/^Machine::WriteMem(int addr, int size, int value)$/;"	f	class:Machine
WriteRegister	machine/machine.cc	/^Machine::WriteRegister(int num, int value)$/;"	f	class:Machine
WriteRequest	machine/disk.cc	/^Disk::WriteRequest(int sectorNumber, char* data)$/;"	f	class:Disk
WriteSector	filesys/synchdisk.cc	/^SynchDisk::WriteSector(int sectorNumber, char* data)$/;"	f	class:SynchDisk
Yield	threads/thread.cc	/^Thread::Yield ()$/;"	f	class:Thread
YieldOnReturn	machine/interrupt.cc	/^Interrupt::YieldOnReturn()$/;"	f	class:Interrupt
ZOMBIE	threads/thread.h	/^enum ThreadStatus { JUST_CREATED, RUNNING, READY, BLOCKED, ZOMBIE };$/;"	e	enum:ThreadStatus
_	astyle/src/astyle_main.h	64;"	d
_AS_EXCEPT	astyle/src/ASResource.cpp	/^const string ASResource::_AS_EXCEPT = string("__except");$/;"	m	class:astyle::ASResource	file:
_AS_EXCEPT	astyle/src/astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource
_AS_FINALLY	astyle/src/ASResource.cpp	/^const string ASResource::_AS_FINALLY = string("__finally");$/;"	m	class:astyle::ASResource	file:
_AS_FINALLY	astyle/src/astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource
_AS_TRY	astyle/src/ASResource.cpp	/^const string ASResource::_AS_TRY = string("__try");$/;"	m	class:astyle::ASResource	file:
_AS_TRY	astyle/src/astyle.h	/^		static const string _AS_TRY, _AS_FINALLY, _AS_EXCEPT;$/;"	m	class:astyle::ASResource
_CRT_glob	astyle/src/astyle_main.cpp	/^	int _CRT_glob = 0;$/;"	v
_EAX	threads/switch.h	135;"	d
_EBP	threads/switch.h	139;"	d
_EBX	threads/switch.h	136;"	d
_ECX	threads/switch.h	137;"	d
_EDI	threads/switch.h	141;"	d
_EDX	threads/switch.h	138;"	d
_ESI	threads/switch.h	140;"	d
_ESP	threads/switch.h	134;"	d
_PC	threads/switch.h	142;"	d
_SWITCH	threads/switch.S	/^_SWITCH:		$/;"	l
_SWITCH	threads/switch.S	/^_SWITCH:$/;"	l
_ThreadRoot	threads/switch.S	/^_ThreadRoot:	$/;"	l
_ThreadRoot	threads/switch.S	/^_ThreadRoot:$/;"	l
__USERPROG_KSYSCALL_H__	userprog/ksyscall.h	12;"	d
__USE_STD_IOSTREAM	astyle/src/ASLocalizer.cpp	58;"	d	file:
__USE_STD_IOSTREAM	astyle/src/astyle.h	31;"	d
__main	test/start.S	/^__main:$/;"	l
__start	test/start.S	/^__start:$/;"	l
_err	astyle/src/astyle_main.cpp	/^	ostream* _err = &cerr;           \/\/ direct error messages to cerr$/;"	m	namespace:astyle	file:
a0	threads/switch.S	/^#define a0	$16	\/* (T)		argument registers	*\/$/;"	d
a0	threads/switch.S	/^#define a0      $4      \/* argument registers *\/$/;"	d
a1	threads/switch.S	/^#define a1	$17$/;"	d
a1	threads/switch.S	/^#define a1      $5$/;"	d
active	machine/disk.h	/^    bool active;     			\/\/ Is a disk operation in progress?$/;"	m	class:Disk
activeBeautifierStack	astyle/src/astyle.h	/^		vector<ASBeautifier*>* activeBeautifierStack;$/;"	m	class:astyle::ASBeautifier
activeBeautifierStackLengthStack	astyle/src/astyle.h	/^		vector<int>* activeBeautifierStackLengthStack;$/;"	m	class:astyle::ASBeautifier
addBracketsToStatement	astyle/src/ASFormatter.cpp	/^bool ASFormatter::addBracketsToStatement()$/;"	f	class:astyle::ASFormatter
addPair	astyle/src/ASLocalizer.cpp	/^void Translation::addPair(const string &english, const wstring &translated)$/;"	f	class:astyle::Translation
adjustChecksumIn	astyle/src/ASFormatter.cpp	/^bool ASFormatter::adjustChecksumIn(int adjustment)$/;"	f	class:astyle::ASFormatter
adjustComments	astyle/src/ASFormatter.cpp	/^void ASFormatter::adjustComments(void)$/;"	f	class:astyle::ASFormatter
adjustIndentCountForBreakElseIfComments	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::adjustIndentCountForBreakElseIfComments() const$/;"	f	class:astyle::ASBeautifier
adjustParsedLineIndentation	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::adjustParsedLineIndentation(size_t iPrelim, bool isInExtraHeaderIndent)$/;"	f	class:astyle::ASBeautifier
ai	threads/switch.S	/^#define ai	$25	\/* (T)		argument information	*\/$/;"	d
alarm	threads/kernel.h	/^    Alarm *alarm;		\/\/ the software alarm clock$/;"	m	class:Kernel
appendChar	astyle/src/ASFormatter.cpp	/^void ASFormatter::appendChar(char ch, bool canBreakLine)$/;"	f	class:astyle::ASFormatter
appendCharInsideComments	astyle/src/ASFormatter.cpp	/^void ASFormatter::appendCharInsideComments(void)$/;"	f	class:astyle::ASFormatter
appendCurrentChar	astyle/src/astyle.h	/^		void appendCurrentChar(bool canBreakLine = true) {$/;"	f	class:astyle::ASFormatter
appendOpeningBracket	astyle/src/astyle.h	/^		bool appendOpeningBracket;$/;"	m	class:astyle::ASFormatter
appendOperator	astyle/src/ASFormatter.cpp	/^void ASFormatter::appendOperator(const string &sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter
appendSequence	astyle/src/ASFormatter.cpp	/^void ASFormatter::appendSequence(const string &sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter
appendSpaceAfter	astyle/src/ASFormatter.cpp	/^void ASFormatter::appendSpaceAfter()$/;"	f	class:astyle::ASFormatter
appendSpacePad	astyle/src/ASFormatter.cpp	/^void ASFormatter::appendSpacePad()$/;"	f	class:astyle::ASFormatter
args	machine/mipssim.h	/^    RegType args[3];$/;"	m	struct:OpString
assignmentOperators	astyle/src/astyle.h	/^		vector<const string*>* assignmentOperators;$/;"	m	class:astyle::ASBeautifier
assignmentOperators	astyle/src/astyle.h	/^		vector<const string*>* assignmentOperators;$/;"	m	class:astyle::ASFormatter
astyle	astyle/src/ASBeautifier.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle/src/ASEnhancer.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle/src/ASFormatter.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle/src/ASLocalizer.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle/src/ASLocalizer.h	/^namespace astyle {$/;"	n
astyle	astyle/src/ASResource.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle/src/astyle.h	/^namespace astyle {$/;"	n
astyle	astyle/src/astyle_main.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle/src/astyle_main.h	/^namespace astyle {$/;"	n
attachClosingBracketMode	astyle/src/astyle.h	/^		bool attachClosingBracketMode;$/;"	m	class:astyle::ASFormatter
backslashEndsPrevLine	astyle/src/astyle.h	/^		bool backslashEndsPrevLine;$/;"	m	class:astyle::ASBeautifier
baseFileType	astyle/src/astyle.h	/^		int baseFileType;      \/\/ a value from enum FileType$/;"	m	class:astyle::ASBase
beautifierFileType	astyle/src/astyle.h	/^		int beautifierFileType;$/;"	m	class:astyle::ASBeautifier
beautify	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::beautify(const string &originalLine)$/;"	f	class:astyle::ASBeautifier
bindir	astyle/build/clang/Makefile	/^bindir = bin$/;"	m
bindir	astyle/build/gcc/Makefile	/^bindir = bin$/;"	m
bindir	astyle/build/intel/Makefile	/^bindir = bin$/;"	m
blah	test/segments.c	/^const int blah = 0xff;               \/* into .rdata segment                   *\/$/;"	v
blockCommentNoBeautify	astyle/src/astyle.h	/^		bool blockCommentNoBeautify;$/;"	m	class:astyle::ASBeautifier
blockCommentNoIndent	astyle/src/astyle.h	/^		bool blockCommentNoIndent;$/;"	m	class:astyle::ASBeautifier
blockIndent	astyle/src/astyle.h	/^		bool blockIndent;$/;"	m	class:astyle::ASBeautifier
blockParenDepthStack	astyle/src/astyle.h	/^		vector<int>* blockParenDepthStack;$/;"	m	class:astyle::ASBeautifier
blockStatementStack	astyle/src/astyle.h	/^		vector<bool>* blockStatementStack;$/;"	m	class:astyle::ASBeautifier
blockTabCount	astyle/src/astyle.h	/^		int  blockTabCount;$/;"	m	class:astyle::ASBeautifier
boxes	network/post.h	/^    MailBox *boxes;		\/\/ Table of mail boxes to hold incoming mail$/;"	m	class:PostOfficeInput
bracketBlockStateStack	astyle/src/astyle.h	/^		vector<bool>* bracketBlockStateStack;$/;"	m	class:astyle::ASBeautifier
bracketCount	astyle/src/astyle.h	/^		int  bracketCount;$/;"	m	class:astyle::ASEnhancer
bracketFormatMode	astyle/src/astyle.h	/^		BracketMode bracketFormatMode;$/;"	m	class:astyle::ASFormatter
bracketIndent	astyle/src/astyle.h	/^		bool bracketIndent;$/;"	m	class:astyle::ASBeautifier
bracketIndentVtk	astyle/src/astyle.h	/^		bool bracketIndentVtk;$/;"	m	class:astyle::ASBeautifier
bracketTypeStack	astyle/src/astyle.h	/^		vector<BracketType>* bracketTypeStack;$/;"	m	class:astyle::ASFormatter
breakCurrentOneLineBlock	astyle/src/astyle.h	/^		bool breakCurrentOneLineBlock;$/;"	m	class:astyle::ASFormatter
breakLine	astyle/src/ASFormatter.cpp	/^void ASFormatter::breakLine(bool isSplitLine \/*false*\/)$/;"	f	class:astyle::ASFormatter
bucket	lib/hash.h	/^    int bucket;			\/\/ current bucket we are in$/;"	m	class:HashIterator
bucketIter	lib/hash.h	/^    ListIterator<T> *bucketIter; \/\/ where we are in the bucket$/;"	m	class:HashIterator
buckets	lib/hash.h	/^    Bucket *buckets;		\/\/ the array of hash buckets$/;"	m	class:HashTable
buffer	astyle/src/astyle_main.h	/^		string buffer;          \/\/ current input line$/;"	m	class:astyle::ASStreamIterator
bufferInit	machine/disk.h	/^    int bufferInit;			\/\/ When the track buffer started$/;"	m	class:Disk
buildAssignmentOperators	astyle/src/ASResource.cpp	/^void ASResource::buildAssignmentOperators(vector<const string*>* assignmentOperators)$/;"	f	class:astyle::ASResource
buildCastOperators	astyle/src/ASResource.cpp	/^void ASResource::buildCastOperators(vector<const string*>* castOperators)$/;"	f	class:astyle::ASResource
buildHeaders	astyle/src/ASResource.cpp	/^void ASResource::buildHeaders(vector<const string*>* headers, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource
buildIndentableHeaders	astyle/src/ASResource.cpp	/^void ASResource::buildIndentableHeaders(vector<const string*>* indentableHeaders)$/;"	f	class:astyle::ASResource
buildIndentableMacros	astyle/src/ASResource.cpp	/^void ASResource::buildIndentableMacros(vector<const pair<const string, const string>* >* indentableMacros)$/;"	f	class:astyle::ASResource
buildLanguageVectors	astyle/src/ASFormatter.cpp	/^void ASFormatter::buildLanguageVectors()$/;"	f	class:astyle::ASFormatter
buildNonAssignmentOperators	astyle/src/ASResource.cpp	/^void ASResource::buildNonAssignmentOperators(vector<const string*>* nonAssignmentOperators)$/;"	f	class:astyle::ASResource
buildNonParenHeaders	astyle/src/ASResource.cpp	/^void ASResource::buildNonParenHeaders(vector<const string*>* nonParenHeaders, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource
buildOperators	astyle/src/ASResource.cpp	/^void ASResource::buildOperators(vector<const string*>* operators, int fileType)$/;"	f	class:astyle::ASResource
buildPreBlockStatements	astyle/src/ASResource.cpp	/^void ASResource::buildPreBlockStatements(vector<const string*>* preBlockStatements, int fileType)$/;"	f	class:astyle::ASResource
buildPreCommandHeaders	astyle/src/ASResource.cpp	/^void ASResource::buildPreCommandHeaders(vector<const string*>* preCommandHeaders, int fileType)$/;"	f	class:astyle::ASResource
buildPreDefinitionHeaders	astyle/src/ASResource.cpp	/^void ASResource::buildPreDefinitionHeaders(vector<const string*>* preDefinitionHeaders, int fileType)$/;"	f	class:astyle::ASResource
bypassBrowserOpen	astyle/src/astyle_main.h	/^		bool bypassBrowserOpen;             \/\/ don't open the browser on html options$/;"	m	class:astyle::ASConsole
callOnInterrupt	machine/interrupt.h	/^    CallBackObj *callOnInterrupt;\/\/ The object (in the hardware device$/;"	m	class:PendingInterrupt
callPeriodically	machine/timer.h	/^    CallBackObj *callPeriodically; \/\/ call this every TimerTicks time units$/;"	m	class:Timer
callWhenAvail	machine/console.h	/^    CallBackObj *callWhenAvail;		\/\/ Interrupt handler to call when$/;"	m	class:ConsoleInput
callWhenAvail	machine/network.h	/^    CallBackObj *callWhenAvail; \/\/ Interrupt handler, signalling packet has$/;"	m	class:NetworkInput
callWhenDone	machine/console.h	/^    CallBackObj *callWhenDone;		\/\/ Interrupt handler to call when$/;"	m	class:ConsoleOutput
callWhenDone	machine/disk.h	/^    CallBackObj *callWhenDone;		\/\/ Invoke when any disk request finishes$/;"	m	class:Disk
callWhenDone	machine/network.h	/^    CallBackObj *callWhenDone;  \/\/ Interrupt handler, signalling next packet$/;"	m	class:NetworkOutput
canonicalLang	astyle/src/ASLocalizer.cpp	/^	char canonicalLang[3];$/;"	m	struct:astyle::WinLangCode	file:
caseHeaderFollowsComments	astyle/src/astyle.h	/^		bool caseHeaderFollowsComments;$/;"	m	class:astyle::ASFormatter
caseIndent	astyle/src/astyle.h	/^		bool caseIndent;$/;"	m	class:astyle::ASBeautifier
caseIndent	astyle/src/astyle.h	/^		bool caseIndent;$/;"	m	class:astyle::ASEnhancer
castOperators	astyle/src/astyle.h	/^		vector<const string*>* castOperators;$/;"	m	class:astyle::ASFormatter
chanceToWork	machine/network.h	/^    double chanceToWork;	\/\/ Likelihood packet will be dropped$/;"	m	class:NetworkOutput
charNum	astyle/src/astyle.h	/^		int  charNum;$/;"	m	class:astyle::ASFormatter
checkForEmptyLine	astyle/src/astyle_main.h	/^		bool checkForEmptyLine;$/;"	m	class:astyle::ASStreamIterator
checkForHeaderFollowingComment	astyle/src/ASFormatter.cpp	/^const string* ASFormatter::checkForHeaderFollowingComment(const string &firstLine) const$/;"	f	class:astyle::ASFormatter
checkIfTemplateOpener	astyle/src/ASFormatter.cpp	/^void ASFormatter::checkIfTemplateOpener()$/;"	f	class:astyle::ASFormatter
checksumIn	astyle/src/astyle.h	/^		size_t checksumIn;$/;"	m	class:astyle::ASFormatter
checksumOut	astyle/src/astyle.h	/^		size_t checksumOut;$/;"	m	class:astyle::ASFormatter
classIndent	astyle/src/astyle.h	/^		bool classIndent;$/;"	m	class:astyle::ASBeautifier
classInitializerIndents	astyle/src/astyle.h	/^		int  classInitializerIndents;$/;"	m	class:astyle::ASBeautifier
clearFormattedLineSplitPoints	astyle/src/ASFormatter.cpp	/^void ASFormatter::clearFormattedLineSplitPoints()$/;"	f	class:astyle::ASFormatter
clearObjCMethodDefinitionAlignment	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::clearObjCMethodDefinitionAlignment()$/;"	f	class:astyle::ASBeautifier
code	userprog/noff.h	/^    Segment code;		\/* executable code segment *\/$/;"	m	struct:noffHeader
colonIndentObjCMethodDefinition	astyle/src/astyle.h	/^		int  colonIndentObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier
commentAndHeaderFollows	astyle/src/ASFormatter.cpp	/^bool ASFormatter::commentAndHeaderFollows()$/;"	f	class:astyle::ASFormatter
compare	lib/list.h	/^    int (*compare)(T x, T y);	\/\/ function for sorting list elements$/;"	m	class:SortedList
compareToInputBuffer	astyle/src/astyle_main.h	/^		bool compareToInputBuffer(const string &nextLine_) const$/;"	f	class:astyle::ASStreamIterator
computeChecksumIn	astyle/src/ASFormatter.cpp	/^bool ASFormatter::computeChecksumIn(const string &currentLine_)$/;"	f	class:astyle::ASFormatter
computeChecksumOut	astyle/src/ASFormatter.cpp	/^bool ASFormatter::computeChecksumOut(const string &beautifiedLine)$/;"	f	class:astyle::ASFormatter
computeObjCColonAlignment	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::computeObjCColonAlignment(string &line, int colonAlignPosition) const$/;"	f	class:astyle::ASBeautifier
computePreliminaryIndentation	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::computePreliminaryIndentation()$/;"	f	class:astyle::ASBeautifier
computePreprocessorIndent	astyle/src/ASBeautifier.cpp	/^pair<int, int> ASBeautifier::computePreprocessorIndent()$/;"	f	class:astyle::ASBeautifier
consoleIn	threads/kernel.h	/^    char *consoleIn;            \/\/ file to read console input from$/;"	m	class:Kernel
consoleInput	userprog/synchconsole.h	/^    ConsoleInput *consoleInput;	\/\/ the hardware keyboard$/;"	m	class:SynchConsoleInput
consoleOut	threads/kernel.h	/^    char *consoleOut;           \/\/ file to send console output to$/;"	m	class:Kernel
consoleOutput	userprog/synchconsole.h	/^    ConsoleOutput *consoleOutput;\/\/ the hardware display$/;"	m	class:SynchConsoleOutput
convertForceTabIndentToSpaces	astyle/src/ASEnhancer.cpp	/^void ASEnhancer::convertForceTabIndentToSpaces(string &line) const$/;"	f	class:astyle::ASEnhancer
convertLineEnds	astyle/src/astyle_main.cpp	/^void ASConsole::convertLineEnds(ostringstream &out, int lineEnd)$/;"	f	class:astyle::ASConsole
convertSpaceIndentToForceTab	astyle/src/ASEnhancer.cpp	/^void ASEnhancer::convertSpaceIndentToForceTab(string &line) const$/;"	f	class:astyle::ASEnhancer
convertTabToSpaces	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::convertTabToSpaces(int i, int tabIncrementIn) const$/;"	f	class:astyle::ASBeautifier
convertTabToSpaces	astyle/src/ASFormatter.cpp	/^void ASFormatter::convertTabToSpaces()$/;"	f	class:astyle::ASFormatter
convertToMultiByte	astyle/src/ASLocalizer.cpp	/^string Translation::convertToMultiByte(const wstring &wideStr) const$/;"	f	class:astyle::Translation
convertUtf16ToUtf8	astyle/src/astyle_main.cpp	/^char* ASLibrary::convertUtf16ToUtf8(const utf16_t* utf16In) const$/;"	f	class:astyle::ASLibrary
convertUtf8ToUtf16	astyle/src/astyle_main.cpp	/^utf16_t* ASLibrary::convertUtf8ToUtf16(const char* utf8In, fpAlloc fpMemoryAlloc) const$/;"	f	class:astyle::ASLibrary
copyTempStacks	astyle/src/ASBeautifier.cpp	/^vector<vector<const string*>*>* ASBeautifier::copyTempStacks(const ASBeautifier &other) const$/;"	f	class:astyle::ASBeautifier
copyright	lib/copyright.h	/^static char *copyright = "Copyright (c) 1992-1993 The Regents of the University of California.  All rights reserved.";$/;"	v
correctMixedLineEnds	astyle/src/astyle_main.cpp	/^void ASConsole::correctMixedLineEnds(ostringstream &out)$/;"	f	class:astyle::ASConsole
current	lib/list.h	/^    ListElement<T> *current;	\/\/ where we are in the list$/;"	m	class:ListIterator
currentChar	astyle/src/astyle.h	/^		char currentChar;$/;"	m	class:astyle::ASFormatter
currentHeader	astyle/src/astyle.h	/^		const string* currentHeader;$/;"	m	class:astyle::ASBeautifier
currentHeader	astyle/src/astyle.h	/^		const string* currentHeader;$/;"	m	class:astyle::ASFormatter
currentLine	astyle/src/astyle.h	/^		string currentLine;$/;"	m	class:astyle::ASFormatter
currentLineBeginsWithBracket	astyle/src/astyle.h	/^		bool currentLineBeginsWithBracket;$/;"	m	class:astyle::ASFormatter
currentLineFirstBracketNum	astyle/src/astyle.h	/^		size_t currentLineFirstBracketNum;	\/\/ first bracket location on currentLine$/;"	m	class:astyle::ASFormatter
currentNonLegalCh	astyle/src/astyle.h	/^		char currentNonLegalCh;$/;"	m	class:astyle::ASBeautifier
currentNonSpaceCh	astyle/src/astyle.h	/^		char currentNonSpaceCh;$/;"	m	class:astyle::ASBeautifier
currentOffset	filesys/openfile.h	/^    int currentOffset;$/;"	m	class:OpenFile
currentThread	threads/kernel.h	/^    Thread *currentThread;	\/\/ the thread holding the CPU$/;"	m	class:Kernel
data	network/post.h	/^    char data[MaxMailSize];	\/\/ Payload -- message data$/;"	m	class:Mail
dataSectors	filesys/filehdr.h	/^    int dataSectors[NumDirect];		\/\/ Disk sector numbers for each data$/;"	m	class:FileHeader
dbgAddr	lib/debug.h	/^const char dbgAddr = 'a'; 		\/\/ address spaces$/;"	v
dbgAll	lib/debug.h	/^const char dbgAll = '+';		\/\/ turn on all debug messages$/;"	v
dbgDisk	lib/debug.h	/^const char dbgDisk = 'd'; 		\/\/ disk emulation$/;"	v
dbgFile	lib/debug.h	/^const char dbgFile = 'f'; 		\/\/ file system$/;"	v
dbgInt	lib/debug.h	/^const char dbgInt = 'i'; 		\/\/ interrupt emulation$/;"	v
dbgMach	lib/debug.h	/^const char dbgMach = 'm'; 		\/\/ machine emulation$/;"	v
dbgNet	lib/debug.h	/^const char dbgNet = 'n'; 		\/\/ network emulation$/;"	v
dbgSynch	lib/debug.h	/^const char dbgSynch = 's';		\/\/ locks, semaphores, condition vars$/;"	v
dbgSys	lib/debug.h	/^const char dbgSys = 'u';                \/\/ systemcall$/;"	v
dbgThread	lib/debug.h	/^const char dbgThread = 't';		\/\/ threads$/;"	v
debug	threads/main.cc	/^Debug *debug;$/;"	v
debugUserProg	threads/kernel.h	/^    bool debugUserProg;         \/\/ single step user program$/;"	m	class:Kernel
defineIndentCount	astyle/src/astyle.h	/^		int  defineIndentCount;$/;"	m	class:astyle::ASBeautifier
deleteBeautifierContainer	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierContainer(vector<ASBeautifier*>* &container)$/;"	f	class:astyle::ASBeautifier
deleteBeautifierVectors	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierVectors()$/;"	f	class:astyle::ASBeautifier
deleteContainer	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::deleteContainer(T &container)$/;"	f	class:astyle::ASBeautifier
deleteContainer	astyle/src/ASFormatter.cpp	/^void ASFormatter::deleteContainer(T &container)$/;"	f	class:astyle::ASFormatter
deleteContainer	astyle/src/ASFormatter.cpp	/^void ASFormatter::deleteContainer(vector<BracketType>* &container)$/;"	f	class:astyle::ASFormatter
deleteTempStacksContainer	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::deleteTempStacksContainer(vector<vector<const string*>*>* &container)$/;"	f	class:astyle::ASBeautifier
detectEncoding	astyle/src/astyle_main.cpp	/^FileEncoding ASConsole::detectEncoding(const char* data, size_t dataSize) const$/;"	f	class:astyle::ASConsole
directoryFile	filesys/filesys.h	/^    OpenFile* directoryFile;		\/\/ "Root" directory -- list of$/;"	m	class:FileSystem
directoryFlag	filesys/directory.h	/^    bool directoryFlag;$/;"	m	class:DirectoryEntry
dirty	machine/translate.h	/^    bool dirty;         \/\/ This bit is set by the hardware every time the$/;"	m	class:TranslationEntry
disable	machine/timer.h	/^    bool disable;		\/\/ turn off the timer device after next$/;"	m	class:Timer
disabled	machine/console.h	/^    bool disabled;$/;"	m	class:ConsoleInput
disk	filesys/synchdisk.h	/^    Disk *disk;		  		\/\/ Raw disk device$/;"	m	class:SynchDisk
diskname	machine/disk.h	/^    char diskname[32];			\/\/ name of simulated disk's file$/;"	m	class:Disk
displayLastError	astyle/src/astyle_main.cpp	/^void ASConsole::displayLastError()$/;"	f	class:astyle::ASConsole
divRoundDown	lib/utility.h	24;"	d
divRoundUp	lib/utility.h	25;"	d
doesLineStartComment	astyle/src/astyle.h	/^		bool doesLineStartComment;$/;"	m	class:astyle::ASFormatter
eFinal	astyle/src/astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
ePenultimate	astyle/src/astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
eSecondOf4Bytes	astyle/src/astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
eStart	astyle/src/astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	e	enum:astyle::Utf8_16::eState
eState	astyle/src/astyle_main.h	/^		enum eState { eStart, eSecondOf4Bytes, ePenultimate, eFinal };$/;"	g	class:astyle::Utf8_16
elseHeaderFollowsComments	astyle/src/astyle.h	/^		bool elseHeaderFollowsComments;$/;"	m	class:astyle::ASFormatter
emptyLineFill	astyle/src/astyle.h	/^		bool emptyLineFill;$/;"	m	class:astyle::ASBeautifier
emptyLineFill	astyle/src/astyle.h	/^		bool emptyLineFill;$/;"	m	class:astyle::ASEnhancer
enableFlags	lib/debug.h	/^    char *enableFlags;		\/\/ controls which DEBUG messages are printed$/;"	m	class:Debug
endOfAsmReached	astyle/src/astyle.h	/^		bool endOfAsmReached;$/;"	m	class:astyle::ASFormatter
endOfCodeReached	astyle/src/astyle.h	/^		bool endOfCodeReached;$/;"	m	class:astyle::ASFormatter
enhance	astyle/src/ASEnhancer.cpp	/^void ASEnhancer::enhance(string &line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer
enhancer	astyle/src/astyle.h	/^		ASEnhancer* enhancer;$/;"	m	class:astyle::ASFormatter
eolLinux	astyle/src/astyle_main.h	/^		int eolLinux;           \/\/ number of Linux line endings, LF$/;"	m	class:astyle::ASStreamIterator
eolMacOld	astyle/src/astyle_main.h	/^		int eolMacOld;          \/\/ number of old Mac line endings. CR$/;"	m	class:astyle::ASStreamIterator
eolWindows	astyle/src/astyle_main.h	/^		int eolWindows;         \/\/ number of Windows line endings, CRLF$/;"	m	class:astyle::ASStreamIterator
error	astyle/src/astyle_main.cpp	/^void ASConsole::error() const$/;"	f	class:astyle::ASConsole
error	astyle/src/astyle_main.cpp	/^void ASConsole::error(const char* why, const char* what) const$/;"	f	class:astyle::ASConsole
eventPreprocDepth	astyle/src/astyle.h	/^		int  eventPreprocDepth;$/;"	m	class:astyle::ASEnhancer
exceptionNames	machine/machine.cc	/^static char* exceptionNames[] = { "no exception", "syscall",$/;"	v	file:
excludeHitsVector	astyle/src/astyle_main.h	/^		vector<bool>   excludeHitsVector;   \/\/ exclude flags for error reporting$/;"	m	class:astyle::ASConsole
excludeVector	astyle/src/astyle_main.h	/^		vector<string> excludeVector;       \/\/ exclude from wildcard hits$/;"	m	class:astyle::ASConsole
execfile	threads/kernel.h	/^    char*   execfile[10];$/;"	m	class:Kernel
execfileNum	threads/kernel.h	/^    int execfileNum;$/;"	m	class:Kernel
extra	machine/mipssim.cc	/^    int extra;       \/\/ Immediate or target or shamt field or offset.$/;"	m	class:Instruction	file:
extractPreprocessorStatement	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::extractPreprocessorStatement(const string &line) const$/;"	f	class:astyle::ASBeautifier
file	filesys/openfile.h	/^    int file;$/;"	m	class:OpenFile
fileDescriptorTable	filesys/filesys.h	/^    OpenFile *fileDescriptorTable[20];$/;"	m	class:FileSystem
fileDescriptorTable	filesys/filesys.h	/^    OpenFile *fileDescriptorTable[MAXOPENFILES];$/;"	m	class:FileSystem
fileDescritporIndex	filesys/filesys.h	/^    int fileDescritporIndex;$/;"	m	class:FileSystem
fileName	astyle/src/astyle_main.h	/^		vector<string> fileName;            \/\/ files to be processed including path$/;"	m	class:astyle::ASConsole
fileNameVector	astyle/src/astyle_main.h	/^		vector<string> fileNameVector;      \/\/ file paths and names from the command line$/;"	m	class:astyle::ASConsole
fileNameVectorIsEmpty	astyle/src/astyle_main.cpp	/^bool ASConsole::fileNameVectorIsEmpty() const$/;"	f	class:astyle::ASConsole
fileOptionsVector	astyle/src/astyle_main.h	/^		vector<string> fileOptionsVector;   \/\/ options from the options file$/;"	m	class:astyle::ASConsole
fileSystem	threads/kernel.h	/^    FileSystem *fileSystem;$/;"	m	class:Kernel
fileType	astyle/src/astyle.h	/^		int  fileType;$/;"	m	class:astyle::ASBeautifier
fileno	machine/disk.h	/^    int fileno;				\/\/ UNIX file number for simulated disk$/;"	m	class:Disk
filesAreIdentical	astyle/src/astyle_main.h	/^		bool filesAreIdentical;             \/\/ input and output files are identical$/;"	m	class:astyle::ASConsole
filesFormatted	astyle/src/astyle_main.h	/^		int  filesFormatted;                \/\/ number of files formatted$/;"	m	class:astyle::ASConsole
filesUnchanged	astyle/src/astyle_main.h	/^		int  filesUnchanged;                \/\/ number of files unchanged$/;"	m	class:astyle::ASConsole
findCaseColon	astyle/src/ASEnhancer.cpp	/^size_t ASEnhancer::findCaseColon(string &line, size_t caseIndex) const$/;"	f	class:astyle::ASEnhancer
findFormattedLineSplitPoint	astyle/src/ASFormatter.cpp	/^size_t ASFormatter::findFormattedLineSplitPoint() const$/;"	f	class:astyle::ASFormatter
findHeader	astyle/src/ASBeautifier.cpp	/^const string* ASBeautifier::findHeader(const string &line, int i,$/;"	f	class:astyle::ASBeautifier
findHeader	astyle/src/astyle.h	/^		const string* findHeader(const vector<const string*>* headers_) {$/;"	f	class:astyle::ASFormatter
findKeyword	astyle/src/ASResource.cpp	/^bool ASBase::findKeyword(const string &line, int i, const string &keyword) const$/;"	f	class:astyle::ASBase
findNextChar	astyle/src/ASFormatter.cpp	/^size_t ASFormatter::findNextChar(string &line, char searchChar, int searchStart \/*0*\/)$/;"	f	class:astyle::ASFormatter
findOperator	astyle/src/ASBeautifier.cpp	/^const string* ASBeautifier::findOperator(const string &line, int i,$/;"	f	class:astyle::ASBeautifier
findOperator	astyle/src/astyle.h	/^		const string* findOperator(const vector<const string*>* headers_) {$/;"	f	class:astyle::ASFormatter
first	lib/list.h	/^    ListElement<T> *first;  	\/\/ Head of the list, NULL if list is empty$/;"	m	class:List
fixOptionVariableConflicts	astyle/src/ASFormatter.cpp	/^void ASFormatter::fixOptionVariableConflicts()$/;"	f	class:astyle::ASFormatter
forceTab	astyle/src/astyle.h	/^		bool forceTab;$/;"	m	class:astyle::ASEnhancer
format	machine/mipssim.h	/^    char *format;	\/\/ Printed version of instruction$/;"	m	struct:OpString
format	machine/mipssim.h	/^    int format;		\/* Format type (IFMT or JFMT or RFMT) *\/$/;"	m	struct:OpInfo
formatArrayBrackets	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatArrayBrackets(BracketType bracketType, bool isOpeningArrayBracket)$/;"	f	class:astyle::ASFormatter
formatArrayRunIn	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatArrayRunIn()$/;"	f	class:astyle::ASFormatter
formatCinToCout	astyle/src/astyle_main.cpp	/^void ASConsole::formatCinToCout()$/;"	f	class:astyle::ASConsole
formatClosingBracket	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatClosingBracket(BracketType bracketType)$/;"	f	class:astyle::ASFormatter
formatCommentBody	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatCommentBody()$/;"	f	class:astyle::ASFormatter
formatCommentCloser	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatCommentCloser()$/;"	f	class:astyle::ASFormatter
formatCommentOpener	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatCommentOpener()$/;"	f	class:astyle::ASFormatter
formatFile	astyle/src/astyle_main.cpp	/^void ASConsole::formatFile(const string &fileName_)$/;"	f	class:astyle::ASConsole
formatFlag	threads/kernel.h	/^    bool formatFlag;          \/\/ format the disk if this is true$/;"	m	class:Kernel
formatLineCommentBody	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatLineCommentBody()$/;"	f	class:astyle::ASFormatter
formatLineCommentOpener	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatLineCommentOpener()$/;"	f	class:astyle::ASFormatter
formatOpeningBracket	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatOpeningBracket(BracketType bracketType)$/;"	f	class:astyle::ASFormatter
formatPointerOrReference	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatPointerOrReference(void)$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceCast	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceCast(void)$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceToMiddle	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToMiddle()$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceToName	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToName()$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceToType	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToType()$/;"	f	class:astyle::ASFormatter
formatQuoteBody	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatQuoteBody()$/;"	f	class:astyle::ASFormatter
formatQuoteOpener	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatQuoteOpener()$/;"	f	class:astyle::ASFormatter
formatRunIn	astyle/src/ASFormatter.cpp	/^void ASFormatter::formatRunIn()$/;"	f	class:astyle::ASFormatter
formatUtf16	astyle/src/astyle_main.cpp	/^utf16_t* ASLibrary::formatUtf16(const utf16_t* pSourceIn,		\/\/ the source to be formatted$/;"	f	class:astyle::ASLibrary
formattedLine	astyle/src/astyle.h	/^		string formattedLine;$/;"	m	class:astyle::ASFormatter
formattedLineCommentNum	astyle/src/astyle.h	/^		size_t formattedLineCommentNum;     \/\/ comment location on formattedLine$/;"	m	class:astyle::ASFormatter
formatter	astyle/src/astyle_main.h	/^		ASFormatter &formatter;			\/\/ reference to the ASFormatter object$/;"	m	class:astyle::ASOptions
formatter	astyle/src/astyle_main.h	/^		ASFormatter &formatter;             \/\/ reference to the ASFormatter object$/;"	m	class:astyle::ASConsole
formatterFileType	astyle/src/astyle.h	/^		int formatterFileType;$/;"	m	class:astyle::ASFormatter
formattingStyle	astyle/src/astyle.h	/^		FormatStyle formattingStyle;$/;"	m	class:astyle::ASFormatter
foundCastOperator	astyle/src/astyle.h	/^		bool foundCastOperator;$/;"	m	class:astyle::ASFormatter
foundClassHeader	astyle/src/astyle.h	/^		bool foundClassHeader;$/;"	m	class:astyle::ASFormatter
foundClosingHeader	astyle/src/astyle.h	/^		bool foundClosingHeader;$/;"	m	class:astyle::ASFormatter
foundInterfaceHeader	astyle/src/astyle.h	/^		bool foundInterfaceHeader;$/;"	m	class:astyle::ASFormatter
foundNamespaceHeader	astyle/src/astyle.h	/^		bool foundNamespaceHeader;$/;"	m	class:astyle::ASFormatter
foundPreCommandHeader	astyle/src/astyle.h	/^		bool foundPreCommandHeader;$/;"	m	class:astyle::ASBeautifier
foundPreCommandHeader	astyle/src/astyle.h	/^		bool foundPreCommandHeader;$/;"	m	class:astyle::ASFormatter
foundPreCommandMacro	astyle/src/astyle.h	/^		bool foundPreCommandMacro;$/;"	m	class:astyle::ASBeautifier
foundPreCommandMacro	astyle/src/astyle.h	/^		bool foundPreCommandMacro;$/;"	m	class:astyle::ASFormatter
foundPreDefinitionHeader	astyle/src/astyle.h	/^		bool foundPreDefinitionHeader;$/;"	m	class:astyle::ASFormatter
foundQuestionMark	astyle/src/astyle.h	/^		bool foundQuestionMark;$/;"	m	class:astyle::ASFormatter
foundStructHeader	astyle/src/astyle.h	/^		bool foundStructHeader;$/;"	m	class:astyle::ASFormatter
fp	threads/switch.S	/^#define fp      $30     \/* frame pointer *\/$/;"	d
fpAlloc	astyle/src/astyle_main.h	/^	typedef char* (STDCALL* fpAlloc)(unsigned long memoryNeeded);$/;"	t
fpError	astyle/src/astyle_main.h	/^	typedef void (STDCALL* fpError)(int errorNumber, const char* errorMessage);$/;"	t
freeMapFile	filesys/filesys.h	/^    OpenFile* freeMapFile;		\/\/ Bit map of free disk blocks,$/;"	m	class:FileSystem
from	machine/network.h	/^    NetworkAddress from;	\/\/ source machine ID$/;"	m	class:PacketHeader
from	network/post.h	/^    MailBoxAddress from;	\/\/ Mail box to reply to$/;"	m	class:MailHeader
g_console	astyle/src/astyle_main.cpp	/^	ASConsole* g_console = NULL;     \/\/ class to encapsulate console variables$/;"	m	namespace:astyle	file:
g_env	astyle/src/astyle_main.cpp	/^	JNIEnv*   g_env;$/;"	m	namespace:astyle	file:
g_fileSeparator	astyle/src/astyle_main.cpp	/^		char g_fileSeparator = '\/';      \/\/ Linux file separator$/;"	m	namespace:astyle	file:
g_fileSeparator	astyle/src/astyle_main.cpp	/^		char g_fileSeparator = '\\\\';     \/\/ Windows file separator$/;"	m	namespace:astyle	file:
g_isCaseSensitive	astyle/src/astyle_main.cpp	/^		bool g_isCaseSensitive = false;  \/\/ Windows IS case sensitive$/;"	m	namespace:astyle	file:
g_isCaseSensitive	astyle/src/astyle_main.cpp	/^		bool g_isCaseSensitive = true;   \/\/ Linux IS NOT case sensitive$/;"	m	namespace:astyle	file:
g_mid	astyle/src/astyle_main.cpp	/^	jmethodID g_mid;$/;"	m	namespace:astyle	file:
g_obj	astyle/src/astyle_main.cpp	/^	jobject   g_obj;$/;"	m	namespace:astyle	file:
g_preprocessorCppExternCBracket	astyle/src/ASBeautifier.cpp	/^static int g_preprocessorCppExternCBracket;$/;"	m	namespace:astyle	file:
g_version	astyle/src/astyle_main.cpp	/^const char* g_version = "2.05.1";$/;"	m	namespace:astyle	file:
getArgvOptions	astyle/src/astyle_main.cpp	/^vector<string> ASConsole::getArgvOptions(int argc, char** argv) const$/;"	f	class:astyle::ASConsole
getBeautifierFileType	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getBeautifierFileType() const$/;"	f	class:astyle::ASBeautifier
getBigEndian	astyle/src/astyle_main.cpp	/^bool Utf8_16::getBigEndian() const$/;"	f	class:astyle::Utf8_16
getBlockIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getBlockIndent(void) const$/;"	f	class:astyle::ASBeautifier
getBracketIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getBracketIndent(void) const$/;"	f	class:astyle::ASBeautifier
getBracketType	astyle/src/ASFormatter.cpp	/^BracketType ASFormatter::getBracketType()$/;"	f	class:astyle::ASFormatter
getCaseIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getCaseIndent(void) const$/;"	f	class:astyle::ASBeautifier
getChecksumDiff	astyle/src/ASFormatter.cpp	/^int ASFormatter::getChecksumDiff() const$/;"	f	class:astyle::ASFormatter
getChecksumIn	astyle/src/ASFormatter.cpp	/^size_t ASFormatter::getChecksumIn() const$/;"	f	class:astyle::ASFormatter
getChecksumOut	astyle/src/ASFormatter.cpp	/^size_t ASFormatter::getChecksumOut() const$/;"	f	class:astyle::ASFormatter
getClassIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getClassIndent(void) const$/;"	f	class:astyle::ASBeautifier
getCurrentDirectory	astyle/src/astyle_main.cpp	/^string ASConsole::getCurrentDirectory(const string &fileName_) const$/;"	f	class:astyle::ASConsole
getCurrentLineCommentAdjustment	astyle/src/ASFormatter.cpp	/^int ASFormatter::getCurrentLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter
getCurrentWord	astyle/src/ASResource.cpp	/^string ASBase::getCurrentWord(const string &line, size_t index) const$/;"	f	class:astyle::ASBase
getEmptyLineFill	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getEmptyLineFill(void) const$/;"	f	class:astyle::ASBeautifier
getExcludeHitsVector	astyle/src/astyle_main.cpp	/^vector<bool> ASConsole::getExcludeHitsVector() const$/;"	f	class:astyle::ASConsole
getExcludeVector	astyle/src/astyle_main.cpp	/^vector<string> ASConsole::getExcludeVector() const$/;"	f	class:astyle::ASConsole
getFileName	astyle/src/astyle_main.cpp	/^vector<string> ASConsole::getFileName() const$/;"	f	class:astyle::ASConsole
getFileNameVector	astyle/src/astyle_main.cpp	/^vector<string> ASConsole::getFileNameVector() const$/;"	f	class:astyle::ASConsole
getFileNames	astyle/src/astyle_main.cpp	/^void ASConsole::getFileNames(const string &directory, const string &wildcard)$/;"	f	class:astyle::ASConsole
getFileOptionsVector	astyle/src/astyle_main.cpp	/^vector<string> ASConsole::getFileOptionsVector() const$/;"	f	class:astyle::ASConsole
getFilePaths	astyle/src/astyle_main.cpp	/^void ASConsole::getFilePaths(string &filePath)$/;"	f	class:astyle::ASConsole
getFileType	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getFileType() const$/;"	f	class:astyle::ASBeautifier
getFilesAreIdentical	astyle/src/astyle_main.cpp	/^bool ASConsole::getFilesAreIdentical() const$/;"	f	class:astyle::ASConsole
getFilesFormatted	astyle/src/astyle_main.cpp	/^int ASConsole::getFilesFormatted() const$/;"	f	class:astyle::ASConsole
getFollowingOperator	astyle/src/ASFormatter.cpp	/^const string* ASFormatter::getFollowingOperator() const$/;"	f	class:astyle::ASFormatter
getForceTabIndentation	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getForceTabIndentation(void) const$/;"	f	class:astyle::ASBeautifier
getFormatterFileType	astyle/src/ASFormatter.cpp	/^int ASFormatter::getFormatterFileType() const$/;"	f	class:astyle::ASFormatter
getID	threads/thread.h	/^    int getID()$/;"	f	class:Thread
getIgnoreExcludeErrors	astyle/src/astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrors() const$/;"	f	class:astyle::ASConsole
getIgnoreExcludeErrorsDisplay	astyle/src/astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrorsDisplay() const$/;"	f	class:astyle::ASConsole
getInStatementIndentAssign	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getInStatementIndentAssign(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
getInStatementIndentComma	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getInStatementIndentComma(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
getIndentLength	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getIndentLength(void) const$/;"	f	class:astyle::ASBeautifier
getIndentString	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::getIndentString(void) const$/;"	f	class:astyle::ASBeautifier
getIndentedLineReturn	astyle/src/ASBeautifier.cpp	/^string &ASBeautifier::getIndentedLineReturn(string &newLine, const string &originalLine) const$/;"	f	class:astyle::ASBeautifier
getIsDryRun	astyle/src/astyle_main.cpp	/^bool ASConsole::getIsDryRun() const$/;"	f	class:astyle::ASConsole
getIsFormattedOnly	astyle/src/astyle_main.cpp	/^bool ASConsole::getIsFormattedOnly() const$/;"	f	class:astyle::ASConsole
getIsLineReady	astyle/src/ASFormatter.cpp	/^bool ASFormatter::getIsLineReady() const$/;"	f	class:astyle::ASFormatter
getIsQuiet	astyle/src/astyle_main.cpp	/^bool ASConsole::getIsQuiet() const$/;"	f	class:astyle::ASConsole
getIsRecursive	astyle/src/astyle_main.cpp	/^bool ASConsole::getIsRecursive() const$/;"	f	class:astyle::ASConsole
getIsVerbose	astyle/src/astyle_main.cpp	/^bool ASConsole::getIsVerbose() const$/;"	f	class:astyle::ASConsole
getKey	lib/hash.h	/^    Key (*getKey)(T x);		\/\/ get Key from value$/;"	m	class:HashTable
getLanguageID	astyle/src/ASLocalizer.cpp	/^string ASLocalizer::getLanguageID() const$/;"	f	class:astyle::ASLocalizer
getLanguageID	astyle/src/astyle_main.cpp	/^string ASConsole::getLanguageID() const$/;"	f	class:astyle::ASConsole
getLevel	machine/interrupt.h	/^    IntStatus getLevel()$/;"	f	class:Interrupt
getLineEndChange	astyle/src/astyle_main.cpp	/^bool ASStreamIterator<T>::getLineEndChange(int lineEndFormat) const$/;"	f	class:astyle::ASStreamIterator
getLineEndFormat	astyle/src/ASFormatter.cpp	/^LineEndFormat ASFormatter::getLineEndFormat() const$/;"	f	class:astyle::ASFormatter
getLineEndsMixed	astyle/src/astyle_main.cpp	/^bool ASConsole::getLineEndsMixed() const$/;"	f	class:astyle::ASConsole
getModeManuallySet	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getModeManuallySet() const$/;"	f	class:astyle::ASBeautifier
getModifierIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getModifierIndent(void) const$/;"	f	class:astyle::ASBeautifier
getName	threads/synch.h	/^    char* getName()$/;"	f	class:Condition
getName	threads/synch.h	/^    char* getName()$/;"	f	class:Lock
getName	threads/synch.h	/^    char* getName()$/;"	f	class:Semaphore
getName	threads/thread.h	/^    char* getName()$/;"	f	class:Thread
getNamespaceIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getNamespaceIndent(void) const$/;"	f	class:astyle::ASBeautifier
getNextChar	astyle/src/ASFormatter.cpp	/^bool ASFormatter::getNextChar()$/;"	f	class:astyle::ASFormatter
getNextLine	astyle/src/ASFormatter.cpp	/^bool ASFormatter::getNextLine(bool emptyLineWasDeleted \/*false*\/)$/;"	f	class:astyle::ASFormatter
getNextLineCommentAdjustment	astyle/src/ASFormatter.cpp	/^int ASFormatter::getNextLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter
getNextProgramCharDistance	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getNextProgramCharDistance(const string &line, int i) const$/;"	f	class:astyle::ASBeautifier
getNextWord	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::getNextWord(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
getNoBackup	astyle/src/astyle_main.cpp	/^bool ASConsole::getNoBackup() const$/;"	f	class:astyle::ASConsole
getNumberFormat	astyle/src/astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, const char* groupingArg, const char* separator) const$/;"	f	class:astyle::ASConsole
getNumberFormat	astyle/src/astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t lcid) const$/;"	f	class:astyle::ASConsole
getNumberFormat	astyle/src/astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t) const$/;"	f	class:astyle::ASConsole
getOptionErrors	astyle/src/astyle_main.cpp	/^string ASOptions::getOptionErrors() const$/;"	f	class:astyle::ASOptions
getOptionsFileName	astyle/src/astyle_main.cpp	/^string ASConsole::getOptionsFileName() const$/;"	f	class:astyle::ASConsole
getOptionsVector	astyle/src/astyle_main.cpp	/^vector<string> ASConsole::getOptionsVector() const$/;"	f	class:astyle::ASConsole
getOrigSuffix	astyle/src/astyle_main.cpp	/^string ASConsole::getOrigSuffix() const$/;"	f	class:astyle::ASConsole
getOutputEOL	astyle/src/astyle_main.h	/^		const char* getOutputEOL() const { return outputEOL; }$/;"	f	class:astyle::ASStreamIterator
getParam	astyle/src/astyle_main.cpp	/^string ASConsole::getParam(const string &arg, const char* op)$/;"	f	class:astyle::ASConsole
getParam	astyle/src/astyle_main.cpp	/^string ASOptions::getParam(const string &arg, const char* op)$/;"	f	class:astyle::ASOptions
getParam	astyle/src/astyle_main.cpp	/^string ASOptions::getParam(const string &arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions
getPreprocDefineIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getPreprocDefineIndent(void) const$/;"	f	class:astyle::ASBeautifier
getPreserveDate	astyle/src/astyle_main.cpp	/^bool ASConsole::getPreserveDate() const$/;"	f	class:astyle::ASConsole
getPreviousWord	astyle/src/ASFormatter.cpp	/^string ASFormatter::getPreviousWord(const string &line, int currPos) const$/;"	f	class:astyle::ASFormatter
getStatus	machine/interrupt.h	/^    MachineStatus getStatus()$/;"	f	class:Interrupt
getStatus	threads/thread.h	/^    ThreadStatus getStatus()$/;"	f	class:Thread
getStreamLength	astyle/src/astyle_main.cpp	/^int ASStreamIterator<T>::getStreamLength() const$/;"	f	class:astyle::ASStreamIterator
getSwitchIndent	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::getSwitchIndent(void) const$/;"	f	class:astyle::ASBeautifier
getTabLength	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::getTabLength(void) const$/;"	f	class:astyle::ASBeautifier
getThread	threads/kernel.h	/^    Thread* getThread(int threadID)$/;"	f	class:Kernel
getTranslationClass	astyle/src/ASLocalizer.cpp	/^const Translation* ASLocalizer::getTranslationClass() const$/;"	f	class:astyle::ASLocalizer
getTranslationVectorSize	astyle/src/ASLocalizer.cpp	/^size_t Translation::getTranslationVectorSize() const$/;"	f	class:astyle::Translation
getWideTranslation	astyle/src/ASLocalizer.cpp	/^bool Translation::getWideTranslation(const string &stringIn, wstring &wideOut) const$/;"	f	class:astyle::Translation
goForward	astyle/src/ASFormatter.cpp	/^void ASFormatter::goForward(int i)$/;"	f	class:astyle::ASFormatter
gp	threads/switch.S	/^#define	gp	$29	\/* (T)		(local) data pointer	*\/$/;"	d
hasMoreLines	astyle/src/ASFormatter.cpp	/^bool ASFormatter::hasMoreLines() const$/;"	f	class:astyle::ASFormatter
hasMoreLines	astyle/src/astyle_main.h	/^		bool hasMoreLines() const { return !inStream->eof(); }$/;"	f	class:astyle::ASStreamIterator
hasWildcard	astyle/src/astyle_main.h	/^		bool hasWildcard;                   \/\/ file name includes a wildcard$/;"	m	class:astyle::ASConsole
hash	lib/hash.h	/^    unsigned (*hash)(Key x);	\/\/ the hash function$/;"	m	class:HashTable
hashTestVector	lib/libtest.cc	/^static char *hashTestVector[] = { "0", "1", "2", "3", "4", "5", "6",$/;"	v	file:
haveLineContinuationChar	astyle/src/astyle.h	/^		bool haveLineContinuationChar;$/;"	m	class:astyle::ASBeautifier
haveLineContinuationChar	astyle/src/astyle.h	/^		bool haveLineContinuationChar;$/;"	m	class:astyle::ASFormatter
hdr	filesys/openfile.h	/^    FileHeader *hdr;			\/\/ Header for this file$/;"	m	class:OpenFile
headerStack	astyle/src/astyle.h	/^		vector<const string*>* headerStack;$/;"	m	class:astyle::ASBeautifier
headers	astyle/src/astyle.h	/^		vector<const string*>* headers;$/;"	m	class:astyle::ASBeautifier
headers	astyle/src/astyle.h	/^		vector<const string*>* headers;$/;"	m	class:astyle::ASFormatter
horstmannIndentChars	astyle/src/astyle.h	/^		int  horstmannIndentChars;$/;"	m	class:astyle::ASFormatter
horstmannIndentInStatement	astyle/src/astyle.h	/^		int  horstmannIndentInStatement;$/;"	m	class:astyle::ASBeautifier
hostName	threads/kernel.h	/^    int hostName;               \/\/ machine identifier$/;"	m	class:Kernel
idleTicks	machine/stats.h	/^    int idleTicks;       	\/\/ Time spent idle (no threads to run)$/;"	m	class:Statistics
ignoreExcludeErrors	astyle/src/astyle_main.h	/^		bool ignoreExcludeErrors;           \/\/ don't abort on unmatched excludes$/;"	m	class:astyle::ASConsole
ignoreExcludeErrorsDisplay	astyle/src/astyle_main.h	/^		bool ignoreExcludeErrorsDisplay;    \/\/ don't display unmatched excludes$/;"	m	class:astyle::ASConsole
importOptions	astyle/src/astyle_main.cpp	/^void ASOptions::importOptions(istream &in, vector<string> &optionsVector)$/;"	f	class:astyle::ASOptions
inFileAddr	userprog/noff.h	/^    int inFileAddr;		\/* location of segment in this file *\/$/;"	m	struct:segment
inHandler	machine/interrupt.h	/^    bool inHandler;		\/\/ TRUE if we are running an interrupt handler$/;"	m	class:Interrupt
inHdr	machine/network.h	/^    PacketHeader inHdr;		\/\/ Information about arrived packet$/;"	m	class:NetworkInput
inLineNumber	astyle/src/astyle.h	/^		int  inLineNumber;$/;"	m	class:astyle::ASBeautifier
inStatementIndentStack	astyle/src/astyle.h	/^		vector<int>* inStatementIndentStack;$/;"	m	class:astyle::ASBeautifier
inStatementIndentStackSizeStack	astyle/src/astyle.h	/^		vector<int>* inStatementIndentStackSizeStack;$/;"	m	class:astyle::ASBeautifier
inStream	astyle/src/astyle_main.h	/^		T* inStream;            \/\/ pointer to the input stream$/;"	m	class:astyle::ASStreamIterator
inUse	filesys/directory.h	/^    bool inUse;				\/\/ Is this directory entry in use?$/;"	m	class:DirectoryEntry
inbox	machine/network.h	/^    char inbox[MaxPacketSize];  \/\/ Data for arrived packet$/;"	m	class:NetworkInput
incoming	machine/console.h	/^    char incoming;    			\/\/ Contains the character to be read,$/;"	m	class:ConsoleInput
indentCount	astyle/src/astyle.h	/^		int  indentCount;$/;"	m	class:astyle::ASBeautifier
indentLength	astyle/src/astyle.h	/^		int  indentLength;$/;"	m	class:astyle::ASBeautifier
indentLength	astyle/src/astyle.h	/^		int  indentLength;$/;"	m	class:astyle::ASEnhancer
indentLine	astyle/src/ASEnhancer.cpp	/^int ASEnhancer::indentLine(string &line, int indent) const$/;"	f	class:astyle::ASEnhancer
indentString	astyle/src/astyle.h	/^		string indentString;$/;"	m	class:astyle::ASBeautifier
indentableHeaders	astyle/src/astyle.h	/^		vector<const string*>* indentableHeaders;$/;"	m	class:astyle::ASBeautifier
indentableMacros	astyle/src/astyle.h	/^		vector<const pair<const string, const string>* >* indentableMacros;	\/\/ for ASEnhancer$/;"	m	class:astyle::ASFormatter
indentableMacros	astyle/src/astyle.h	/^		vector<const pair<const string, const string>* >* indentableMacros;$/;"	m	class:astyle::ASEnhancer
indexOf	astyle/src/ASBeautifier.cpp	/^int ASBeautifier::indexOf(vector<const string*> &container, const string* element) const$/;"	f	class:astyle::ASBeautifier
init	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::init(ASSourceIterator* iter)$/;"	f	class:astyle::ASBeautifier
init	astyle/src/ASEnhancer.cpp	/^void ASEnhancer::init(int  _fileType,$/;"	f	class:astyle::ASEnhancer
init	astyle/src/ASFormatter.cpp	/^void ASFormatter::init(ASSourceIterator* si)$/;"	f	class:astyle::ASFormatter
init	astyle/src/astyle.h	/^		void init(int fileTypeArg) { baseFileType = fileTypeArg; }$/;"	f	class:astyle::ASBase
initContainer	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::initContainer(T &container, T value)$/;"	f	class:astyle::ASBeautifier
initContainer	astyle/src/ASFormatter.cpp	/^void ASFormatter::initContainer(T &container, T value)$/;"	f	class:astyle::ASFormatter
initContainer	astyle/src/ASFormatter.cpp	/^void ASFormatter::initContainer(vector<BracketType>* &container, vector<BracketType>* value)$/;"	f	class:astyle::ASFormatter
initData	userprog/noff.h	/^    Segment initData;		\/* initialized data segment *\/$/;"	m	struct:noffHeader
initNewLine	astyle/src/ASFormatter.cpp	/^void ASFormatter::initNewLine()$/;"	f	class:astyle::ASFormatter
initTempStacksContainer	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::initTempStacksContainer(vector<vector<const string*>*>* &container,$/;"	f	class:astyle::ASBeautifier
initVectors	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::initVectors()$/;"	f	class:astyle::ASBeautifier
initdata1	test/segments.c	/^unsigned int initdata1 = 0xdeadbeef; \/* initialized data put in .data segment *\/$/;"	v
initdata2	test/segments.c	/^int initdata2 = 0xbb;                \/* same as above                         *\/$/;"	v
initializeOutputEOL	astyle/src/astyle_main.cpp	/^void ASConsole::initializeOutputEOL(LineEndFormat lineEndFormat)$/;"	f	class:astyle::ASConsole
intLevelNames	machine/interrupt.cc	/^static char *intLevelNames[] = { "off", "on"};$/;"	v	file:
intTypeNames	machine/interrupt.cc	/^static char *intTypeNames[] = { "timer", "disk", "console write",$/;"	v	file:
interrupt	threads/kernel.h	/^    Interrupt *interrupt;	\/\/ interrupt status$/;"	m	class:Kernel
ipath	astyle/build/clang/Makefile	/^ipath=$(prefix)\/bin$/;"	m
ipath	astyle/build/gcc/Makefile	/^ipath=$(prefix)\/bin$/;"	m
ipath	astyle/build/intel/Makefile	/^ipath=$(prefix)\/bin$/;"	m
isAppendPostBlockEmptyLineRequested	astyle/src/astyle.h	/^		bool isAppendPostBlockEmptyLineRequested;$/;"	m	class:astyle::ASFormatter
isArrayOperator	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isArrayOperator() const$/;"	f	class:astyle::ASFormatter
isBeforeAnyComment	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyComment() const$/;"	f	class:astyle::ASFormatter
isBeforeAnyLineEndComment	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyLineEndComment(int startPos) const$/;"	f	class:astyle::ASFormatter
isBeforeComment	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isBeforeComment() const$/;"	f	class:astyle::ASFormatter
isBeforeMultipleLineEndComments	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isBeforeMultipleLineEndComments(int startPos) const$/;"	f	class:astyle::ASFormatter
isBeginDeclareSectionSQL	astyle/src/ASEnhancer.cpp	/^bool ASEnhancer::isBeginDeclareSectionSQL(string &line, size_t index) const$/;"	f	class:astyle::ASEnhancer
isBracketType	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isBracketType(BracketType a, BracketType b) const$/;"	f	class:astyle::ASFormatter
isCStyle	astyle/src/astyle.h	/^		bool isCStyle() const { return (baseFileType == C_TYPE); }$/;"	f	class:astyle::ASBase
isCaseHeaderCommentIndent	astyle/src/astyle.h	/^		bool isCaseHeaderCommentIndent;$/;"	m	class:astyle::ASBeautifier
isCharImmediatelyPostCloseBlock	astyle/src/astyle.h	/^		bool isCharImmediatelyPostCloseBlock;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostComment	astyle/src/astyle.h	/^		bool isCharImmediatelyPostComment;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostLineComment	astyle/src/astyle.h	/^		bool isCharImmediatelyPostLineComment;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostNonInStmt	astyle/src/astyle.h	/^		bool isCharImmediatelyPostNonInStmt;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostOpenBlock	astyle/src/astyle.h	/^		bool isCharImmediatelyPostOpenBlock;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostOperator	astyle/src/astyle.h	/^		bool isCharImmediatelyPostOperator;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostPointerOrReference	astyle/src/astyle.h	/^		bool isCharImmediatelyPostPointerOrReference;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostReturn	astyle/src/astyle.h	/^		bool isCharImmediatelyPostReturn;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostTemplate	astyle/src/astyle.h	/^		bool isCharImmediatelyPostTemplate;$/;"	m	class:astyle::ASFormatter
isCharImmediatelyPostThrow	astyle/src/astyle.h	/^		bool isCharImmediatelyPostThrow;$/;"	m	class:astyle::ASFormatter
isCharPotentialHeader	astyle/src/astyle.h	/^		bool isCharPotentialHeader(const string &line, size_t i) const {$/;"	f	class:astyle::ASBase
isCharPotentialOperator	astyle/src/astyle.h	/^		bool isCharPotentialOperator(char ch) const {$/;"	f	class:astyle::ASBase
isClassInitializer	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isClassInitializer() const$/;"	f	class:astyle::ASFormatter
isClosingHeader	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isClosingHeader(const string* header) const$/;"	f	class:astyle::ASFormatter
isCurrentBracketBroken	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isCurrentBracketBroken() const$/;"	f	class:astyle::ASFormatter
isDereferenceOrAddressOf	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isDereferenceOrAddressOf() const$/;"	f	class:astyle::ASFormatter
isDigit	astyle/src/astyle.h	/^		bool isDigit(char ch) const {$/;"	f	class:astyle::ASBase
isDryRun	astyle/src/astyle_main.h	/^		bool isDryRun;                      \/\/ dry-run option$/;"	m	class:astyle::ASConsole
isElseHeaderIndent	astyle/src/astyle.h	/^		bool isElseHeaderIndent;$/;"	m	class:astyle::ASBeautifier
isEmptyLine	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isEmptyLine(const string &line) const$/;"	f	class:astyle::ASFormatter
isEndDeclareSectionSQL	astyle/src/ASEnhancer.cpp	/^bool ASEnhancer::isEndDeclareSectionSQL(string &line, size_t index) const$/;"	f	class:astyle::ASEnhancer
isExecSQL	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isExecSQL(string  &line, size_t index) const$/;"	f	class:astyle::ASFormatter
isExternC	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isExternC() const$/;"	f	class:astyle::ASFormatter
isFirstPreprocConditional	astyle/src/astyle.h	/^		bool isFirstPreprocConditional;$/;"	m	class:astyle::ASFormatter
isFormattedOnly	astyle/src/astyle_main.h	/^		bool isFormattedOnly;               \/\/ formatted lines only option$/;"	m	class:astyle::ASConsole
isFormattingModeOff	astyle/src/astyle.h	/^		bool isFormattingModeOff;$/;"	m	class:astyle::ASFormatter
isHeaderInMultiStatementLine	astyle/src/astyle.h	/^		bool isHeaderInMultiStatementLine;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostCast	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isImmediatelyPostCast() const$/;"	f	class:astyle::ASFormatter
isImmediatelyPostComment	astyle/src/astyle.h	/^		bool isImmediatelyPostComment;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostCommentOnly	astyle/src/astyle.h	/^		bool isImmediatelyPostCommentOnly;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostEmptyBlock	astyle/src/astyle.h	/^		bool isImmediatelyPostEmptyBlock;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostEmptyLine	astyle/src/astyle.h	/^		bool isImmediatelyPostEmptyLine;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostHeader	astyle/src/astyle.h	/^		bool isImmediatelyPostHeader;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostLineComment	astyle/src/astyle.h	/^		bool isImmediatelyPostLineComment;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostNonInStmt	astyle/src/astyle.h	/^		bool isImmediatelyPostNonInStmt;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostObjCMethodDefinition	astyle/src/astyle.h	/^		bool isImmediatelyPostObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier
isImmediatelyPostOperator	astyle/src/astyle.h	/^		bool isImmediatelyPostOperator;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostPointerOrReference	astyle/src/astyle.h	/^		bool isImmediatelyPostPointerOrReference;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostPreprocessor	astyle/src/astyle.h	/^		bool isImmediatelyPostPreprocessor;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostReturn	astyle/src/astyle.h	/^		bool isImmediatelyPostReturn;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostTemplate	astyle/src/astyle.h	/^		bool isImmediatelyPostTemplate;$/;"	m	class:astyle::ASFormatter
isImmediatelyPostThrow	astyle/src/astyle.h	/^		bool isImmediatelyPostThrow;$/;"	m	class:astyle::ASFormatter
isInAsm	astyle/src/astyle.h	/^		bool isInAsm;$/;"	m	class:astyle::ASBeautifier
isInAsm	astyle/src/astyle.h	/^		bool isInAsm;$/;"	m	class:astyle::ASFormatter
isInAsmBlock	astyle/src/astyle.h	/^		bool isInAsmBlock;$/;"	m	class:astyle::ASBeautifier
isInAsmBlock	astyle/src/astyle.h	/^		bool isInAsmBlock;$/;"	m	class:astyle::ASFormatter
isInAsmOneLine	astyle/src/astyle.h	/^		bool isInAsmOneLine;$/;"	m	class:astyle::ASBeautifier
isInAsmOneLine	astyle/src/astyle.h	/^		bool isInAsmOneLine;$/;"	m	class:astyle::ASFormatter
isInBeautifySQL	astyle/src/astyle.h	/^		bool isInBeautifySQL;$/;"	m	class:astyle::ASBeautifier
isInCase	astyle/src/astyle.h	/^		bool isInCase;$/;"	m	class:astyle::ASBeautifier
isInCase	astyle/src/astyle.h	/^		bool isInCase;$/;"	m	class:astyle::ASFormatter
isInClass	astyle/src/astyle.h	/^		bool isInClass;					\/\/ is in a class after the opening bracket$/;"	m	class:astyle::ASBeautifier
isInClassHeader	astyle/src/astyle.h	/^		bool isInClassHeader;			\/\/ is in a class before the opening bracket$/;"	m	class:astyle::ASBeautifier
isInClassHeaderTab	astyle/src/astyle.h	/^		bool isInClassHeaderTab;		\/\/ is in an indentable class header line$/;"	m	class:astyle::ASBeautifier
isInClassInitializer	astyle/src/astyle.h	/^		bool isInClassInitializer;		\/\/ is in a class after the ':' initializer$/;"	m	class:astyle::ASBeautifier
isInClassInitializer	astyle/src/astyle.h	/^		bool isInClassInitializer;$/;"	m	class:astyle::ASFormatter
isInComment	astyle/src/astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASBeautifier
isInComment	astyle/src/astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASEnhancer
isInComment	astyle/src/astyle.h	/^		bool isInComment;$/;"	m	class:astyle::ASFormatter
isInCommentStartLine	astyle/src/astyle.h	/^		bool isInCommentStartLine;$/;"	m	class:astyle::ASFormatter
isInConditional	astyle/src/astyle.h	/^		bool isInConditional;$/;"	m	class:astyle::ASBeautifier
isInDeclareSection	astyle/src/astyle.h	/^		bool isInDeclareSection;                \/\/ need to indent a declare section$/;"	m	class:astyle::ASEnhancer
isInDefine	astyle/src/astyle.h	/^		bool isInDefine;$/;"	m	class:astyle::ASBeautifier
isInDefineDefinition	astyle/src/astyle.h	/^		bool isInDefineDefinition;$/;"	m	class:astyle::ASBeautifier
isInEnum	astyle/src/astyle.h	/^		bool isInEnum;$/;"	m	class:astyle::ASBeautifier
isInEnum	astyle/src/astyle.h	/^		bool isInEnum;$/;"	m	class:astyle::ASFormatter
isInEnumTypeID	astyle/src/astyle.h	/^		bool isInEnumTypeID;$/;"	m	class:astyle::ASBeautifier
isInEventTable	astyle/src/astyle.h	/^		bool isInEventTable;                    \/\/ need to indent an event table$/;"	m	class:astyle::ASEnhancer
isInExecSQL	astyle/src/astyle.h	/^		bool isInExecSQL;$/;"	m	class:astyle::ASFormatter
isInExponent	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isInExponent() const$/;"	f	class:astyle::ASFormatter
isInExternC	astyle/src/astyle.h	/^		bool isInExternC;$/;"	m	class:astyle::ASBeautifier
isInHeader	astyle/src/astyle.h	/^		bool isInHeader;$/;"	m	class:astyle::ASBeautifier
isInHeader	astyle/src/astyle.h	/^		bool isInHeader;$/;"	m	class:astyle::ASFormatter
isInHorstmannComment	astyle/src/astyle.h	/^		bool isInHorstmannComment;$/;"	m	class:astyle::ASBeautifier
isInHorstmannRunIn	astyle/src/astyle.h	/^		bool isInHorstmannRunIn;$/;"	m	class:astyle::ASFormatter
isInIndentablePreproc	astyle/src/astyle.h	/^		bool isInIndentablePreproc;$/;"	m	class:astyle::ASBeautifier
isInIndentablePreprocBlock	astyle/src/astyle.h	/^		bool isInIndentablePreprocBlock;$/;"	m	class:astyle::ASBeautifier
isInIndentableStruct	astyle/src/astyle.h	/^		bool isInIndentableStruct;$/;"	m	class:astyle::ASBeautifier
isInLet	astyle/src/astyle.h	/^		bool isInLet;$/;"	m	class:astyle::ASBeautifier
isInLineBreak	astyle/src/astyle.h	/^		bool isInLineBreak;$/;"	m	class:astyle::ASFormatter
isInLineComment	astyle/src/astyle.h	/^		bool isInLineComment;$/;"	m	class:astyle::ASFormatter
isInObjCInterface	astyle/src/astyle.h	/^		bool isInObjCInterface;$/;"	m	class:astyle::ASBeautifier
isInObjCInterface	astyle/src/astyle.h	/^		bool isInObjCInterface;$/;"	m	class:astyle::ASFormatter
isInObjCMethodDefinition	astyle/src/astyle.h	/^		bool isInObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier
isInObjCMethodDefinition	astyle/src/astyle.h	/^		bool isInObjCMethodDefinition;$/;"	m	class:astyle::ASFormatter
isInObjCSelector	astyle/src/astyle.h	/^		bool isInObjCSelector;$/;"	m	class:astyle::ASFormatter
isInPotentialCalculation	astyle/src/astyle.h	/^		bool isInPotentialCalculation;$/;"	m	class:astyle::ASFormatter
isInPreprocessor	astyle/src/astyle.h	/^		bool isInPreprocessor;$/;"	m	class:astyle::ASFormatter
isInPreprocessorBeautify	astyle/src/astyle.h	/^		bool isInPreprocessorBeautify;$/;"	m	class:astyle::ASFormatter
isInPreprocessorComment	astyle/src/astyle.h	/^		bool isInPreprocessorComment;$/;"	m	class:astyle::ASBeautifier
isInPreprocessorUnterminatedComment	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::isInPreprocessorUnterminatedComment(const string &line)$/;"	f	class:astyle::ASBeautifier
isInQuestion	astyle/src/astyle.h	/^		bool isInQuestion;$/;"	m	class:astyle::ASBeautifier
isInQuote	astyle/src/astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASBeautifier
isInQuote	astyle/src/astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASEnhancer
isInQuote	astyle/src/astyle.h	/^		bool isInQuote;$/;"	m	class:astyle::ASFormatter
isInQuoteContinuation	astyle/src/astyle.h	/^		bool isInQuoteContinuation;$/;"	m	class:astyle::ASFormatter
isInStatement	astyle/src/astyle.h	/^		bool isInStatement;$/;"	m	class:astyle::ASBeautifier
isInSwitch	astyle/src/astyle.h	/^		bool isInSwitch;$/;"	m	class:astyle::ASBeautifier
isInSwitchStatement	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isInSwitchStatement() const$/;"	f	class:astyle::ASFormatter
isInTemplate	astyle/src/astyle.h	/^		bool isInTemplate;$/;"	m	class:astyle::ASBeautifier
isInTemplate	astyle/src/astyle.h	/^		bool isInTemplate;$/;"	m	class:astyle::ASFormatter
isInVerbatimQuote	astyle/src/astyle.h	/^		bool isInVerbatimQuote;$/;"	m	class:astyle::ASBeautifier
isInVerbatimQuote	astyle/src/astyle.h	/^		bool isInVerbatimQuote;$/;"	m	class:astyle::ASFormatter
isIndentModeOff	astyle/src/astyle.h	/^		bool isIndentModeOff;$/;"	m	class:astyle::ASBeautifier
isIndentablePreprocessorBlock	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isIndentablePreprocessorBlock(string &firstLine, size_t index)$/;"	f	class:astyle::ASFormatter
isIndentableProprocessor	astyle/src/astyle.h	/^		bool isIndentableProprocessor;$/;"	m	class:astyle::ASFormatter
isIndentableProprocessorBlock	astyle/src/astyle.h	/^		bool isIndentableProprocessorBlock;$/;"	m	class:astyle::ASFormatter
isIndentedPreprocessor	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::isIndentedPreprocessor(const string &line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
isJavaStaticConstructor	astyle/src/astyle.h	/^		bool isJavaStaticConstructor;$/;"	m	class:astyle::ASFormatter
isJavaStyle	astyle/src/astyle.h	/^		bool isJavaStyle() const { return (baseFileType == JAVA_TYPE); }$/;"	f	class:astyle::ASBase
isLegalNameChar	astyle/src/astyle.h	/^		bool isLegalNameChar(char ch) const {$/;"	f	class:astyle::ASBase
isLineBreakBeforeClosingHeader	astyle/src/ASFormatter.cpp	/^void ASFormatter::isLineBreakBeforeClosingHeader()$/;"	f	class:astyle::ASFormatter
isLineEndComment	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::isLineEndComment(const string &line, int startPos) const$/;"	f	class:astyle::ASBeautifier
isLineReady	astyle/src/astyle.h	/^		bool isLineReady;$/;"	m	class:astyle::ASFormatter
isModeManuallySet	astyle/src/astyle.h	/^		bool isModeManuallySet;$/;"	m	class:astyle::ASBeautifier
isNextCharOpeningBracket	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isNextCharOpeningBracket(int startChar) const$/;"	f	class:astyle::ASFormatter
isNextWordSharpNonParenHeader	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isNextWordSharpNonParenHeader(int startChar) const$/;"	f	class:astyle::ASFormatter
isNonInStatementArray	astyle/src/astyle.h	/^		bool isNonInStatementArray;$/;"	m	class:astyle::ASBeautifier
isNonInStatementArrayBracket	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isNonInStatementArrayBracket() const$/;"	f	class:astyle::ASFormatter
isNonParenHeader	astyle/src/astyle.h	/^		bool isNonParenHeader;$/;"	m	class:astyle::ASFormatter
isOkToBreakBlock	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isOkToBreakBlock(BracketType bracketType) const$/;"	f	class:astyle::ASFormatter
isOkToSplitFormattedLine	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isOkToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter
isOneLineBlockReached	astyle/src/ASEnhancer.cpp	/^bool ASEnhancer::isOneLineBlockReached(string &line, int startChar) const$/;"	f	class:astyle::ASEnhancer
isOneLineBlockReached	astyle/src/ASFormatter.cpp	/^int ASFormatter::isOneLineBlockReached(string &line, int startChar) const$/;"	f	class:astyle::ASFormatter
isOperatorPaddingDisabled	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isOperatorPaddingDisabled() const$/;"	f	class:astyle::ASFormatter
isOption	astyle/src/astyle_main.cpp	/^bool ASConsole::isOption(const string &arg, const char* a, const char* b)$/;"	f	class:astyle::ASConsole
isOption	astyle/src/astyle_main.cpp	/^bool ASConsole::isOption(const string &arg, const char* op)$/;"	f	class:astyle::ASConsole
isOption	astyle/src/astyle_main.cpp	/^bool ASOptions::isOption(const string &arg, const char* op)$/;"	f	class:astyle::ASOptions
isOption	astyle/src/astyle_main.cpp	/^bool ASOptions::isOption(const string &arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions
isOptionError	astyle/src/astyle_main.cpp	/^void ASOptions::isOptionError(const string &arg, const string &errorInfo)$/;"	f	class:astyle::ASOptions
isParamOption	astyle/src/astyle_main.cpp	/^bool ASConsole::isParamOption(const string &arg, const char* option)$/;"	f	class:astyle::ASConsole
isParamOption	astyle/src/astyle_main.cpp	/^bool ASOptions::isParamOption(const string &arg, const char* option)$/;"	f	class:astyle::ASOptions
isParamOption	astyle/src/astyle_main.cpp	/^bool ASOptions::isParamOption(const string &arg, const char* option1, const char* option2)$/;"	f	class:astyle::ASOptions
isPathExclued	astyle/src/astyle_main.cpp	/^bool ASConsole::isPathExclued(const string &subPath)$/;"	f	class:astyle::ASConsole
isPointerOrReference	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isPointerOrReference() const$/;"	f	class:astyle::ASFormatter
isPointerOrReferenceCentered	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceCentered() const$/;"	f	class:astyle::ASFormatter
isPointerOrReferenceVariable	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceVariable(string &word) const$/;"	f	class:astyle::ASFormatter
isPrependPostBlockEmptyLineRequested	astyle/src/astyle.h	/^		bool isPrependPostBlockEmptyLineRequested;$/;"	m	class:astyle::ASFormatter
isPreprocessorConditionalCplusplus	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::isPreprocessorConditionalCplusplus(const string &line) const$/;"	f	class:astyle::ASBeautifier
isPreviousBracketBlockRelated	astyle/src/astyle.h	/^		bool isPreviousBracketBlockRelated;$/;"	m	class:astyle::ASFormatter
isPreviousCharPostComment	astyle/src/astyle.h	/^		bool isPreviousCharPostComment;$/;"	m	class:astyle::ASFormatter
isQuiet	astyle/src/astyle_main.h	/^		bool isQuiet;                       \/\/ quiet option$/;"	m	class:astyle::ASConsole
isRecursive	astyle/src/astyle_main.h	/^		bool isRecursive;                   \/\/ recursive option$/;"	m	class:astyle::ASConsole
isSequenceReached	astyle/src/astyle.h	/^		bool isSequenceReached(const char* sequence) const {$/;"	f	class:astyle::ASFormatter
isSharpAccessor	astyle/src/astyle.h	/^		bool isSharpAccessor;$/;"	m	class:astyle::ASBeautifier
isSharpDelegate	astyle/src/astyle.h	/^		bool isSharpDelegate;$/;"	m	class:astyle::ASBeautifier
isSharpStyle	astyle/src/astyle.h	/^		bool isSharpStyle() const { return (baseFileType == SHARP_TYPE); }$/;"	f	class:astyle::ASBase
isSharpStyleWithParen	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isSharpStyleWithParen(const string* header) const$/;"	f	class:astyle::ASFormatter
isSpecialChar	astyle/src/astyle.h	/^		bool isSpecialChar;$/;"	m	class:astyle::ASFormatter
isStructAccessModified	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isStructAccessModified(string &firstLine, size_t index) const$/;"	f	class:astyle::ASFormatter
isUnaryOperator	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isUnaryOperator() const$/;"	f	class:astyle::ASFormatter
isUniformInitializerBracket	astyle/src/ASFormatter.cpp	/^bool ASFormatter::isUniformInitializerBracket() const$/;"	f	class:astyle::ASFormatter
isVerbose	astyle/src/astyle_main.h	/^		bool isVerbose;                     \/\/ verbose option$/;"	m	class:astyle::ASConsole
isVirgin	astyle/src/astyle.h	/^		bool isVirgin;$/;"	m	class:astyle::ASFormatter
isWhiteSpace	astyle/src/astyle.h	/^		bool isWhiteSpace(char ch) const { return (ch == ' ' || ch == '\\t'); }$/;"	f	class:astyle::ASBase
item	lib/list.h	/^    T item; 	   	     	\/\/ item on the list$/;"	m	class:ListElement
javaErrorHandler	astyle/src/astyle_main.cpp	/^void STDCALL javaErrorHandler(int errorNumber, const char* errorMessage)$/;"	f
javaMemoryAlloc	astyle/src/astyle_main.cpp	/^char* STDCALL javaMemoryAlloc(unsigned long memoryNeeded)$/;"	f
kernel	threads/main.cc	/^Kernel *kernel;$/;"	v
labelIndent	astyle/src/astyle.h	/^		bool labelIndent;$/;"	m	class:astyle::ASBeautifier
last	lib/list.h	/^    ListElement<T> *last;	\/\/ Last element of list$/;"	m	class:List
lastLineHeader	astyle/src/astyle.h	/^		const string* lastLineHeader;$/;"	m	class:astyle::ASBeautifier
lastSector	machine/disk.h	/^    int lastSector;			\/\/ The previous disk request$/;"	m	class:Disk
launchDefaultBrowser	astyle/src/astyle_main.cpp	/^void ASConsole::launchDefaultBrowser(const char* filePathIn \/*NULL*\/) const$/;"	f	class:astyle::ASConsole
leadingSpaces	astyle/src/astyle.h	/^		size_t leadingSpaces;$/;"	m	class:astyle::ASFormatter
length	machine/network.h	/^    unsigned length;	 	\/\/ bytes of packet data, excluding the$/;"	m	class:PacketHeader
length	network/post.h	/^    unsigned length;		\/\/ Bytes of message data (excluding the$/;"	m	class:MailHeader
level	machine/interrupt.h	/^    IntStatus level;		\/\/ are interrupts enabled or disabled?$/;"	m	class:Interrupt
lineBeginsWithCloseBracket	astyle/src/astyle.h	/^		bool lineBeginsWithCloseBracket;$/;"	m	class:astyle::ASBeautifier
lineBeginsWithComma	astyle/src/astyle.h	/^		bool lineBeginsWithComma;$/;"	m	class:astyle::ASBeautifier
lineBeginsWithOpenBracket	astyle/src/astyle.h	/^		bool lineBeginsWithOpenBracket;$/;"	m	class:astyle::ASBeautifier
lineClosingBlocksNum	astyle/src/astyle.h	/^		int  lineClosingBlocksNum;$/;"	m	class:astyle::ASBeautifier
lineCommentNoBeautify	astyle/src/astyle.h	/^		bool lineCommentNoBeautify;$/;"	m	class:astyle::ASBeautifier
lineCommentNoIndent	astyle/src/astyle.h	/^		bool lineCommentNoIndent;$/;"	m	class:astyle::ASFormatter
lineEnd	astyle/src/astyle.h	/^		LineEndFormat lineEnd;$/;"	m	class:astyle::ASFormatter
lineEndsInCommentOnly	astyle/src/astyle.h	/^		bool lineEndsInCommentOnly;$/;"	m	class:astyle::ASFormatter
lineEndsMixed	astyle/src/astyle_main.h	/^		bool lineEndsMixed;                 \/\/ output has mixed line ends$/;"	m	class:astyle::ASConsole
lineIsCommentOnly	astyle/src/astyle.h	/^		bool lineIsCommentOnly;$/;"	m	class:astyle::ASBeautifier
lineIsCommentOnly	astyle/src/astyle.h	/^		bool lineIsCommentOnly;$/;"	m	class:astyle::ASFormatter
lineIsEmpty	astyle/src/astyle.h	/^		bool lineIsEmpty;$/;"	m	class:astyle::ASFormatter
lineIsLineCommentOnly	astyle/src/astyle.h	/^		bool lineIsLineCommentOnly;$/;"	m	class:astyle::ASBeautifier
lineIsLineCommentOnly	astyle/src/astyle.h	/^		bool lineIsLineCommentOnly;$/;"	m	class:astyle::ASFormatter
lineNumber	astyle/src/astyle.h	/^		int  lineNumber;$/;"	m	class:astyle::ASEnhancer
lineOpeningBlocksNum	astyle/src/astyle.h	/^		int  lineOpeningBlocksNum;$/;"	m	class:astyle::ASBeautifier
lineOpensWithComment	astyle/src/astyle.h	/^		bool lineOpensWithComment;$/;"	m	class:astyle::ASBeautifier
lineOpensWithLineComment	astyle/src/astyle.h	/^		bool lineOpensWithLineComment;$/;"	m	class:astyle::ASBeautifier
lineStartsInComment	astyle/src/astyle.h	/^		bool lineStartsInComment;$/;"	m	class:astyle::ASBeautifier
linesOut	astyle/src/astyle_main.h	/^		int  linesOut;                      \/\/ number of output lines$/;"	m	class:astyle::ASConsole
list	threads/synchlist.h	/^    List<T> *list;		\/\/ the list of things$/;"	m	class:SynchList
listEmpty	threads/synchlist.h	/^    Condition *listEmpty;	\/\/ wait in Remove if the list is empty$/;"	m	class:SynchList
listTestVector	lib/libtest.cc	/^static int listTestVector[] = { 9, 5, 7 };$/;"	v	file:
localizer	astyle/src/astyle_main.h	/^		ASLocalizer localizer;              \/\/ ASLocalizer object$/;"	m	class:astyle::ASConsole
lock	filesys/synchdisk.h	/^    Lock *lock;		  		\/\/ Only one read\/write request$/;"	m	class:SynchDisk
lock	threads/synchlist.h	/^    Lock *lock;			\/\/ enforce mutual exclusive access to the list$/;"	m	class:SynchList
lock	userprog/synchconsole.h	/^    Lock *lock;			\/\/ only one reader at a time$/;"	m	class:SynchConsoleInput
lock	userprog/synchconsole.h	/^    Lock *lock;			\/\/ only one writer at a time$/;"	m	class:SynchConsoleOutput
lockHolder	threads/synch.h	/^    Thread *lockHolder;		\/\/ thread currently holding lock$/;"	m	class:Lock
lookingForCaseBracket	astyle/src/astyle.h	/^		bool lookingForCaseBracket;$/;"	m	class:astyle::ASEnhancer
m_langID	astyle/src/ASLocalizer.h	/^		string m_langID;				\/\/ language identifier from the locale$/;"	m	class:astyle::ASLocalizer
m_lcid	astyle/src/ASLocalizer.h	/^		size_t m_lcid;					\/\/ LCID of the user locale (Windows only)$/;"	m	class:astyle::ASLocalizer
m_localeName	astyle/src/ASLocalizer.h	/^		string m_localeName;			\/\/ name of the current locale (Linux only)$/;"	m	class:astyle::ASLocalizer
m_subLangID	astyle/src/ASLocalizer.h	/^		string m_subLangID;				\/\/ sub language identifier, if needed$/;"	m	class:astyle::ASLocalizer
m_translation	astyle/src/ASLocalizer.h	/^		Translation* m_translation;		\/\/ pointer to a polymorphic Translation class$/;"	m	class:astyle::ASLocalizer
m_translation	astyle/src/ASLocalizer.h	/^		vector<pair<string, wstring> > m_translation;		\/\/ translation vector$/;"	m	class:astyle::Translation
machine	threads/kernel.h	/^    Machine *machine;           \/\/ the simulated CPU$/;"	m	class:Kernel
machineState	threads/thread.h	/^    void *machineState[MachineStateSize];  \/\/ all registers except for stackTop$/;"	m	class:Thread
mailHdr	network/post.h	/^    MailHeader mailHdr;	\/\/ Header appended by PostOffice$/;"	m	class:Mail
main	astyle/src/astyle_main.cpp	/^int main(int argc, char** argv)$/;"	f
main	test/FS_test1.c	/^int main(void)$/;"	f
main	test/FS_test2.c	/^int main(void)$/;"	f
main	test/add.c	/^main()$/;"	f
main	test/consoleIO_test1.c	/^main()$/;"	f
main	test/consoleIO_test2.c	/^main()$/;"	f
main	test/fileIO_test1.c	/^int main(void)$/;"	f
main	test/fileIO_test2.c	/^int main(void)$/;"	f
main	test/gen64MBfile.cpp	/^int main()$/;"	f
main	test/halt.c	/^main()$/;"	f
main	test/matmult.c	/^main()$/;"	f
main	test/segments.c	/^main()$/;"	f
main	test/shell.c	/^main()$/;"	f
main	test/sort.c	/^main()$/;"	f
main	threads/main.cc	/^main(int argc, char **argv)$/;"	f
mainDirectoryLength	astyle/src/astyle_main.h	/^		size_t mainDirectoryLength;         \/\/ directory length to be excluded in displays$/;"	m	class:astyle::ASConsole
mainMemory	machine/machine.h	/^    char *mainMemory;		\/\/ physical memory to store user program,$/;"	m	class:Machine
map	lib/bitmap.h	/^    unsigned int *map;		\/\/ bit storage$/;"	m	class:Bitmap
max	lib/utility.h	21;"	d
maxAndOr	astyle/src/astyle.h	/^		size_t maxAndOr;		\/\/ probably an 'if' statement$/;"	m	class:astyle::ASFormatter
maxAndOrPending	astyle/src/astyle.h	/^		size_t maxAndOrPending;$/;"	m	class:astyle::ASFormatter
maxCodeLength	astyle/src/astyle.h	/^		size_t maxCodeLength;$/;"	m	class:astyle::ASFormatter
maxComma	astyle/src/astyle.h	/^		size_t maxComma;$/;"	m	class:astyle::ASFormatter
maxCommaPending	astyle/src/astyle.h	/^		size_t maxCommaPending;$/;"	m	class:astyle::ASFormatter
maxInStatementIndent	astyle/src/astyle.h	/^		int  maxInStatementIndent;$/;"	m	class:astyle::ASBeautifier
maxParen	astyle/src/astyle.h	/^		size_t maxParen;$/;"	m	class:astyle::ASFormatter
maxParenPending	astyle/src/astyle.h	/^		size_t maxParenPending;$/;"	m	class:astyle::ASFormatter
maxSemi	astyle/src/astyle.h	/^		size_t maxSemi;			\/\/ probably a 'for' statement$/;"	m	class:astyle::ASFormatter
maxSemiPending	astyle/src/astyle.h	/^		size_t maxSemiPending;$/;"	m	class:astyle::ASFormatter
maxWhiteSpace	astyle/src/astyle.h	/^		size_t maxWhiteSpace;$/;"	m	class:astyle::ASFormatter
maxWhiteSpacePending	astyle/src/astyle.h	/^		size_t maxWhiteSpacePending;$/;"	m	class:astyle::ASFormatter
messageAvailable	network/post.h	/^    Semaphore *messageAvailable;\/\/ V'ed when message has arrived from network$/;"	m	class:PostOfficeInput
messageSent	network/post.h	/^    Semaphore *messageSent;	\/\/ V'ed when next message can be sent to network$/;"	m	class:PostOfficeOutput
messages	network/post.h	/^    SynchList<Mail *> *messages; \/\/ A mailbox is just a list of arrived messages$/;"	m	class:MailBox
min	lib/utility.h	20;"	d
minConditionalIndent	astyle/src/astyle.h	/^		int  minConditionalIndent;$/;"	m	class:astyle::ASBeautifier
minConditionalOption	astyle/src/astyle.h	/^		int  minConditionalOption;$/;"	m	class:astyle::ASBeautifier
modifierIndent	astyle/src/astyle.h	/^		bool modifierIndent;$/;"	m	class:astyle::ASBeautifier
name	filesys/directory.h	/^    char name[FileNameMaxLen + 1];	\/\/ Text name for file, with +1 for$/;"	m	class:DirectoryEntry
name	threads/synch.h	/^    char *name;			\/\/ debugging assist$/;"	m	class:Lock
name	threads/synch.h	/^    char* name;        \/\/ useful for debugging$/;"	m	class:Semaphore
name	threads/synch.h	/^    char* name;$/;"	m	class:Condition
name	threads/thread.h	/^    char* name;$/;"	m	class:Thread
namespaceIndent	astyle/src/astyle.h	/^		bool namespaceIndent;$/;"	m	class:astyle::ASBeautifier
namespaceIndent	astyle/src/astyle.h	/^		bool namespaceIndent;$/;"	m	class:astyle::ASEnhancer
needHeaderOpeningBracket	astyle/src/astyle.h	/^		bool needHeaderOpeningBracket;$/;"	m	class:astyle::ASFormatter
network	network/post.h	/^    NetworkInput *network;	\/\/ Physical network connection$/;"	m	class:PostOfficeInput
network	network/post.h	/^    NetworkOutput *network;	\/\/ Physical network connection$/;"	m	class:PostOfficeOutput
next	lib/list.h	/^    ListElement *next;	     	\/\/ next element on list, NULL if this is last$/;"	m	class:ListElement
nextFileHeader	filesys/filehdr.h	/^    FileHeader *nextFileHeader;$/;"	m	class:FileHeader
nextFileHeaderSector	filesys/filehdr.h	/^    int nextFileHeaderSector;               \/\/ Next index of file header, -1: no next$/;"	m	class:FileHeader
nextLine	astyle/src/ASFormatter.cpp	/^string ASFormatter::nextLine()$/;"	f	class:astyle::ASFormatter
nextLine	astyle/src/astyle_main.cpp	/^string ASStreamIterator<T>::nextLine(bool emptyLineWasDeleted)$/;"	f	class:astyle::ASStreamIterator
nextLineIsDeclareIndent	astyle/src/astyle.h	/^		bool nextLineIsDeclareIndent;           \/\/ begin declare section indent is reached$/;"	m	class:astyle::ASEnhancer
nextLineIsEventIndent	astyle/src/astyle.h	/^		bool nextLineIsEventIndent;             \/\/ begin event table indent is reached$/;"	m	class:astyle::ASEnhancer
nextLineSpacePadNum	astyle/src/astyle.h	/^		int  nextLineSpacePadNum;$/;"	m	class:astyle::ASFormatter
noBackup	astyle/src/astyle_main.h	/^		bool noBackup;                      \/\/ suffix=none option$/;"	m	class:astyle::ASConsole
noTrimCommentContinuation	astyle/src/astyle.h	/^		bool noTrimCommentContinuation;$/;"	m	class:astyle::ASFormatter
noffHeader	userprog/noff.h	/^typedef struct noffHeader$/;"	s
noffMagic	userprog/noff.h	/^    int noffMagic;		\/* should be NOFFMAGIC *\/$/;"	m	struct:noffHeader
nonAssignmentOperators	astyle/src/astyle.h	/^		vector<const string*>* nonAssignmentOperators;$/;"	m	class:astyle::ASBeautifier
nonInStatementBracket	astyle/src/astyle.h	/^		int  nonInStatementBracket;$/;"	m	class:astyle::ASBeautifier
nonParenHeaders	astyle/src/astyle.h	/^		vector<const string*>* nonParenHeaders;$/;"	m	class:astyle::ASBeautifier
nonParenHeaders	astyle/src/astyle.h	/^		vector<const string*>* nonParenHeaders;$/;"	m	class:astyle::ASFormatter
numBits	lib/bitmap.h	/^    int numBits;		\/\/ number of bits in the bitmap$/;"	m	class:Bitmap
numBoxes	network/post.h	/^    int numBoxes;		\/\/ Number of mail boxes$/;"	m	class:PostOfficeInput
numBuckets	lib/hash.h	/^    int numBuckets;		\/\/ the number of buckets$/;"	m	class:HashTable
numBytes	filesys/filehdr.h	/^    int numBytes;			\/\/ Number of bytes in the file$/;"	m	class:FileHeader
numConsoleCharsRead	machine/stats.h	/^    int numConsoleCharsRead;	\/\/ number of characters read from the keyboard$/;"	m	class:Statistics
numConsoleCharsWritten	machine/stats.h	/^    int numConsoleCharsWritten; \/\/ number of characters written to the display$/;"	m	class:Statistics
numDiskReads	machine/stats.h	/^    int numDiskReads;		\/\/ number of disk read requests$/;"	m	class:Statistics
numDiskWrites	machine/stats.h	/^    int numDiskWrites;		\/\/ number of disk write requests$/;"	m	class:Statistics
numInList	lib/list.h	/^    int numInList;		\/\/ number of elements in list$/;"	m	class:List
numItems	lib/hash.h	/^    int numItems;		\/\/ the number of items in the table$/;"	m	class:HashTable
numPacketsRecvd	machine/stats.h	/^    int numPacketsRecvd;	\/\/ number of packets received over the network$/;"	m	class:Statistics
numPacketsSent	machine/stats.h	/^    int numPacketsSent;		\/\/ number of packets sent over the network$/;"	m	class:Statistics
numPageFaults	machine/stats.h	/^    int numPageFaults;		\/\/ number of virtual memory page faults$/;"	m	class:Statistics
numPages	userprog/addrspace.h	/^    unsigned int numPages;		\/\/ Number of pages in the virtual$/;"	m	class:AddrSpace
numSectors	filesys/filehdr.h	/^    int numSectors;			\/\/ Number of data sectors in the file$/;"	m	class:FileHeader
numWords	lib/bitmap.h	/^    int numWords;		\/\/ number of words of bitmap storage$/;"	m	class:Bitmap
objCColonPadMode	astyle/src/astyle.h	/^		ObjCColonPad objCColonPadMode;$/;"	m	class:astyle::ASFormatter
objdir	astyle/build/clang/Makefile	/^objdir = obj$/;"	m
objdir	astyle/build/gcc/Makefile	/^objdir = obj$/;"	m
objdir	astyle/build/intel/Makefile	/^objdir = obj$/;"	m
opCode	machine/mipssim.cc	/^    char opCode;     \/\/ Type of instruction.  This is NOT the same as the$/;"	m	class:Instruction	file:
opCode	machine/mipssim.h	/^    int opCode;		\/* Translated op code. *\/$/;"	m	struct:OpInfo
opStrings	machine/mipssim.h	/^static struct OpString opStrings[] =$/;"	v	typeref:struct:OpString
opTable	machine/mipssim.h	/^static OpInfo opTable[] =$/;"	v
operators	astyle/src/astyle.h	/^		vector<const string*>* operators;$/;"	m	class:astyle::ASFormatter
optionErrors	astyle/src/astyle_main.h	/^		stringstream optionErrors;		\/\/ option error messages$/;"	m	class:astyle::ASOptions
optionsFileName	astyle/src/astyle_main.h	/^		string optionsFileName;             \/\/ file path and name of the options file to use$/;"	m	class:astyle::ASConsole
optionsFileRequired	astyle/src/astyle_main.h	/^		bool optionsFileRequired;           \/\/ options= option$/;"	m	class:astyle::ASConsole
optionsVector	astyle/src/astyle_main.h	/^		vector<string> optionsVector;       \/\/ options from the command line$/;"	m	class:astyle::ASConsole
origSuffix	astyle/src/astyle_main.h	/^		string origSuffix;                  \/\/ suffix= option$/;"	m	class:astyle::ASConsole
outputEOL	astyle/src/astyle_main.h	/^		char outputEOL[4];                  \/\/ current line end$/;"	m	class:astyle::ASConsole
outputEOL	astyle/src/astyle_main.h	/^		char outputEOL[4];      \/\/ next output end of line char$/;"	m	class:astyle::ASStreamIterator
packetAvail	machine/network.h	/^    bool packetAvail;		\/\/ Packet has arrived, can be pulled off of$/;"	m	class:NetworkInput
padObjCMethodColon	astyle/src/ASFormatter.cpp	/^void ASFormatter::padObjCMethodColon()$/;"	f	class:astyle::ASFormatter
padOperators	astyle/src/ASFormatter.cpp	/^void ASFormatter::padOperators(const string* newOperator)$/;"	f	class:astyle::ASFormatter
padParens	astyle/src/ASFormatter.cpp	/^void ASFormatter::padParens(void)$/;"	f	class:astyle::ASFormatter
pageTable	machine/machine.h	/^    TranslationEntry *pageTable;$/;"	m	class:Machine
pageTable	userprog/addrspace.h	/^    TranslationEntry *pageTable;	\/\/ Assume linear page table translation$/;"	m	class:AddrSpace
pageTableSize	machine/machine.h	/^    unsigned int pageTableSize;$/;"	m	class:Machine
parenDepth	astyle/src/astyle.h	/^		int  parenDepth;$/;"	m	class:astyle::ASBeautifier
parenIndentStack	astyle/src/astyle.h	/^		vector<int>* parenIndentStack;$/;"	m	class:astyle::ASBeautifier
parenStack	astyle/src/astyle.h	/^		vector<int>* parenStack;$/;"	m	class:astyle::ASFormatter
parenStatementStack	astyle/src/astyle.h	/^		vector<bool>* parenStatementStack;$/;"	m	class:astyle::ASBeautifier
parseCurrentLine	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::parseCurrentLine(const string &line)$/;"	f	class:astyle::ASBeautifier
parseCurrentLine	astyle/src/ASEnhancer.cpp	/^void ASEnhancer::parseCurrentLine(string &line, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer
parseOption	astyle/src/astyle_main.cpp	/^void ASOptions::parseOption(const string &arg, const string &errorInfo)$/;"	f	class:astyle::ASOptions
parseOptions	astyle/src/astyle_main.cpp	/^bool ASOptions::parseOptions(vector<string> &optionsVector, const string &errorInfo)$/;"	f	class:astyle::ASOptions
passedColon	astyle/src/astyle.h	/^		bool passedColon;$/;"	m	class:astyle::ASFormatter
passedSemicolon	astyle/src/astyle.h	/^		bool passedSemicolon;$/;"	m	class:astyle::ASFormatter
peekNextChar	astyle/src/ASFormatter.cpp	/^char ASFormatter::peekNextChar() const$/;"	f	class:astyle::ASFormatter
peekNextChar	astyle/src/astyle.h	/^		char peekNextChar(const string &line, int i) const {$/;"	f	class:astyle::ASBase
peekNextLine	astyle/src/astyle_main.cpp	/^string ASStreamIterator<T>::peekNextLine()$/;"	f	class:astyle::ASStreamIterator
peekNextText	astyle/src/ASFormatter.cpp	/^string ASFormatter::peekNextText(const string &firstLine, bool endOnEmptyLine \/*false*\/, bool shouldReset \/*false*\/) const$/;"	f	class:astyle::ASFormatter
peekReset	astyle/src/astyle_main.cpp	/^void ASStreamIterator<T>::peekReset()$/;"	f	class:astyle::ASStreamIterator
peekStart	astyle/src/astyle_main.h	/^		streamoff peekStart;    \/\/ starting position for peekNextLine$/;"	m	class:astyle::ASStreamIterator
pending	machine/interrupt.h	/^    SortedList<PendingInterrupt *> *pending;$/;"	m	class:Interrupt
physicalPage	machine/translate.h	/^    int physicalPage;  	\/\/ The page number in real memory (relative to the$/;"	m	class:TranslationEntry
ping	threads/synch.cc	/^static Semaphore *ping;$/;"	v	file:
pktHdr	network/post.h	/^    PacketHeader pktHdr;	\/\/ Header appended by Network$/;"	m	class:Mail
pointerAlignment	astyle/src/astyle.h	/^		PointerAlign pointerAlignment;$/;"	m	class:astyle::ASFormatter
pointerSymbolFollows	astyle/src/ASFormatter.cpp	/^bool ASFormatter::pointerSymbolFollows() const$/;"	f	class:astyle::ASFormatter
popLastInStatementIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::popLastInStatementIndent()$/;"	f	class:astyle::ASBeautifier
postOfficeIn	threads/kernel.h	/^    PostOfficeInput *postOfficeIn;$/;"	m	class:Kernel
postOfficeOut	threads/kernel.h	/^    PostOfficeOutput *postOfficeOut;$/;"	m	class:Kernel
preBlockStatements	astyle/src/astyle.h	/^		vector<const string*>* preBlockStatements;$/;"	m	class:astyle::ASBeautifier
preBracketHeaderStack	astyle/src/astyle.h	/^		vector<const string*>* preBracketHeaderStack;$/;"	m	class:astyle::ASFormatter
preCommandHeaders	astyle/src/astyle.h	/^		vector<const string*>* preCommandHeaders;$/;"	m	class:astyle::ASBeautifier
preCommandHeaders	astyle/src/astyle.h	/^		vector<const string*>* preCommandHeaders;$/;"	m	class:astyle::ASFormatter
preDefinitionHeaders	astyle/src/astyle.h	/^		vector<const string*>* preDefinitionHeaders;$/;"	m	class:astyle::ASFormatter
preLineWS	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::preLineWS(int lineIndentCount, int lineSpaceIndentCount) const$/;"	f	class:astyle::ASBeautifier
prefix	astyle/build/clang/Makefile	/^    prefix=\/usr$/;"	m
prefix	astyle/build/gcc/Makefile	/^    prefix=\/usr$/;"	m
prefix	astyle/build/intel/Makefile	/^    prefix=\/usr$/;"	m
prependEmptyLine	astyle/src/astyle.h	/^		bool prependEmptyLine;$/;"	m	class:astyle::ASFormatter
preprocBlockEnd	astyle/src/astyle.h	/^		streamoff preprocBlockEnd;$/;"	m	class:astyle::ASFormatter
preprocBlockIndent	astyle/src/astyle.h	/^		bool preprocBlockIndent;$/;"	m	class:astyle::ASEnhancer
preprocBlockIndent	astyle/src/astyle.h	/^		int  preprocBlockIndent;$/;"	m	class:astyle::ASBeautifier
preprocBracketTypeStackSize	astyle/src/astyle.h	/^		int  preprocBracketTypeStackSize;$/;"	m	class:astyle::ASFormatter
preprocDefineIndent	astyle/src/astyle.h	/^		bool preprocDefineIndent;$/;"	m	class:astyle::ASEnhancer
preprocIndentStack	astyle/src/astyle.h	/^		vector<pair<int, int> >* preprocIndentStack;$/;"	m	class:astyle::ASBeautifier
preserveDate	astyle/src/astyle_main.h	/^		bool preserveDate;                  \/\/ preserve-date option$/;"	m	class:astyle::ASConsole
prevBuffer	astyle/src/astyle_main.h	/^		string prevBuffer;      \/\/ previous input line$/;"	m	class:astyle::ASStreamIterator
prevEOL	astyle/src/astyle_main.h	/^		char prevEOL[4];                    \/\/ previous line end$/;"	m	class:astyle::ASConsole
prevFinalLineIndentCount	astyle/src/astyle.h	/^		int  prevFinalLineIndentCount;$/;"	m	class:astyle::ASBeautifier
prevFinalLineSpaceIndentCount	astyle/src/astyle.h	/^		int  prevFinalLineSpaceIndentCount;$/;"	m	class:astyle::ASBeautifier
prevLineDeleted	astyle/src/astyle_main.h	/^		bool prevLineDeleted;   \/\/ the previous input line was deleted$/;"	m	class:astyle::ASStreamIterator
prevNonLegalCh	astyle/src/astyle.h	/^		char prevNonLegalCh;$/;"	m	class:astyle::ASBeautifier
prevNonSpaceCh	astyle/src/astyle.h	/^		char prevNonSpaceCh;$/;"	m	class:astyle::ASBeautifier
previousBracketType	astyle/src/astyle.h	/^		BracketType previousBracketType;$/;"	m	class:astyle::ASFormatter
previousChar	astyle/src/astyle.h	/^		char previousChar;$/;"	m	class:astyle::ASFormatter
previousCommandChar	astyle/src/astyle.h	/^		char previousCommandChar;$/;"	m	class:astyle::ASFormatter
previousLastLineHeader	astyle/src/astyle.h	/^		const string* previousLastLineHeader;$/;"	m	class:astyle::ASBeautifier
previousLineProbationTab	astyle/src/astyle.h	/^		bool previousLineProbationTab;$/;"	m	class:astyle::ASBeautifier
previousNonWSChar	astyle/src/astyle.h	/^		char previousNonWSChar;$/;"	m	class:astyle::ASFormatter
previousOperator	astyle/src/astyle.h	/^		const string* previousOperator;    \/\/ used ONLY by pad-oper$/;"	m	class:astyle::ASFormatter
previousReadyFormattedLineLength	astyle/src/astyle.h	/^		size_t previousReadyFormattedLineLength;$/;"	m	class:astyle::ASFormatter
printHelp	astyle/src/astyle_main.cpp	/^void ASConsole::printHelp() const$/;"	f	class:astyle::ASConsole
printMsg	astyle/src/astyle_main.cpp	/^void ASConsole::printMsg(const char* msg, const string &data) const$/;"	f	class:astyle::ASConsole
printSeparatingLine	astyle/src/astyle_main.cpp	/^void ASConsole::printSeparatingLine() const$/;"	f	class:astyle::ASConsole
printVerboseHeader	astyle/src/astyle_main.cpp	/^void ASConsole::printVerboseHeader() const$/;"	f	class:astyle::ASConsole
printVerboseStats	astyle/src/astyle_main.cpp	/^void ASConsole::printVerboseStats(clock_t startTime) const$/;"	f	class:astyle::ASConsole
probationHeader	astyle/src/astyle.h	/^		const string* probationHeader;$/;"	m	class:astyle::ASBeautifier
processFiles	astyle/src/astyle_main.cpp	/^void ASConsole::processFiles()$/;"	f	class:astyle::ASConsole
processOptions	astyle/src/astyle_main.cpp	/^void ASConsole::processOptions(vector<string> &argvOptions)$/;"	f	class:astyle::ASConsole
processPreprocessor	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::processPreprocessor(const string &preproc, const string &line)$/;"	f	class:astyle::ASBeautifier
processPreprocessor	astyle/src/ASFormatter.cpp	/^void ASFormatter::processPreprocessor()$/;"	f	class:astyle::ASFormatter
processSwitchBlock	astyle/src/ASEnhancer.cpp	/^size_t ASEnhancer::processSwitchBlock(string &line, size_t index)$/;"	f	class:astyle::ASEnhancer
processedFirstConditional	astyle/src/astyle.h	/^		bool processedFirstConditional;$/;"	m	class:astyle::ASFormatter
putBusy	machine/console.h	/^    bool putBusy;    			\/\/ Is a PutChar operation in progress?$/;"	m	class:ConsoleOutput
pv	threads/switch.S	/^#define pv	$27	\/* (T)		procedure value		*\/$/;"	d
questionMarkStack	astyle/src/astyle.h	/^		vector<bool>* questionMarkStack;$/;"	m	class:astyle::ASFormatter
queue	threads/synch.h	/^    List<Thread *> *queue;$/;"	m	class:Semaphore
quoteChar	astyle/src/astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASBeautifier
quoteChar	astyle/src/astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASEnhancer
quoteChar	astyle/src/astyle.h	/^		char quoteChar;$/;"	m	class:astyle::ASFormatter
ra	threads/switch.S	/^#define ra	$26	\/* (T)		return address		*\/$/;"	d
ra	threads/switch.S	/^#define ra      $31     \/* return address *\/$/;"	d
randomSlice	threads/kernel.h	/^    bool randomSlice;		\/\/ enable pseudo-random time slicing$/;"	m	class:Kernel
randomize	machine/timer.h	/^    bool randomize;		\/\/ set if we need to use a random timeout delay$/;"	m	class:Timer
rd	machine/mipssim.cc	/^    char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction	file:
readFile	astyle/src/astyle_main.cpp	/^FileEncoding ASConsole::readFile(const string &fileName_, stringstream &in) const$/;"	f	class:astyle::ASConsole
readFileNo	machine/console.h	/^    int readFileNo;			\/\/ UNIX file emulating the keyboard$/;"	m	class:ConsoleInput
readOnly	machine/translate.h	/^    bool readOnly;	\/\/ If this bit is set, the user program is not allowed$/;"	m	class:TranslationEntry
readonlyData	userprog/noff.h	/^    Segment readonlyData;	\/* read only data *\/$/;"	m	struct:noffHeader
readyFormattedLine	astyle/src/astyle.h	/^		string readyFormattedLine;$/;"	m	class:astyle::ASFormatter
readyList	threads/scheduler.h	/^    List<Thread *> *readyList;  \/\/ queue of threads that are ready to run,$/;"	m	class:Scheduler
referenceAlignment	astyle/src/astyle.h	/^		ReferenceAlign referenceAlignment;$/;"	m	class:astyle::ASFormatter
registerInStatementIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::registerInStatementIndent(const string &line, int i, int spaceTabCount_,$/;"	f	class:astyle::ASBeautifier
registerInStatementIndentColon	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::registerInStatementIndentColon(const string &line, int i, int tabIncrementIn)$/;"	f	class:astyle::ASBeautifier
registers	machine/machine.h	/^    int registers[NumTotalRegs]; \/\/ CPU registers, for executing user programs$/;"	m	class:Machine
reliability	threads/kernel.h	/^    double reliability;         \/\/ likelihood messages are dropped$/;"	m	class:Kernel
removeBracketsFromStatement	astyle/src/ASFormatter.cpp	/^bool ASFormatter::removeBracketsFromStatement()$/;"	f	class:astyle::ASFormatter
removeFile	astyle/src/astyle_main.cpp	/^void ASConsole::removeFile(const char* fileName_, const char* errMsg) const$/;"	f	class:astyle::ASConsole
renameFile	astyle/src/astyle_main.cpp	/^void ASConsole::renameFile(const char* oldFileName, const char* newFileName, const char* errMsg) const$/;"	f	class:astyle::ASConsole
resetEndOfStatement	astyle/src/ASFormatter.cpp	/^void ASFormatter::resetEndOfStatement()$/;"	f	class:astyle::ASFormatter
rs	machine/mipssim.cc	/^    char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction	file:
rt	machine/mipssim.cc	/^    char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction	file:
rtrim	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::rtrim(const string &str) const$/;"	f	class:astyle::ASBeautifier
runUntilTime	machine/machine.h	/^    int runUntilTime;		\/\/ drop back into the debugger when simulated$/;"	m	class:Machine
s0	threads/switch.S	/^#define s0	$9	\/* (S)		call-safe registers	*\/$/;"	d
s0	threads/switch.S	/^#define s0      $16     \/* callee saved *\/$/;"	d
s1	threads/switch.S	/^#define s1	$10$/;"	d
s1	threads/switch.S	/^#define s1      $17$/;"	d
s2	threads/switch.S	/^#define s2	$11$/;"	d
s2	threads/switch.S	/^#define s2      $18$/;"	d
s3	threads/switch.S	/^#define s3	$12$/;"	d
s3	threads/switch.S	/^#define s3      $19$/;"	d
s4	threads/switch.S	/^#define s4	$13$/;"	d
s4	threads/switch.S	/^#define s4      $20$/;"	d
s5	threads/switch.S	/^#define s5	$14$/;"	d
s5	threads/switch.S	/^#define s5      $21$/;"	d
s6	threads/switch.S	/^#define s6	$15$/;"	d
s6	threads/switch.S	/^#define s6      $22$/;"	d
s7	threads/switch.S	/^#define s7      $23$/;"	d
saveLastInputLine	astyle/src/astyle_main.cpp	/^void ASStreamIterator<T>::saveLastInputLine()$/;"	f	class:astyle::ASStreamIterator
scheduler	threads/kernel.h	/^    Scheduler *scheduler;	\/\/ the ready list$/;"	m	class:Kernel
section0	astyle/doc/license.html	/^        <a name="section0"><\/a>0. Additional Definitions.<\/h4>$/;"	a
section1	astyle/doc/license.html	/^        <a name="section1"><\/a>1. Exception to Section 3 of the GNU GPL.<\/h4>$/;"	a
section2	astyle/doc/license.html	/^        <a name="section2"><\/a>2. Conveying Modified Versions.<\/h4>$/;"	a
section3	astyle/doc/license.html	/^        <a name="section3"><\/a>3. Object Code Incorporating Material from Library Header Files.<\/h4>$/;"	a
section4	astyle/doc/license.html	/^        <a name="section4"><\/a>4. Combined Works.<\/h4>$/;"	a
section5	astyle/doc/license.html	/^        <a name="section5"><\/a>5. Combined Libraries.<\/h4>$/;"	a
section6	astyle/doc/license.html	/^        <a name="section6"><\/a>6. Revised Versions of the GNU Lesser General Public License.<\/h4>$/;"	a
sector	filesys/directory.h	/^    int sector;				\/\/ Location on disk to find the$/;"	m	class:DirectoryEntry
seekPosition	filesys/openfile.h	/^    int seekPosition;			\/\/ Current position within the file$/;"	m	class:OpenFile
segment	userprog/noff.h	/^typedef struct segment$/;"	s
selfTestPing	threads/synchlist.h	/^    SynchList<T> *selfTestPing;$/;"	m	class:SynchList
semaphore	filesys/synchdisk.h	/^    Semaphore *semaphore; 		\/\/ To synchronize requesting thread$/;"	m	class:SynchDisk
semaphore	threads/synch.h	/^    Semaphore *semaphore;	\/\/ we use a semaphore to implement lock$/;"	m	class:Lock
sendBusy	machine/network.h	/^    bool sendBusy;		\/\/ Packet is being sent.$/;"	m	class:NetworkOutput
sendLock	network/post.h	/^    Lock *sendLock;		\/\/ Only one outgoing message at a time$/;"	m	class:PostOfficeOutput
setAddBracketsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAddBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setAddOneLineBracketsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAddOneLineBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setAlignMethodColon	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setAlignMethodColon(bool state)$/;"	f	class:astyle::ASBeautifier
setAttachClass	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAttachClass(bool state)$/;"	f	class:astyle::ASFormatter
setAttachClosingBracketMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAttachClosingBracketMode(bool state)$/;"	f	class:astyle::ASFormatter
setAttachExternC	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAttachExternC(bool state)$/;"	f	class:astyle::ASFormatter
setAttachInline	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAttachInline(bool state)$/;"	f	class:astyle::ASFormatter
setAttachNamespace	astyle/src/ASFormatter.cpp	/^void ASFormatter::setAttachNamespace(bool state)$/;"	f	class:astyle::ASFormatter
setBlockIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setBlockIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setBracketFormatMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBracketFormatMode(BracketMode mode)$/;"	f	class:astyle::ASFormatter
setBracketIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setBracketIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setBracketIndentVtk	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setBracketIndentVtk(bool state)$/;"	f	class:astyle::ASBeautifier
setBreakAfterMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBreakAfterMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakBlocksMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBreakBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakClosingHeaderBlocksMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakClosingHeaderBracketsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakElseIfsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBreakElseIfsMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakOneLineBlocksMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setBreakOneLineBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter
setBypassBrowserOpen	astyle/src/astyle_main.cpp	/^void ASConsole::setBypassBrowserOpen(bool state)$/;"	f	class:astyle::ASConsole
setCStyle	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setCStyle()$/;"	f	class:astyle::ASBeautifier
setCaseIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setCaseIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setClassIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setClassIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setCloseTemplatesMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setCloseTemplatesMode(bool state)$/;"	f	class:astyle::ASFormatter
setDefaultTabLength	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setDefaultTabLength()$/;"	f	class:astyle::ASBeautifier
setDeleteEmptyLinesMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setDeleteEmptyLinesMode(bool state)$/;"	f	class:astyle::ASFormatter
setEmptyLineFill	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setEmptyLineFill(bool state)$/;"	f	class:astyle::ASBeautifier
setForceTabXIndentation	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setForceTabXIndentation(int length)$/;"	f	class:astyle::ASBeautifier
setFormattingStyle	astyle/src/ASFormatter.cpp	/^void ASFormatter::setFormattingStyle(FormatStyle style)$/;"	f	class:astyle::ASFormatter
setIgnoreExcludeErrors	astyle/src/astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrors(bool state)$/;"	f	class:astyle::ASConsole
setIgnoreExcludeErrorsAndDisplay	astyle/src/astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrorsAndDisplay(bool state)$/;"	f	class:astyle::ASConsole
setIndentCol1CommentsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setIndentCol1CommentsMode(bool state)$/;"	f	class:astyle::ASFormatter
setIsDryRun	astyle/src/astyle_main.cpp	/^void ASConsole::setIsDryRun(bool state)$/;"	f	class:astyle::ASConsole
setIsFormattedOnly	astyle/src/astyle_main.cpp	/^void ASConsole::setIsFormattedOnly(bool state)$/;"	f	class:astyle::ASConsole
setIsQuiet	astyle/src/astyle_main.cpp	/^void ASConsole::setIsQuiet(bool state)$/;"	f	class:astyle::ASConsole
setIsRecursive	astyle/src/astyle_main.cpp	/^void ASConsole::setIsRecursive(bool state)$/;"	f	class:astyle::ASConsole
setIsVerbose	astyle/src/astyle_main.cpp	/^void ASConsole::setIsVerbose(bool state)$/;"	f	class:astyle::ASConsole
setJavaStyle	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setJavaStyle()$/;"	f	class:astyle::ASBeautifier
setLabelIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setLabelIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setLanguageFromLCID	astyle/src/ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromLCID(size_t lcid)$/;"	f	class:astyle::ASLocalizer
setLanguageFromName	astyle/src/ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromName(const char* langID)$/;"	f	class:astyle::ASLocalizer
setLineEndFormat	astyle/src/ASFormatter.cpp	/^void ASFormatter::setLineEndFormat(LineEndFormat fmt)$/;"	f	class:astyle::ASFormatter
setMaxCodeLength	astyle/src/ASFormatter.cpp	/^void ASFormatter::setMaxCodeLength(int max)$/;"	f	class:astyle::ASFormatter
setMaxInStatementIndentLength	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setMaxInStatementIndentLength(int max)$/;"	f	class:astyle::ASBeautifier
setMethodPrefixPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setMethodPrefixPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setMethodPrefixUnPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setMethodPrefixUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setMinConditionalIndentLength	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentLength()$/;"	f	class:astyle::ASBeautifier
setMinConditionalIndentOption	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentOption(int min)$/;"	f	class:astyle::ASBeautifier
setModeManuallySet	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setModeManuallySet(bool state)$/;"	f	class:astyle::ASBeautifier
setModifierIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setModifierIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setNamespaceIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setNamespaceIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setNoBackup	astyle/src/astyle_main.cpp	/^void ASConsole::setNoBackup(bool state)$/;"	f	class:astyle::ASConsole
setObjCColonPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setObjCColonPaddingMode(ObjCColonPad mode)$/;"	f	class:astyle::ASFormatter
setOperatorPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setOperatorPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setOptionsFileName	astyle/src/astyle_main.cpp	/^void ASConsole::setOptionsFileName(string name)$/;"	f	class:astyle::ASConsole
setOrigSuffix	astyle/src/astyle_main.cpp	/^void ASConsole::setOrigSuffix(string suffix)$/;"	f	class:astyle::ASConsole
setOutputEOL	astyle/src/astyle_main.cpp	/^void ASConsole::setOutputEOL(LineEndFormat lineEndFormat, const char* currentEOL)$/;"	f	class:astyle::ASConsole
setParensFirstPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setParensFirstPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensHeaderPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setParensHeaderPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensInsidePaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setParensInsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensOutsidePaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setParensOutsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensUnPaddingMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setParensUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setPointerAlignment	astyle/src/ASFormatter.cpp	/^void ASFormatter::setPointerAlignment(PointerAlign alignment)$/;"	f	class:astyle::ASFormatter
setPreprocBlockIndent	astyle/src/ASFormatter.cpp	/^void ASFormatter::setPreprocBlockIndent(bool state)$/;"	f	class:astyle::ASFormatter
setPreprocConditionalIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setPreprocConditionalIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setPreprocDefineIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setPreprocDefineIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setPreserveDate	astyle/src/astyle_main.cpp	/^void ASConsole::setPreserveDate(bool state)$/;"	f	class:astyle::ASConsole
setReferenceAlignment	astyle/src/ASFormatter.cpp	/^void ASFormatter::setReferenceAlignment(ReferenceAlign alignment)$/;"	f	class:astyle::ASFormatter
setRemoveBracketsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setRemoveBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setSharpStyle	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setSharpStyle()$/;"	f	class:astyle::ASBeautifier
setSingleStatementsMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setSingleStatementsMode(bool state)$/;"	f	class:astyle::ASFormatter
setSpaceIndentation	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setSpaceIndentation(int length)$/;"	f	class:astyle::ASBeautifier
setStatus	machine/interrupt.h	/^    void setStatus(MachineStatus st)$/;"	f	class:Interrupt
setStatus	threads/thread.h	/^    void setStatus(ThreadStatus st)$/;"	f	class:Thread
setStripCommentPrefix	astyle/src/ASFormatter.cpp	/^void ASFormatter::setStripCommentPrefix(bool state)$/;"	f	class:astyle::ASFormatter
setSwitchIndent	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setSwitchIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setTabIndentation	astyle/src/ASBeautifier.cpp	/^void ASBeautifier::setTabIndentation(int length, bool forceTabs)$/;"	f	class:astyle::ASBeautifier
setTabSpaceConversionMode	astyle/src/ASFormatter.cpp	/^void ASFormatter::setTabSpaceConversionMode(bool state)$/;"	f	class:astyle::ASFormatter
setTranslationClass	astyle/src/ASLocalizer.cpp	/^void ASLocalizer::setTranslationClass()$/;"	f	class:astyle::ASLocalizer
settext	astyle/src/ASLocalizer.cpp	/^const char* ASLocalizer::settext(const char* textIn) const$/;"	f	class:astyle::ASLocalizer
shouldAddBrackets	astyle/src/astyle.h	/^		bool shouldAddBrackets;$/;"	m	class:astyle::ASFormatter
shouldAddOneLineBrackets	astyle/src/astyle.h	/^		bool shouldAddOneLineBrackets;$/;"	m	class:astyle::ASFormatter
shouldAlignMethodColon	astyle/src/astyle.h	/^		bool shouldAlignMethodColon;$/;"	m	class:astyle::ASBeautifier
shouldAttachClass	astyle/src/astyle.h	/^		bool shouldAttachClass;$/;"	m	class:astyle::ASFormatter
shouldAttachExternC	astyle/src/astyle.h	/^		bool shouldAttachExternC;$/;"	m	class:astyle::ASFormatter
shouldAttachInline	astyle/src/astyle.h	/^		bool shouldAttachInline;$/;"	m	class:astyle::ASFormatter
shouldAttachNamespace	astyle/src/astyle.h	/^		bool shouldAttachNamespace;$/;"	m	class:astyle::ASFormatter
shouldBreakBlocks	astyle/src/astyle.h	/^		bool shouldBreakBlocks;$/;"	m	class:astyle::ASFormatter
shouldBreakClosingHeaderBlocks	astyle/src/astyle.h	/^		bool shouldBreakClosingHeaderBlocks;$/;"	m	class:astyle::ASFormatter
shouldBreakClosingHeaderBrackets	astyle/src/astyle.h	/^		bool shouldBreakClosingHeaderBrackets;$/;"	m	class:astyle::ASFormatter
shouldBreakElseIfs	astyle/src/astyle.h	/^		bool shouldBreakElseIfs;$/;"	m	class:astyle::ASFormatter
shouldBreakLineAfterLogical	astyle/src/astyle.h	/^		bool shouldBreakLineAfterLogical;$/;"	m	class:astyle::ASFormatter
shouldBreakLineAtNextChar	astyle/src/astyle.h	/^		bool shouldBreakLineAtNextChar;$/;"	m	class:astyle::ASFormatter
shouldBreakOneLineBlocks	astyle/src/astyle.h	/^		bool shouldBreakOneLineBlocks;$/;"	m	class:astyle::ASFormatter
shouldBreakOneLineStatements	astyle/src/astyle.h	/^		bool shouldBreakOneLineStatements;$/;"	m	class:astyle::ASFormatter
shouldCloseTemplates	astyle/src/astyle.h	/^		bool shouldCloseTemplates;$/;"	m	class:astyle::ASFormatter
shouldConvertTabs	astyle/src/astyle.h	/^		bool shouldConvertTabs;$/;"	m	class:astyle::ASFormatter
shouldDeleteEmptyLines	astyle/src/astyle.h	/^		bool shouldDeleteEmptyLines;$/;"	m	class:astyle::ASFormatter
shouldForceTabIndentation	astyle/src/astyle.h	/^		bool shouldForceTabIndentation;$/;"	m	class:astyle::ASBeautifier
shouldIndentBrackettedLine	astyle/src/astyle.h	/^		bool shouldIndentBrackettedLine;$/;"	m	class:astyle::ASBeautifier
shouldIndentCol1Comments	astyle/src/astyle.h	/^		bool shouldIndentCol1Comments;$/;"	m	class:astyle::ASFormatter
shouldIndentPreprocBlock	astyle/src/astyle.h	/^		bool shouldIndentPreprocBlock;$/;"	m	class:astyle::ASFormatter
shouldIndentPreprocConditional	astyle/src/astyle.h	/^		bool shouldIndentPreprocConditional;$/;"	m	class:astyle::ASBeautifier
shouldIndentPreprocDefine	astyle/src/astyle.h	/^		bool shouldIndentPreprocDefine;$/;"	m	class:astyle::ASBeautifier
shouldKeepLineUnbroken	astyle/src/astyle.h	/^		bool shouldKeepLineUnbroken;$/;"	m	class:astyle::ASFormatter
shouldPadFirstParen	astyle/src/astyle.h	/^		bool shouldPadFirstParen;$/;"	m	class:astyle::ASFormatter
shouldPadHeader	astyle/src/astyle.h	/^		bool shouldPadHeader;$/;"	m	class:astyle::ASFormatter
shouldPadMethodColon	astyle/src/astyle.h	/^		bool shouldPadMethodColon;$/;"	m	class:astyle::ASFormatter
shouldPadMethodPrefix	astyle/src/astyle.h	/^		bool shouldPadMethodPrefix;$/;"	m	class:astyle::ASFormatter
shouldPadOperators	astyle/src/astyle.h	/^		bool shouldPadOperators;$/;"	m	class:astyle::ASFormatter
shouldPadParensInside	astyle/src/astyle.h	/^		bool shouldPadParensInside;$/;"	m	class:astyle::ASFormatter
shouldPadParensOutside	astyle/src/astyle.h	/^		bool shouldPadParensOutside;$/;"	m	class:astyle::ASFormatter
shouldRemoveBrackets	astyle/src/astyle.h	/^		bool shouldRemoveBrackets;$/;"	m	class:astyle::ASFormatter
shouldRemoveNextClosingBracket	astyle/src/astyle.h	/^		bool shouldRemoveNextClosingBracket;$/;"	m	class:astyle::ASFormatter
shouldReparseCurrentChar	astyle/src/astyle.h	/^		bool shouldReparseCurrentChar;$/;"	m	class:astyle::ASFormatter
shouldStripCommentPrefix	astyle/src/astyle.h	/^		bool shouldStripCommentPrefix;$/;"	m	class:astyle::ASFormatter
shouldUnPadMethodPrefix	astyle/src/astyle.h	/^		bool shouldUnPadMethodPrefix;$/;"	m	class:astyle::ASFormatter
shouldUnPadParens	astyle/src/astyle.h	/^		bool shouldUnPadParens;$/;"	m	class:astyle::ASFormatter
shouldUnindentComment	astyle/src/astyle.h	/^		bool shouldUnindentComment;$/;"	m	class:astyle::ASEnhancer
shouldUnindentLine	astyle/src/astyle.h	/^		bool shouldUnindentLine;$/;"	m	class:astyle::ASEnhancer
singleStep	machine/machine.h	/^    bool singleStep;		\/\/ drop back into the debugger after each$/;"	m	class:Machine
size	userprog/noff.h	/^    int size;			\/* size of segment *\/$/;"	m	struct:segment
sleep	astyle/src/astyle_main.cpp	/^void ASConsole::sleep(int seconds) const$/;"	f	class:astyle::ASConsole
sock	machine/network.h	/^    int sock;                   \/\/ UNIX socket number for incoming packets$/;"	m	class:NetworkInput
sock	machine/network.h	/^    int sock;                   \/\/ UNIX socket number for outgoing packets$/;"	m	class:NetworkOutput
sockName	machine/network.h	/^    char sockName[32];          \/\/ File name corresponding to UNIX socket$/;"	m	class:NetworkInput
sortOnLength	astyle/src/ASResource.cpp	/^bool sortOnLength(const string* a, const string* b)$/;"	f	namespace:astyle
sortOnName	astyle/src/ASResource.cpp	/^bool sortOnName(const string* a, const string* b)$/;"	f	namespace:astyle
sourceIterator	astyle/src/astyle.h	/^		ASSourceIterator* sourceIterator;$/;"	m	class:astyle::ASBeautifier
sourceIterator	astyle/src/astyle.h	/^		ASSourceIterator* sourceIterator;$/;"	m	class:astyle::ASFormatter
sp	threads/switch.S	/^#define sp	$30	\/* (S)		stack pointer		*\/$/;"	d
sp	threads/switch.S	/^#define sp      $29     \/* stack pointer *\/$/;"	d
space	threads/thread.h	/^    AddrSpace *space;			\/\/ User code this thread is running.$/;"	m	class:Thread
spaceIndentCount	astyle/src/astyle.h	/^		int  spaceIndentCount;$/;"	m	class:astyle::ASBeautifier
spaceIndentObjCMethodDefinition	astyle/src/astyle.h	/^		int  spaceIndentObjCMethodDefinition;$/;"	m	class:astyle::ASBeautifier
spacePadNum	astyle/src/astyle.h	/^		int  spacePadNum;$/;"	m	class:astyle::ASFormatter
specialTable	machine/mipssim.h	/^static int specialTable[] =$/;"	v
squareBracketCount	astyle/src/astyle.h	/^		int  squareBracketCount;$/;"	m	class:astyle::ASBeautifier
squareBracketCount	astyle/src/astyle.h	/^		int  squareBracketCount;$/;"	m	class:astyle::ASFormatter
stack	threads/thread.h	/^    int *stack; 	 	\/\/ Bottom of the stack$/;"	m	class:Thread
stackTop	threads/thread.h	/^    int *stackTop;			 \/\/ the current stack pointer$/;"	m	class:Thread
standardizePath	astyle/src/astyle_main.cpp	/^void ASConsole::standardizePath(string &path, bool removeBeginningSeparator \/*false*\/) const$/;"	f	class:astyle::ASConsole
statementEndsWithComma	astyle/src/ASBeautifier.cpp	/^bool ASBeautifier::statementEndsWithComma(const string &line, int index) const$/;"	f	class:astyle::ASBeautifier
stats	threads/kernel.h	/^    Statistics *stats;		\/\/ performance metrics$/;"	m	class:Kernel
status	machine/interrupt.h	/^    MachineStatus status;	\/\/ idle, kernel mode, user mode$/;"	m	class:Interrupt
status	threads/thread.h	/^    ThreadStatus status;	\/\/ ready, running or blocked$/;"	m	class:Thread
streamLength	astyle/src/astyle_main.h	/^		streamoff streamLength; \/\/ length of the input file stream$/;"	m	class:astyle::ASStreamIterator
stringEndsWith	astyle/src/astyle_main.cpp	/^bool ASConsole::stringEndsWith(const string &str, const string &suffix) const$/;"	f	class:astyle::ASConsole
stripCommentPrefix	astyle/src/ASFormatter.cpp	/^void ASFormatter::stripCommentPrefix()$/;"	f	class:astyle::ASFormatter
structStack	astyle/src/astyle.h	/^		vector<bool>* structStack;$/;"	m	class:astyle::ASFormatter
sw	astyle/src/astyle.h	/^		switchVariables sw;                      \/\/ switch variables struct$/;"	m	class:astyle::ASEnhancer
swap16bit	astyle/src/astyle_main.cpp	/^int Utf8_16::swap16bit(int value) const$/;"	f	class:astyle::Utf8_16
switchBracketCount	astyle/src/astyle.h	/^			int  switchBracketCount;$/;"	m	struct:astyle::ASEnhancer::switchVariables
switchDepth	astyle/src/astyle.h	/^		int  switchDepth;$/;"	m	class:astyle::ASEnhancer
switchIndent	astyle/src/astyle.h	/^		bool switchIndent;$/;"	m	class:astyle::ASBeautifier
switchStack	astyle/src/astyle.h	/^		vector<switchVariables> switchStack;     \/\/ stack vector of switch variables$/;"	m	class:astyle::ASEnhancer
switchVariables	astyle/src/astyle.h	/^		struct switchVariables$/;"	s	class:astyle::ASEnhancer
synchConsoleIn	threads/kernel.h	/^    SynchConsoleInput *synchConsoleIn;$/;"	m	class:Kernel
synchConsoleOut	threads/kernel.h	/^    SynchConsoleOutput *synchConsoleOut;$/;"	m	class:Kernel
synchDisk	threads/kernel.h	/^    SynchDisk *synchDisk;$/;"	m	class:Kernel
systemTicks	machine/stats.h	/^    int systemTicks;	 	\/\/ Time spent executing system code$/;"	m	class:Statistics
t	threads/kernel.h	/^    Thread* t[10];$/;"	m	class:Kernel
t0	threads/switch.S	/^#define t0	$1	\/* (T)		temporary registers	*\/$/;"	d
tabIncrementIn	astyle/src/astyle.h	/^		int  tabIncrementIn;$/;"	m	class:astyle::ASFormatter
tabLength	astyle/src/astyle.h	/^		int  tabLength;$/;"	m	class:astyle::ASBeautifier
tabLength	astyle/src/astyle.h	/^		int  tabLength;$/;"	m	class:astyle::ASEnhancer
table	filesys/directory.h	/^    DirectoryEntry *table;		\/\/ Table of pairs:$/;"	m	class:Directory
table	lib/hash.h	/^    HashTable<Key,T> *table;	\/\/ the hash table we're stepping through$/;"	m	class:HashIterator
tableSize	filesys/directory.h	/^    int tableSize;			\/\/ Number of directory entries$/;"	m	class:Directory
targetDirectory	astyle/src/astyle_main.h	/^		string targetDirectory;             \/\/ path to the directory being processed$/;"	m	class:astyle::ASConsole
targetFilename	astyle/src/astyle_main.h	/^		string targetFilename;              \/\/ file name being processed$/;"	m	class:astyle::ASConsole
tellg	astyle/src/astyle_main.cpp	/^streamoff ASStreamIterator<T>::tellg()$/;"	f	class:astyle::ASStreamIterator
tempMemoryAllocation	astyle/src/astyle_main.cpp	/^char* STDCALL ASLibrary::tempMemoryAllocation(unsigned long memoryNeeded)$/;"	f	class:astyle::ASLibrary
tempStacks	astyle/src/astyle.h	/^		vector<vector<const string*>* >* tempStacks;$/;"	m	class:astyle::ASBeautifier
templateDepth	astyle/src/astyle.h	/^		int  templateDepth;$/;"	m	class:astyle::ASBeautifier
templateDepth	astyle/src/astyle.h	/^		int  templateDepth;$/;"	m	class:astyle::ASFormatter
testForTimeToSplitFormattedLine	astyle/src/ASFormatter.cpp	/^void ASFormatter::testForTimeToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter
threadNum	threads/kernel.h	/^    int threadNum;$/;"	m	class:Kernel
timer	threads/alarm.h	/^    Timer *timer;		\/\/ the hardware timer device$/;"	m	class:Alarm
tlb	machine/machine.h	/^    TranslationEntry *tlb;		\/\/ this pointer should be considered$/;"	m	class:Machine
to	machine/network.h	/^    NetworkAddress to;		\/\/ Destination machine ID$/;"	m	class:PacketHeader
to	network/post.h	/^    MailBoxAddress to;		\/\/ Destination mail box$/;"	m	class:MailHeader
toBeDestroyed	threads/scheduler.h	/^    Thread *toBeDestroyed;	\/\/ finishing thread to be destroyed$/;"	m	class:Scheduler
totalTicks	machine/stats.h	/^    int totalTicks;      	\/\/ Total time running Nachos$/;"	m	class:Statistics
translate	astyle/src/ASLocalizer.cpp	/^string &Translation::translate(const string &stringIn) const$/;"	f	class:astyle::Translation
trim	astyle/src/ASBeautifier.cpp	/^string ASBeautifier::trim(const string &str) const$/;"	f	class:astyle::ASBeautifier
trimContinuationLine	astyle/src/ASFormatter.cpp	/^void ASFormatter::trimContinuationLine()$/;"	f	class:astyle::ASFormatter
type	machine/interrupt.h	/^    IntType type;		\/\/ for debugging$/;"	m	class:PendingInterrupt
ubyte	astyle/src/astyle_main.h	/^		typedef unsigned char ubyte;  \/\/ 8 bits$/;"	t	class:astyle::Utf8_16
unindentCase	astyle/src/astyle.h	/^			bool unindentCase;$/;"	m	struct:astyle::ASEnhancer::switchVariables
unindentDepth	astyle/src/astyle.h	/^			int  unindentDepth;$/;"	m	struct:astyle::ASEnhancer::switchVariables
unindentLine	astyle/src/ASEnhancer.cpp	/^int ASEnhancer::unindentLine(string &line, int unindent) const$/;"	f	class:astyle::ASEnhancer
unindentNextLine	astyle/src/astyle.h	/^		bool unindentNextLine;$/;"	m	class:astyle::ASEnhancer
uninitData	userprog/noff.h	/^    Segment uninitData;		\/* uninitialized data segment --$/;"	m	struct:noffHeader
uninitdata	test/segments.c	/^int uninitdata[N];                   \/* allocate space in .bss segment        *\/$/;"	v
updateExcludeVector	astyle/src/astyle_main.cpp	/^void ASConsole::updateExcludeVector(string suffixParam)$/;"	f	class:astyle::ASConsole
updateFormattedLineSplitPoints	astyle/src/ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPoints(char appendedChar)$/;"	f	class:astyle::ASFormatter
updateFormattedLineSplitPointsOperator	astyle/src/ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsOperator(const string &sequence)$/;"	f	class:astyle::ASFormatter
updateFormattedLineSplitPointsPointerOrReference	astyle/src/ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsPointerOrReference(size_t index)$/;"	f	class:astyle::ASFormatter
use	machine/translate.h	/^    bool use;           \/\/ This bit is set by the hardware every time the$/;"	m	class:TranslationEntry
useAscii	astyle/src/astyle_main.h	/^		bool useAscii;                      \/\/ ascii option$/;"	m	class:astyle::ASConsole
useTabs	astyle/src/astyle.h	/^		bool useTabs;$/;"	m	class:astyle::ASEnhancer
userRegisters	threads/thread.h	/^    int userRegisters[NumTotalRegs];	\/\/ user-level CPU register state$/;"	m	class:Thread
userTicks	machine/stats.h	/^    int userTicks;       	\/\/ Time spent executing user code$/;"	m	class:Statistics
utf16	astyle/src/astyle_main.h	/^		typedef unsigned short utf16; \/\/ 16 bits$/;"	t	class:astyle::Utf8_16
utf16_t	astyle/src/astyle_main.h	/^	typedef unsigned short utf16_t;$/;"	t
utf16len	astyle/src/astyle_main.cpp	/^size_t Utf8_16::utf16len(const utf16* utf16In) const$/;"	f	class:astyle::Utf8_16
utf8	astyle/src/astyle_main.h	/^		typedef unsigned char utf8;   \/\/ 8 bits$/;"	t	class:astyle::Utf8_16
utf8_16	astyle/src/astyle_main.h	/^		Utf8_16 utf8_16;                    \/\/ utf8\/16 conversion methods$/;"	m	class:astyle::ASConsole
utf8_16	astyle/src/astyle_main.h	/^		Utf8_16 utf8_16;            \/\/ utf8\/16 conversion methods$/;"	m	class:astyle::ASLibrary
v0	threads/switch.S	/^#define	v0	$0	\/* (T)		return value		*\/$/;"	d
valid	machine/translate.h	/^    bool valid;         \/\/ If this bit is set, the translation is ignored.$/;"	m	class:TranslationEntry
value	machine/mipssim.cc	/^    unsigned int value; \/\/ binary representation of the instruction$/;"	m	class:Instruction	file:
value	threads/synch.h	/^    int value;         \/\/ semaphore value, always >= 0$/;"	m	class:Semaphore
verbatimDelimiter	astyle/src/astyle.h	/^		string verbatimDelimiter;$/;"	m	class:astyle::ASBeautifier
verbatimDelimiter	astyle/src/astyle.h	/^		string verbatimDelimiter;$/;"	m	class:astyle::ASFormatter
virtualAddr	userprog/noff.h	/^    int virtualAddr;		\/* location of segment in virt addr space *\/$/;"	m	struct:segment
virtualPage	machine/translate.h	/^    int virtualPage;  	\/\/ The page number in virtual memory.$/;"	m	class:TranslationEntry
waitFor	userprog/synchconsole.h	/^    Semaphore *waitFor;		\/\/ wait for callBack$/;"	m	class:SynchConsoleInput
waitFor	userprog/synchconsole.h	/^    Semaphore *waitFor;		\/\/ wait for callBack$/;"	m	class:SynchConsoleOutput
waitForRemove	astyle/src/astyle_main.cpp	/^int ASConsole::waitForRemove(const char* newFileName) const$/;"	f	class:astyle::ASConsole
waitQueue	threads/synch.h	/^    List<Semaphore *> *waitQueue;	\/\/ list of waiting threads$/;"	m	class:Condition
waitingBeautifierStack	astyle/src/astyle.h	/^		vector<ASBeautifier*>* waitingBeautifierStack;$/;"	m	class:astyle::ASBeautifier
waitingBeautifierStackLengthStack	astyle/src/astyle.h	/^		vector<int>* waitingBeautifierStackLengthStack;$/;"	m	class:astyle::ASBeautifier
when	machine/interrupt.h	/^    int when;			\/\/ When the interrupt is supposed to fire$/;"	m	class:PendingInterrupt
wildcmp	astyle/src/astyle_main.cpp	/^int ASConsole::wildcmp(const char* wild, const char* data) const$/;"	f	class:astyle::ASConsole
winLang	astyle/src/ASLocalizer.cpp	/^	size_t winLang;$/;"	m	struct:astyle::WinLangCode	file:
wlc	astyle/src/ASLocalizer.cpp	/^static WinLangCode wlc[] =$/;"	m	namespace:astyle	file:
writeFile	astyle/src/astyle_main.cpp	/^void ASConsole::writeFile(const string &fileName_, FileEncoding encoding, ostringstream &out) const$/;"	f	class:astyle::ASConsole
writeFileNo	machine/console.h	/^    int writeFileNo;			\/\/ UNIX file emulating the display$/;"	m	class:ConsoleOutput
yieldOnReturn	machine/interrupt.h	/^    bool yieldOnReturn; 	\/\/ TRUE if we are to context switch$/;"	m	class:Interrupt
z	threads/switch.S	/^#define z       $0      \/* zero register *\/$/;"	d
zero	threads/switch.S	/^#define zero	$31	\/* 		wired zero		*\/$/;"	d
~ASBase	astyle/src/astyle.h	/^		virtual ~ASBase() {}$/;"	f	class:astyle::ASBase
~ASBeautifier	astyle/src/ASBeautifier.cpp	/^ASBeautifier::~ASBeautifier()$/;"	f	class:astyle::ASBeautifier
~ASEnhancer	astyle/src/ASEnhancer.cpp	/^ASEnhancer::~ASEnhancer()$/;"	f	class:astyle::ASEnhancer
~ASFormatter	astyle/src/ASFormatter.cpp	/^ASFormatter::~ASFormatter()$/;"	f	class:astyle::ASFormatter
~ASLibrary	astyle/src/astyle_main.h	/^		virtual ~ASLibrary() {}$/;"	f	class:astyle::ASLibrary
~ASLocalizer	astyle/src/ASLocalizer.cpp	/^ASLocalizer::~ASLocalizer()$/;"	f	class:astyle::ASLocalizer
~ASResource	astyle/src/astyle.h	/^		virtual ~ASResource() {}$/;"	f	class:astyle::ASResource
~ASSourceIterator	astyle/src/astyle.h	/^		virtual ~ASSourceIterator() {}$/;"	f	class:astyle::ASSourceIterator
~ASStreamIterator	astyle/src/astyle_main.cpp	/^ASStreamIterator<T>::~ASStreamIterator()$/;"	f	class:astyle::ASStreamIterator
~AddrSpace	userprog/addrspace.cc	/^AddrSpace::~AddrSpace()$/;"	f	class:AddrSpace
~Alarm	threads/alarm.h	/^    ~Alarm()$/;"	f	class:Alarm
~Bitmap	lib/bitmap.cc	/^Bitmap::~Bitmap()$/;"	f	class:Bitmap
~CallBackObj	machine/callback.h	/^    virtual ~CallBackObj() {};$/;"	f	class:CallBackObj
~Condition	threads/synch.cc	/^Condition::~Condition()$/;"	f	class:Condition
~ConsoleInput	machine/console.cc	/^ConsoleInput::~ConsoleInput()$/;"	f	class:ConsoleInput
~ConsoleOutput	machine/console.cc	/^ConsoleOutput::~ConsoleOutput()$/;"	f	class:ConsoleOutput
~Directory	filesys/directory.cc	/^Directory::~Directory()$/;"	f	class:Directory
~Disk	machine/disk.cc	/^Disk::~Disk()$/;"	f	class:Disk
~FileHeader	filesys/filehdr.cc	/^FileHeader::~FileHeader()$/;"	f	class:FileHeader
~FileSystem	filesys/filesys.cc	/^FileSystem::~FileSystem()$/;"	f	class:FileSystem
~HashIterator	lib/hash.h	/^    ~HashIterator()$/;"	f	class:HashIterator
~HashTable	lib/hash.cc	/^HashTable<Key,T>::~HashTable()$/;"	f	class:HashTable
~Interrupt	machine/interrupt.cc	/^Interrupt::~Interrupt()$/;"	f	class:Interrupt
~Kernel	threads/kernel.cc	/^Kernel::~Kernel()$/;"	f	class:Kernel
~List	lib/list.cc	/^List<T>::~List()$/;"	f	class:List
~Lock	threads/synch.cc	/^Lock::~Lock()$/;"	f	class:Lock
~Machine	machine/machine.cc	/^Machine::~Machine()$/;"	f	class:Machine
~MailBox	network/post.cc	/^MailBox::~MailBox()$/;"	f	class:MailBox
~NetworkInput	machine/network.cc	/^NetworkInput::~NetworkInput()$/;"	f	class:NetworkInput
~NetworkOutput	machine/network.cc	/^NetworkOutput::~NetworkOutput()$/;"	f	class:NetworkOutput
~OpenFile	filesys/openfile.cc	/^OpenFile::~OpenFile()$/;"	f	class:OpenFile
~OpenFile	filesys/openfile.h	/^    ~OpenFile()$/;"	f	class:OpenFile
~PersistentBitmap	filesys/pbitmap.cc	/^PersistentBitmap::~PersistentBitmap()$/;"	f	class:PersistentBitmap
~PostOfficeInput	network/post.cc	/^PostOfficeInput::~PostOfficeInput()$/;"	f	class:PostOfficeInput
~PostOfficeOutput	network/post.cc	/^PostOfficeOutput::~PostOfficeOutput()$/;"	f	class:PostOfficeOutput
~Scheduler	threads/scheduler.cc	/^Scheduler::~Scheduler()$/;"	f	class:Scheduler
~Semaphore	threads/synch.cc	/^Semaphore::~Semaphore()$/;"	f	class:Semaphore
~SortedList	lib/list.h	/^    ~SortedList() {};		\/\/ base class destructor called automatically$/;"	f	class:SortedList
~SynchConsoleInput	userprog/synchconsole.cc	/^SynchConsoleInput::~SynchConsoleInput()$/;"	f	class:SynchConsoleInput
~SynchConsoleOutput	userprog/synchconsole.cc	/^SynchConsoleOutput::~SynchConsoleOutput()$/;"	f	class:SynchConsoleOutput
~SynchDisk	filesys/synchdisk.cc	/^SynchDisk::~SynchDisk()$/;"	f	class:SynchDisk
~SynchList	threads/synchlist.cc	/^SynchList<T>::~SynchList()$/;"	f	class:SynchList
~Thread	threads/thread.cc	/^Thread::~Thread()$/;"	f	class:Thread
~Timer	machine/timer.h	/^    virtual ~Timer() {}$/;"	f	class:Timer
~Translation	astyle/src/ASLocalizer.h	/^		virtual ~Translation() {}$/;"	f	class:astyle::Translation
